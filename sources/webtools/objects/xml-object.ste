;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;; BEGIN LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
; Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          ;
;                                                                            ;
; The contents of this file are subject to the Mozilla Public License        ;
; Version 1.1 (the "License"); you may not use this file except in           ;
; compliance with the License. You may obtain a copy of the License at       ;
; http://www.mozilla.org/MPL/                                                ;
;                                                                            ;
; Software distributed under the License is distributed on an "AS IS" basis, ;
; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   ;
; for the specific language governing rights and limitations under the       ;
; License.                                                                   ;
;                                                                            ;
; The Original Code is the STELLA Programming Language.                      ;
;                                                                            ;
; The Initial Developer of the Original Code is                              ;
; UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          ;
; 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               ;
;                                                                            ;
; Portions created by the Initial Developer are Copyright (C) 2003-2010      ;
; the Initial Developer. All Rights Reserved.                                ;
;                                                                            ;
; Contributor(s):                                                            ;
;                                                                            ;
; Alternatively, the contents of this file may be used under the terms of    ;
; either the GNU General Public License Version 2 or later (the "GPL"), or   ;
; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   ;
; in which case the provisions of the GPL or the LGPL are applicable instead ;
; of those above. If you wish to allow use of your version of this file only ;
; under the terms of either the GPL or the LGPL, and not to allow others to  ;
; use your version of this file under the terms of the MPL, indicate your    ;
; decision by deleting the provisions above and replace them with the notice ;
; and other provisions required by the GPL or the LGPL. If you do not delete ;
; the provisions above, a recipient may use your version of this file under  ;
; the terms of any one of the MPL, the GPL or the LGPL.                      ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Version: xml-object.ste,v 1.7 2010/02/11 00:07:58 hans Exp

(IN-PACKAGE "STELLA")

(IN-MODULE "XML-OBJECTS")


;;;;
;;;;  Namespace support
;;;;

(DEFGLOBAL *NAMESPACE-PREFIX-URI-TABLE* PROPERTY-LIST (NEW PROPERTY-LIST)
  :DOCUMENTATION
  "Property list associating module names (namespace prefixes) with namespace uris.")

(DEFGLOBAL *NAMESPACE-URI-PREFIX-TABLE* PROPERTY-LIST (NEW PROPERTY-LIST)
  :DOCUMENTATION
  "Property list associating namespace uris with module names.")

(DEFGLOBAL *INVISIBLE-NAMESPACES-ON-OUTPUT* CONS NIL
  :DOCUMENTATION
  "List of Namespaces which should not be output during xml generation.  
   Should be used in conjuction with *SUPRESS-NAMESPACES?*")

(DEFMACRO DEFNAMESPACE (&BODY (body CONS))
  (LET ((namespaceURI (FIRST body))
	(namespaceName (MODULE-NAME *MODULE*))
	(bodyWithHeader (CONS NULL body)) ;; needed by `extract-options'
	(options (NEW PROPERTY-LIST
                      :THE-PLIST (EXTRACT-OPTIONS bodyWithHeader NULL)))
	(invisible? SYMBOL (LOOKUP options :INVISIBLE-ON-OUTPUT?))
	(invisibleForm (CHOOSE (AND (DEFINED? invisible?)
				    (STRING-EQUAL? (SYMBOL-NAME invisible?) "TRUE"))
			       (BQUOTE ((PUSHQ *INVISIBLE-NAMESPACES-ON-OUTPUT* & namespaceName)))
			       NIL)))
    (RETURN
      (BQUOTE (STARTUP-TIME-PROGN
		  (INSERT-AT *NAMESPACE-PREFIX-URI-TABLE* & namespaceName & namespaceURI)
		(INSERT-AT *NAMESPACE-URI-PREFIX-TABLE* & namespaceURI & namespaceName)
		&& invisibleForm
		)))))


;;;;
;;;;  Class support
;;;;

(DEFSLOT STORAGE-SLOT ENCODING-SCHEME :TYPE KEYWORD
         :OPTION-KEYWORD :ENCODING-SCHEME
         :DOCUMENTATION "Specify an encoding scheme used to encode the value
of a slot.  The currently understood values are :PLAIN (or NULL) and :BASE64")

(STARTUP-TIME-PROGN :CLASSES
  ;; KLUDGE to deal with a bootstrap problem: slot objects get defined in the
  ;; startup phase following class object definitions; this means this slot
  ;; would be defined after the classes below which then trips us up for classes
  ;; where we use the :encoding-scheme option.  By duplicating the above definition
  ;; in here we work around this problem:
  (DEFINE-EXTERNAL-SLOT-FROM-PARSE-TREE
    (QUOTE
     (DEFSLOT STORAGE-SLOT ENCODING-SCHEME :TYPE KEYWORD
         :OPTION-KEYWORD :ENCODING-SCHEME
         :DOCUMENTATION "Specify an encoding scheme used to encode the value
of a slot.  The currently understood values are :PLAIN (or NULL) and :BASE64"))))


(DEFCLASS XMLObject (STANDARD-OBJECT)
  :DOCUMENTATION "The Root of all XMLObjects"
  :ABSTRACT? TRUE
  :PUBLIC-SLOTS
  ((textContent :TYPE STRING)
   (cdataContent :TYPE STRING))
  :PRINT-FORM (PRINT-NATIVE-STREAM STREAM (TO-XML-STRING SELF)))

(DEFMETHOD (GET-CONTENT STRING) ((OBJ XMLObject))
  :PUBLIC? TRUE
  :DOCUMENTATION "Returns the textContent or cdataContent slot, whichever has
a value.  If both are present, only the textContent slot is returned."
  (IF (DEFINED? (textContent OBJ))
    (RETURN (textContent OBJ))
    (RETURN (cdataContent OBJ))))

(DEFMETHOD SET-CONTENT ((OBJ XMLObject) (CONTENT STRING))
  :PUBLIC? TRUE
  :DOCUMENTATION "Sets either the textContent or cdataContent slot, depending on
whether `CONTENT' needs to be encoded as CDATA or not."
  (IF (EXISTS CH IN CONTENT
              WHERE (HTML-CHARACTER-NEEDS-QUOTING? CH))
    (IF (DEFINED? (STRING-SEARCH CONTENT "]]>" 0))
      (LET ((S (NEW STRING-OUTPUT-STREAM)))
        (WRITE-HTML-QUOTING-SPECIAL-CHARACTERS S CONTENT)
        (SETF (textContent OBJ) (THE-STRING S)))
      (SETF (cdataContent OBJ) CONTENT))
    (SETF (textContent OBJ) CONTENT)))

;; Forward reference for pre-processing this file:

(DEFMETHOD (TO-XML-STRING STRING) ((SELF XMLObject)))

;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;; BEGIN LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
; Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          ;
;                                                                            ;
; The contents of this file are subject to the Mozilla Public License        ;
; Version 1.1 (the "License"); you may not use this file except in           ;
; compliance with the License. You may obtain a copy of the License at       ;
; http://www.mozilla.org/MPL/                                                ;
;                                                                            ;
; Software distributed under the License is distributed on an "AS IS" basis, ;
; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   ;
; for the specific language governing rights and limitations under the       ;
; License.                                                                   ;
;                                                                            ;
; The Original Code is the STELLA Programming Language.                      ;
;                                                                            ;
; The Initial Developer of the Original Code is                              ;
; UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          ;
; 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               ;
;                                                                            ;
; Portions created by the Initial Developer are Copyright (C) 2009-2010      ;
; the Initial Developer. All Rights Reserved.                                ;
;                                                                            ;
; Contributor(s):                                                            ;
;                                                                            ;
; Alternatively, the contents of this file may be used under the terms of    ;
; either the GNU General Public License Version 2 or later (the "GPL"), or   ;
; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   ;
; in which case the provisions of the GPL or the LGPL are applicable instead ;
; of those above. If you wish to allow use of your version of this file only ;
; under the terms of either the GPL or the LGPL, and not to allow others to  ;
; use your version of this file under the terms of the MPL, indicate your    ;
; decision by deleting the provisions above and replace them with the notice ;
; and other provisions required by the GPL or the LGPL. If you do not delete ;
; the provisions above, a recipient may use your version of this file under  ;
; the terms of any one of the MPL, the GPL or the LGPL.                      ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Version: http-server-impl.ste,v 1.2 2010/02/12 23:54:27 hans Exp

;;; HTTP API implementation for the embedded Sun HTTP server that ships with JDK 1.6

(in-package "STELLA")

(in-module "HTTP/SUN")


  ;;
;;;;;; Server operations
  ;;

(defclass NATIVE-HTTP-SERVER ()
  :java-native-type "com.sun.net.httpserver.HttpServer")

(defclass HTTP-SERVER-SUN (HTTP-SERVER)
  :public? TRUE
  :slots ((current-server :type NATIVE-HTTP-SERVER)
          (current-server-port :type INTEGER)))

(startup-time-progn
  (if (and (defined? *http-server-implementation*)
           (not (isa? *http-server-implementation* @HTTP-SERVER-SUN)))
      (error "Conflicting HTTP server implementation already loaded")
    (setq *http-server-implementation* (new HTTP-SERVER-SUN))))


(defmethod (start-http-server-impl STRING) ((server HTTP-SERVER-SUN) (port INTEGER))
  ;; If a server is already running it will be stopped and discarded.
  ;; Then a new server will be created running on `port' (even if `port' was
  ;;    the same as for the currently running server).
  (let ((curserv (current-server server)))
    (unless (eql? curserv NULL)
      (verbatim :java "curserv.stop(0)"))
    (verbatim :java
      "try {
         curserv = com.sun.net.httpserver.HttpServer.create(new java.net.InetSocketAddress(port), 0);
       } catch (java.io.IOException e) {
         //rethrowAsStellaException(e, InputOutputException.class, \"start-http-server: \", true)
         throw (InputOutputException)InputOutputException.newInputOutputException(\"start-http-server: \" + e.getMessage()).fillInStackTrace();
       }
")
    (verbatim :java
      "curserv.setExecutor(null); // creates a default executor
       curserv.start()")
    (setf (current-server server) curserv)
    (setf (current-server-port server) port)
    (return NULL)))

(defmethod stop-http-server-impl ((server HTTP-SERVER-SUN))
  (let ((curserv (current-server server)))
    (unless (eql? curserv NULL)
      (verbatim :java "curserv.stop(0)"))))


  ;;
;;;;;; Server exchange API
  ;;

(defclass NATIVE-HTTP-EXCHANGE ()
  :java-native-type "com.sun.net.httpserver.HttpExchange")

(defclass HTTP-EXCHANGE-SUN (HTTP-EXCHANGE)
  :slots ((native-exchange :type NATIVE-HTTP-EXCHANGE)
          (response-code :type INTEGER :initially (get-http-response-code :OK NULL))
          (reply-stream :type NATIVE-OUTPUT-STREAM)
          (handler-options :type PROPERTY-LIST)))


;;; Header accessors:

(defmethod (get-header-value-impl STRING) ((server HTTP-SERVER-SUN) (xchg HTTP-EXCHANGE) (key KEYWORD))
  (let ((jxchg (native-exchange (cast xchg HTTP-EXCHANGE-SUN)))
        (jkey (symbol-name key))) ;; keys are case-insensitive
    (return (verbatim :java "jxchg.getRequestHeaders().getFirst(jkey)"))))

(defmethod (get-reply-header-value-impl STRING) ((server HTTP-SERVER-SUN)
                                                 (xchg HTTP-EXCHANGE)
                                                 (key KEYWORD))
  (let ((jxchg (native-exchange (cast xchg HTTP-EXCHANGE-SUN)))
        (jkey (symbol-name key))) ;; keys are case-insensitive
    (return (verbatim :java "jxchg.getResponseHeaders().getFirst(jkey)"))))

(defmethod set-reply-header-value-impl ((server HTTP-SERVER-SUN)
                                        (xchg HTTP-EXCHANGE)
                                        (key KEYWORD)
                                        (value STRING))
  (let ((jxchg (native-exchange (cast xchg HTTP-EXCHANGE-SUN)))
        (jkey (symbol-name key))) ;; keys are case-insensitive
    (verbatim :java "jxchg.getResponseHeaders().set(jkey, value)")))


;;; Request accessors:

(defmethod (get-request-uri-impl STRING) ((server HTTP-SERVER-SUN) (xchg HTTP-EXCHANGE))
  (let ((jxchg (native-exchange (cast xchg HTTP-EXCHANGE-SUN))))
    (return (verbatim :java "jxchg.getRequestURI().toASCIIString()"))))

(defmethod (get-request-uri-query-impl STRING) ((server HTTP-SERVER-SUN) (xchg HTTP-EXCHANGE))
  (let ((jxchg (native-exchange (cast xchg HTTP-EXCHANGE-SUN))))
    (return (verbatim :java "jxchg.getRequestURI().getRawQuery()"))))

(defmethod (get-request-uri-path-impl STRING) ((server HTTP-SERVER-SUN) (xchg HTTP-EXCHANGE))
  (let ((jxchg (native-exchange (cast xchg HTTP-EXCHANGE-SUN))))
    (return (verbatim :java "jxchg.getRequestURI().getRawPath()"))))

(defmethod (get-request-method-impl KEYWORD) ((server HTTP-SERVER-SUN) (xchg HTTP-EXCHANGE))
  (let ((jxchg (native-exchange (cast xchg HTTP-EXCHANGE-SUN))))
    (return (intern-keyword (verbatim :java "jxchg.getRequestMethod()")))))

(defmethod (get-request-protocol-impl STRING) ((server HTTP-SERVER-SUN) (xchg HTTP-EXCHANGE))
  (let ((jxchg (native-exchange (cast xchg HTTP-EXCHANGE-SUN))))
    (return (verbatim :java "jxchg.getProtocol()"))))

(defmethod (get-request-body-impl STRING) ((server HTTP-SERVER-SUN) (xchg HTTP-EXCHANGE))
  (let ((jxchg (native-exchange (cast xchg HTTP-EXCHANGE-SUN)))
        (bodyStream
         (new INPUT-STREAM
              :native-stream (verbatim :java "new java.io.PushbackInputStream(jxchg.getRequestBody())")
              :buffering-scheme :BLOCK)))
    (return (stream-to-string bodyStream))))

(defmethod (get-request-local-address-impl STRING) ((server HTTP-SERVER-SUN) (xchg HTTP-EXCHANGE))
  (let ((jxchg (native-exchange (cast xchg HTTP-EXCHANGE-SUN)))
        (host STRING (verbatim :java "jxchg.getLocalAddress().getAddress().getHostName()"))
        (port INTEGER (verbatim :java "jxchg.getLocalAddress().getPort()")))
    (return (concatenate host ":" (integer-to-string port)))))

(defmethod (get-request-remote-address-impl STRING) ((server HTTP-SERVER-SUN) (xchg HTTP-EXCHANGE))
  (let ((jxchg (native-exchange (cast xchg HTTP-EXCHANGE-SUN)))
        (host STRING (verbatim :java "jxchg.getRemoteAddress().getAddress().getHostName()"))
        (port INTEGER (verbatim :java "jxchg.getRemoteAddress().getPort()")))
    (return (concatenate host ":" (integer-to-string port)))))


;;; Reply accessors:

(defmethod (get-reply-stream-impl NATIVE-OUTPUT-STREAM) ((server HTTP-SERVER-SUN) (xchg HTTP-EXCHANGE))
  ;; Similar to Lisp, we have to buffer any output, since we have to wait for the handler method to
  ;; finish and generate all its output before we can send out the reply headers which might have
  ;; been affected by the handler.
  (let ((jxchg HTTP-EXCHANGE-SUN xchg)
        (jstream (reply-stream jxchg)))
    (when (null? jstream)
      (setq jstream (verbatim :java "new #$(STELLAROOT).javalib.PrintStringStream()"))
      (setf (reply-stream jxchg) jstream))
    (return jstream)))

(defmethod set-response-code-impl ((server HTTP-SERVER-SUN) (xchg HTTP-EXCHANGE) (code KEYWORD))
  (let ((jxchg HTTP-EXCHANGE-SUN xchg))
    (setf (response-code jxchg) (get-http-response-code code NULL))))


  ;;
;;;;;; Publishing URLs and response handlers
  ;;

(defmethod publish-file-impl ((server HTTP-SERVER-SUN)
                              (path STRING)
                              (file STRING)
                              (options PROPERTY-LIST))
  (publish-handler-impl server path (the-code :function file-handler) options))

(defmethod publish-directory-impl ((server HTTP-SERVER-SUN)
                                   (path STRING)
                                   (directory STRING)
                                   (options PROPERTY-LIST))
  (publish-handler-impl server path (the-code :function directory-handler) options))

(defmethod publish-handler-impl ((server HTTP-SERVER-SUN)
                                 (path STRING)
                                 (handler FUNCTION-CODE)
                                 (options PROPERTY-LIST))
  (let ((ctype STRING (lookup-with-default options :content-type (get-http-mime-type :HTML NULL)))
        (curserv (current-server server)))
    (when (eql? curserv NULL)
      (error "publish-handler: no server instance is running"))
    (verbatim :java
"      GenericResponseHandler genHandler = new GenericResponseHandler();
       genHandler.setDefaultContentType(ctype);
       genHandler.setHandlerFunction(handler);
       genHandler.setHandlerOptions(options);
       curserv.createContext(path, genHandler)")))

(defmethod (get-handler-options-impl PROPERTY-LIST) ((server HTTP-SERVER-SUN) (xchg HTTP-EXCHANGE))
  (let ((jxchg HTTP-EXCHANGE-SUN xchg))
    (return (handler-options jxchg))))

;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;; BEGIN LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
; Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          ;
;                                                                            ;
; The contents of this file are subject to the Mozilla Public License        ;
; Version 1.1 (the "License"); you may not use this file except in           ;
; compliance with the License. You may obtain a copy of the License at       ;
; http://www.mozilla.org/MPL/                                                ;
;                                                                            ;
; Software distributed under the License is distributed on an "AS IS" basis, ;
; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   ;
; for the specific language governing rights and limitations under the       ;
; License.                                                                   ;
;                                                                            ;
; The Original Code is the STELLA Programming Language.                      ;
;                                                                            ;
; The Initial Developer of the Original Code is                              ;
; UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          ;
; 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               ;
;                                                                            ;
; Portions created by the Initial Developer are Copyright (C) 2003-2010      ;
; the Initial Developer. All Rights Reserved.                                ;
;                                                                            ;
; Contributor(s):                                                            ;
;                                                                            ;
; Alternatively, the contents of this file may be used under the terms of    ;
; either the GNU General Public License Version 2 or later (the "GPL"), or   ;
; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   ;
; in which case the provisions of the GPL or the LGPL are applicable instead ;
; of those above. If you wish to allow use of your version of this file only ;
; under the terms of either the GPL or the LGPL, and not to allow others to  ;
; use your version of this file under the terms of the MPL, indicate your    ;
; decision by deleting the provisions above and replace them with the notice ;
; and other provisions required by the GPL or the LGPL. If you do not delete ;
; the provisions above, a recipient may use your version of this file under  ;
; the terms of any one of the MPL, the GPL or the LGPL.                      ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Version: address-example.ste,v 1.2 2010/02/11 00:16:38 hans Exp

;;; XML Objects for Address webservice example.

(in-package "STELLA")

(in-module "ADDRESS-EXAMPLE")


(DEFNAMESPACE "urn:AddressFetcher" :INVISIBLE-ON-OUTPUT? TRUE)

(DEFCLASS getAddressFromName (XMLObject)
  :PUBLIC-SLOTS
  ((nameElement :type nameToLookup)))

(DEFCLASS return (XMLObject)
  :PUBLIC-SLOTS
  ((streetNum :type streetNum)
   (streetName :type streetName)
   (city :type city)
   (state :type state)
   (zip :type zip)
   (phone :type phoneNumber)
   (/STELLA/XML-OBJECTS/XSI/type :type STRING :initially "ADDRESS-DEMO:address")))

(DEFCLASS getAddressFromNameResponse (XMLObject)
  :PUBLIC-SLOTS
  ((return :type /STELLA/XML-OBJECTS/ADDRESS-DEMO/return)))

(DEFCLASS nameToLookup (XMLObject)
  :PUBLIC-SLOTS
  ((/STELLA/XML-OBJECTS/XSI/type :type STRING)))

(DEFCLASS Address (XMLObject)
  :PUBLIC-SLOTS
  ((streetNum :type StreetNum)
   (streetName :type StreetName)
   (city :type City)
   (state :type State)
   (zip :type Zip)
   (phone :type PhoneNumber)))

(DEFCLASS StreetNum (XMLObject))
(DEFCLASS StreetName (XMLObject))
(DEFCLASS City (XMLObject))
(DEFCLASS State (XMLObject))
(DEFCLASS Zip (XMLObject))

(DEFCLASS PhoneNumber (XMLObject)
  :PUBLIC-SLOTS
  ((areaCode :TYPE AreaCode)
   (exchange :TYPE Exchange)
   (number :TYPE Number)))

(DEFCLASS AreaCode (XMLObject))
(DEFCLASS Exchange (XMLObject))
(DEFCLASS Number (XMLObject))

;; Lower case version... not sure if we need the capitalized verssion
(DEFCLASS streetNum (XMLObject)
  :PUBLIC-SLOTS
  ((/STELLA/XML-OBJECTS/XSI/type :type STRING :initially "XSD:int")))

(DEFCLASS streetName (XMLObject)
  :PUBLIC-SLOTS
  ((/STELLA/XML-OBJECTS/XSI/type :type STRING :initially "XSD:string")))

(DEFCLASS city (XMLObject)
  :PUBLIC-SLOTS
  ((/STELLA/XML-OBJECTS/XSI/type :type STRING :initially "XSD:string")))
  
(DEFCLASS state (XMLObject)
  :PUBLIC-SLOTS
  ((/STELLA/XML-OBJECTS/XSI/type :type STRING :initially "XSD:string")))
  
(DEFCLASS zip (XMLObject)
  :PUBLIC-SLOTS
  ((/STELLA/XML-OBJECTS/XSI/type :type STRING :initially "XSD:int")))

(DEFCLASS phoneNumber (XMLObject)
  :PUBLIC-SLOTS
  ((areaCode :TYPE areaCode)
   (exchange :TYPE exchange)
   (number :TYPE number)
   (/STELLA/XML-OBJECTS/XSI/type :type STRING :initially "ADDRESS-DEMO:phone")))

(DEFCLASS areaCode (XMLObject)
  :PUBLIC-SLOTS
  ((/STELLA/XML-OBJECTS/XSI/type :type STRING :initially "XSD:int")))
  
(DEFCLASS exchange (XMLObject)
  :PUBLIC-SLOTS
  ((/STELLA/XML-OBJECTS/XSI/type :type STRING :initially "XSD:string")))
  
(DEFCLASS number (XMLObject)
  :PUBLIC-SLOTS
  ((/STELLA/XML-OBJECTS/XSI/type :type STRING :initially "XSD:string")))
  

;;; Sample Service (executed on server side)
;;; NOTE: The name of the function is important... it maps directly to 
;;; The root XML tag in the body of the SOAP request.
(DEFUN (getAddressFromName getAddressFromNameResponse) ((name nameToLookup))
  (LET ((theName (textContent name))
	(areaCode (NEW areaCode :|textContent| "789"))
	(exchange (NEW exchange :|textContent| "654"))
	(number (NEW number :|textContent| "3210"))
	(phone (NEW phoneNumber :|areaCode| areaCode :|exchange| exchange :|number| number))
	(streetNum (NEW streetNum :|textContent| "919"))
	(streetName (NEW streetName :|textContent| (CONCATENATE "Street for " theName)))
	(city (NEW city :|textContent| "Sunnytown"))
	(state (NEW state :|textContent| "UT"))
	(zip (NEW zip :|textContent| "43434"))
	(return (NEW return
		     :|streetNum| streetNum
		     :|streetName| streetName
		     :|city| city
		     :|state| state
		     :|zip| zip
		     :|phone| phone))
	(result (NEW getAddressFromNameResponse
		     :|return| return)))
    (RETURN result)))

(DEFUN (MAKE-REQUEST-OBJECT1 getAddressFromName) ()
  ;; Make a simple request object for the Apache webservice or the locally-defined
  ;; webservice.
  (LET ((nameToLookup (NEW nameToLookup :|textContent| "John B. Good"))
			   
	(requestObject (NEW getAddressFromName :|nameElement| nameToLookup)))
    (SETF (/STELLA/XML-OBJECTS/XSI/|type| nameToLookup) "XSD:string")
    (RETURN requestObject)))

;;;;;;
;;;;;; TESTS:
;;;;;; ADDRESS-TEST2 accesses a local service
;;;;;; GET-APACHE-RESPONSE2 accesses a server running in apache soap on a local machine.
;;;;;; The other tests are useful for internal testing.
;;;;;;
;;;;;; To test accessing a stella webservice, run the Java client "getAddress"
;;;;;; that comes with the Apache SOAP distribution.
;;;;;; e.g.,:
;;;;;; 
;;;;;; % set CLASSPATH = /usr/local/java/tomcat/common/lib/activation.jar:/usr/local/java/tomcat/common/lib/jdbc2_0-stdext.jar:/usr/local/java/tomcat/common/lib/jndi.jar:/usr/local/java/tomcat/common/lib/jta-spec1_0_1.jar:/usr/local/java/tomcat/common/lib/mail.jar:/usr/local/java/tomcat/common/lib/naming-common.jar:/usr/local/java/tomcat/common/lib/naming-resources.jar:/usr/local/java/tomcat/common/lib/servlet.jar:/usr/local/java/tomcat/common/lib/soap.jar:/usr/local/java/tomcat/common/lib/tyrex-0.9.7.0.jar:/usr/local/java/tomcat/common/lib/tyrex.license:/usr/local/java/tomcat/common/lib/xerces.jar:/nfs/topaz/melz/soap-2_3_1
;;;;;;
;;;;;; Test connectivity to Apache SOAP...
;;;;;; % java -cp $CLASSPATH samples.addressbook.GetAddress http://localhost:8080/soap/servlet/rpcrouter "John B. Good"
;;;;;; Test connectivity to Stella SOAP...
;;;;;; % java -cp $CLASSPATH samples.addressbook.GetAddress http://localhost:8012/powerloom/soap-rpc "John B. Good"


(DEFUN ADDRESS-TEST1 ()
  ;; Simulate a webservices roundtrip by creating an rpc call, 
  ;; sending it to a "service", and unpacking the results.
  (LET ((result (NEW STRING-OUTPUT-STREAM)))
    (SOAP/PROCESS-SOAP-RPC-REQUEST *ADDRESS-REQUEST* FALSE result)
    (PRINT "Retrieved envelope is: " EOL (TO-XML-STRING (SOAP/FROM-XML-STRING (THE-STRING result))))))

;;; To exeucte this, first make sure you have a server running at the proper host and port
;;; i.e., execute (start-server 8012) on your local machine.
(DEFUN ADDRESS-TEST2 ()
  ;; Simulate a webservices roundtrip by creating an rpc call, 
  ;; sending it to an http service runing at localhost:8012, and unpacking the results.
  (LET ((resultString (HTTP/DO-HTTP-REQUEST 
		       "http://localhost:8012/ploom/soap-rpc" 
		       :method :post
		       :content *ADDRESS-REQUEST*)))
    (PRINT "Retrieved envelope is: " EOL resultString)))
    
(DEFUN GET-APACHE-RESPONSE1 ()
  ;; Send already-stringified soap envelope to a real webservice.
  (LET ((url "http://localhost:8080/soap/servlet/rpcrouter")
	;;; Use this for viewing http headers
;;;	(url "http://localhost:8080/snoop/hello")
	(headers (NEW PROPERTY-LIST))
	(response STRING NULL)
	(responseEnvelope /STELLA/XML-OBJECTS/SOAP-ENV/Envelope NULL)
	(address Address NULL)
	(addressString STRING NULL))
    (INSERT-AT headers "content-type" "text/xml; charset=utf-8")
    (SETQ response
      (HTTP/DO-HTTP-REQUEST 
       url :METHOD :POST
       :HEADERS headers
       :CONTENT *ADDRESS-REQUEST*))
    (PRINT "Response: " EOL response EOL)
    (SETQ responseEnvelope (FROM-XML-STRING response))
    (SETQ address (/STELLA/XML-OBJECTS/SOAP-ENV/GET-BODY-CONTENTS responseEnvelope))
    (SPECIAL ((/STELLA/XML-OBJECTS/*SUPRESS-NAMESPACES?* TRUE))
      (SETQ addressString (TO-XML-STRING address))
      (PRINT "Retrieved Address is: " EOL addressString))))

(DEFUN GET-APACHE-RESPONSE2 ()
  ;; Call Apache webservice using the proper API.
  (LET ((url "http://tubular.isi.edu:8080/soap/servlet/rpcrouter")
;	(url "http://localhost:8080/soap/servlet/rpcrouter")
	(requestObject (MAKE-REQUEST-OBJECT1))
	(responseObject(SOAP/CALL-WEBSERVICE requestObject url)))
    (SPECIAL ((/STELLA/XML-OBJECTS/*SUPRESS-NAMESPACES?* TRUE))
      (PRINT "Retrieved Response object is: " EOL (TO-XML-STRING responseObject) EOL EOL)
      (TYPECASE responseObject
	(getAddressFromNameResponse
	 (LET ((streetName (|textContent| (|streetName| (|return| responseObject)))))
	   (PRINT "Retrieved Street Name is: " streetName EOL)))
	(/STELLA/XML-OBJECTS/SOAP-ENV/|Fault|
				      (LET ((code (|textContent| (/STELLA/XML-OBJECTS/SOAP-ENV/|faultcode| responseObject)))
					    (string (|textContent| (/STELLA/XML-OBJECTS/SOAP-ENV/|faultstring| responseObject)))
					    (actor (|textContent| (/STELLA/XML-OBJECTS/SOAP-ENV/|faultactor| responseObject))))
					(PRINT "Received SOAP Fault:" EOL)
					(PRINT " CODE   : " code EOL)
					(PRINT " STRING : " string EOL)
					(PRINT " ACTOR  : " actor EOL)))))))

(DEFGLOBAL *ADDRESS-REQUEST* STRING "<?xml version='1.0' encoding='UTF-8'?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">
<SOAP-ENV:Body>
<ns1:getAddressFromName xmlns:ns1=\"urn:AddressFetcher\" SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\">
<ns1:nameToLookup xsi:type=\"xsd:string\">John B. Good</ns1:nameToLookup>
</ns1:getAddressFromName>
</SOAP-ENV:Body>
</SOAP-ENV:Envelope>
")

;; To execute the tests:
;; - make sure a server is running at localhost:8012
;; - (eval (ADDRESS-EXAMPLE/ADDRESS-TEST1))
;; - (eval (ADDRESS-EXAMPLE/ADDRESS-TEST2))

#|
STELLA(6): (eval (http/start-http-server 8012))
()
STELLA(7): (eval (ADDRESS-EXAMPLE/ADDRESS-TEST1))
Retrieved envelope is: 
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
  <SOAP-ENV:Body>
    <ADDRESS-EXAMPLE:getAddressFromNameResponse xmlns:ADDRESS-EXAMPLE="urn:AddressFetcher">
      <ADDRESS-EXAMPLE:return xmlns:XSI="http://www.w3.org/2001/XMLSchema-instance" xmlns:ADDRESS-DEMO="urn:xml-soap-address-demo" XSI:type="ADDRESS-DEMO:address">
        <ADDRESS-EXAMPLE:streetNum xmlns:XSD="http://www.w3.org/2001/XMLSchema" XSI:type="XSD:int">919</ADDRESS-EXAMPLE:streetNum>
        <ADDRESS-EXAMPLE:streetName xmlns:XSD="http://www.w3.org/2001/XMLSchema" XSI:type="XSD:string">Street for John B. Good</ADDRESS-EXAMPLE:streetName>
        <ADDRESS-EXAMPLE:city xmlns:XSD="http://www.w3.org/2001/XMLSchema" XSI:type="XSD:string">Sunnytown</ADDRESS-EXAMPLE:city>
        <ADDRESS-EXAMPLE:state xmlns:XSD="http://www.w3.org/2001/XMLSchema" XSI:type="XSD:string">UT</ADDRESS-EXAMPLE:state>
        <ADDRESS-EXAMPLE:zip xmlns:XSD="http://www.w3.org/2001/XMLSchema" XSI:type="XSD:int">43434</ADDRESS-EXAMPLE:zip>
        <ADDRESS-EXAMPLE:phoneNumber XSI:type="ADDRESS-DEMO:phone">
          <ADDRESS-EXAMPLE:areaCode xmlns:XSD="http://www.w3.org/2001/XMLSchema" XSI:type="XSD:int">789</ADDRESS-EXAMPLE:areaCode>
          <ADDRESS-EXAMPLE:exchange xmlns:XSD="http://www.w3.org/2001/XMLSchema" XSI:type="XSD:string">654</ADDRESS-EXAMPLE:exchange>
          <ADDRESS-EXAMPLE:number xmlns:XSD="http://www.w3.org/2001/XMLSchema" XSI:type="XSD:string">3210</ADDRESS-EXAMPLE:number>
        </ADDRESS-EXAMPLE:phoneNumber>
      </ADDRESS-EXAMPLE:return>
    </ADDRESS-EXAMPLE:getAddressFromNameResponse>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
()
STELLA(8): (eval (ADDRESS-EXAMPLE/ADDRESS-TEST2))
aserve-accept-6: 02/06/10 - 11:38:03 - Maximum socket file descriptor number is now 12
127.0.0.1 - - [Sat, 06 Feb 2010 19:38:03 GMT] "POST /ploom/soap-rpc HTTP/1.0" 200 1355
Retrieved envelope is: 
<SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
  <SOAP-ENV:Body>
    <getAddressFromNameResponse xmlns:ADDRESS-EXAMPLE="urn:AddressFetcher">
      <return xmlns:XSI="http://www.w3.org/2001/XMLSchema-instance" xmlns:ADDRESS-DEMO="urn:xml-soap-address-demo" XSI:type="ADDRESS-DEMO:address">
        <streetNum xmlns:XSD="http://www.w3.org/2001/XMLSchema" XSI:type="XSD:int">919</streetNum>
        <streetName xmlns:XSD="http://www.w3.org/2001/XMLSchema" XSI:type="XSD:string">Street for John B. Good</streetName>
        <city xmlns:XSD="http://www.w3.org/2001/XMLSchema" XSI:type="XSD:string">Sunnytown</city>
        <state xmlns:XSD="http://www.w3.org/2001/XMLSchema" XSI:type="XSD:string">UT</state>
        <zip xmlns:XSD="http://www.w3.org/2001/XMLSchema" XSI:type="XSD:int">43434</zip>
        <phoneNumber XSI:type="ADDRESS-DEMO:phone">
          <areaCode xmlns:XSD="http://www.w3.org/2001/XMLSchema" XSI:type="XSD:int">789</areaCode>
          <exchange xmlns:XSD="http://www.w3.org/2001/XMLSchema" XSI:type="XSD:string">654</exchange>
          <number xmlns:XSD="http://www.w3.org/2001/XMLSchema" XSI:type="XSD:string">3210</number>
        </phoneNumber>
      </return>
    </getAddressFromNameResponse>
  </SOAP-ENV:Body>
</SOAP-ENV:Envelope>
()
STELLA(9): 
|#

;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;; BEGIN LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
; Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          ;
;                                                                            ;
; The contents of this file are subject to the Mozilla Public License        ;
; Version 1.1 (the "License"); you may not use this file except in           ;
; compliance with the License. You may obtain a copy of the License at       ;
; http://www.mozilla.org/MPL/                                                ;
;                                                                            ;
; Software distributed under the License is distributed on an "AS IS" basis, ;
; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   ;
; for the specific language governing rights and limitations under the       ;
; License.                                                                   ;
;                                                                            ;
; The Original Code is the STELLA Programming Language.                      ;
;                                                                            ;
; The Initial Developer of the Original Code is                              ;
; UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          ;
; 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               ;
;                                                                            ;
; Portions created by the Initial Developer are Copyright (C) 2003-2010      ;
; the Initial Developer. All Rights Reserved.                                ;
;                                                                            ;
; Contributor(s):                                                            ;
;                                                                            ;
; Alternatively, the contents of this file may be used under the terms of    ;
; either the GNU General Public License Version 2 or later (the "GPL"), or   ;
; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   ;
; in which case the provisions of the GPL or the LGPL are applicable instead ;
; of those above. If you wish to allow use of your version of this file only ;
; under the terms of either the GPL or the LGPL, and not to allow others to  ;
; use your version of this file under the terms of the MPL, indicate your    ;
; decision by deleting the provisions above and replace them with the notice ;
; and other provisions required by the GPL or the LGPL. If you do not delete ;
; the provisions above, a recipient may use your version of this file under  ;
; the terms of any one of the MPL, the GPL or the LGPL.                      ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Version: fetch-demo.ste,v 1.2 2010/02/11 00:17:42 hans Exp

;;; Tests for accessing Fetch webservices.

(in-package "STELLA")

(in-module "FETCH")


(DEFNAMESPACE "http://pegasus2.isi.edu:8080/axis/services/AgentRunnerService/")

(DEFCLASS runAgentAndWaitForResponse (XMLObject)
  :PUBLIC-SLOTS 
  ((arg0 :TYPE /STELLA/XML-OBJECTS/FETCH-CONTENT/|arg0|)
   (arg1 :TYPE /STELLA/XML-OBJECTS/FETCH-CONTENT/|arg1|)
   (arg2 :TYPE /STELLA/XML-OBJECTS/FETCH-CONTENT/|arg2|)))

(DEFCLASS runAgentAndWaitForResponseResponse (XMLObject)
  :PUBLIC-SLOTS
  ((return :TYPE runAgentAndWaitForResponseReturn)))

(DEFCLASS runAgentAndWaitForResponseReturn (XMLObject)
  :PUBLIC-SLOTS
  ((/STELLA/XML-OBJECTS/XSI/type :type STRING)))

;; This is the sample request taken from Kristina's document
(DEFGLOBAL *FETCH-REQUEST1* STRING
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">
 <soapenv:Body>
  <ns1:runAgentAndWaitForResponse soapenv:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:ns1=\"http://pegasus2.isi.edu:8080/axis/services/AgentRunnerService/\">
   <arg0 xsi:type=\"xsd:string\">eeld/gettygeonames/plans/production</arg0>     
   <arg1 href=\"#id0\"/>
   <arg2 href=\"#id1\"/>
  </ns1:runAgentAndWaitForResponse>
  <multiRef id=\"id0\" soapenc:root=\"0\" soapenv:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" xsi:type=\"ns2:Map\" xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:ns2=\"http://xml.apache.org/xml-soap\">
   <item>
    <key xsi:type=\"xsd:string\">keywords</key>		
    <value xsi:type=\"xsd:string\">Marina Del Rey</value>
   </item>
  </multiRef>
  <multiRef id=\"id1\" soapenc:root=\"0\" soapenv:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" xsi:type=\"ns3:Map\" xmlns:ns3=\"http://xml.apache.org/xml-soap\" xmlns:soapenc=\"http://schemas.xmlsoap.org/soap/encoding/\"/>
 </soapenv:Body>
</soapenv:Envelope>")

;; This one elimnates the multirefs
(DEFGLOBAL *FETCH-REQUEST2* STRING
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>
<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">
 <soapenv:Body>
  <ns1:runAgentAndWaitForResponse soapenv:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\" xmlns:ns1=\"http://pegasus2.isi.edu:8080/axis/services/AgentRunnerService/\">
   <arg0 xsi:type=\"xsd:string\">eeld/gettygeonames/plans/production</arg0>     
   <arg1>
     <item>
       <key xsi:type=\"xsd:string\">keywords</key>		
       <value xsi:type=\"xsd:string\">Marina Del Rey</value>
     </item>
   </arg1>
   <arg2/>
  </ns1:runAgentAndWaitForResponse>
 </soapenv:Body>
</soapenv:Envelope>")


(DEFUN GET-FETCH-RESPONSE1 ()
  ;; Send already-stringified soap envelope to a real webservice.
  (LET ((url "http://pegasus2.isi.edu:8080/axis/services/AgentRunnerService")
	;;; Use this for viewing http headers
	(headers (NEW PROPERTY-LIST))
	(response STRING NULL))
    (INSERT-AT headers "content-type" "text/xml; charset=utf-8")
    (INSERT-AT headers "SoapAction" "")
    (SETQ response
      (HTTP/DO-HTTP-REQUEST 
       url :METHOD :POST
       :HEADERS headers
       :CONTENT *FETCH-REQUEST2*
       ))
    (PRINT "Response: " EOL response EOL)))

(DEFUN GET-FETCH-RESPONSE2 ()
  ;; Send already-stringified soap envelope to a real webservice.
  (LET ((url "http://pegasus2.isi.edu:8080/axis/services/AgentRunnerService")
	;;; Use this for viewing http headers
	(headers (NEW PROPERTY-LIST))
	(response STRING NULL)
	(request (MAKE-FETCH-REQUEST1)))
    (INSERT-AT headers "content-type" "text/xml; charset=utf-8")
    (INSERT-AT headers "SoapAction" "")
    (SETQ response
      (HTTP/DO-HTTP-REQUEST 
       url :METHOD :POST
       :HEADERS headers
       :CONTENT request
       ))
    (PRINT "Response: " EOL response EOL)))

(DEFUN GET-FETCH-RESPONSE3 ()
  ;; Call Apache webservice using the proper API.
  (LET ((url "http://pegasus2.isi.edu:8080/axis/services/AgentRunnerService")
	(requestObject (MAKE-FETCH-REQUEST-OBJECT1))
	(responseObject (SOAP/CALL-WEBSERVICE requestObject url)))
    (SPECIAL ((/STELLA/XML-OBJECTS/*SUPRESS-NAMESPACES?* TRUE))
      (PRINT "Retrieved Result is: " EOL (TO-XML-STRING responseObject) EOL))))

(DEFUN (MAKE-FETCH-REQUEST1 STRING) ()
  (SPECIAL ((/STELLA/XML-OBJECTS/*SUPRESS-NAMESPACES?* TRUE))
    (RETURN (TO-XML-STRING (MAKE-FETCH-REQUEST-OBJECT1)))))

(DEFUN (MAKE-FETCH-REQUEST-OBJECT1 XMLObject) ()
  (LET ((key (NEW FETCH-CONTENT/key :|textContent| "keywords"))
	(value (NEW FETCH-CONTENT/value :|textContent| "Marina Del Rey"))
	(item (NEW FETCH-CONTENT/item :|key| key :|val| value))
	(arg0 (NEW FETCH-CONTENT/|arg0| :|textContent| "eeld/gettygeonames/plans/production"))
	(arg1 (NEW FETCH-CONTENT/arg1 :|item| item))
	(arg2 (NEW FETCH-CONTENT/arg2))
	(runAgentAndWaitForResponse (NEW runAgentAndWaitForResponse 
					 :|arg0| arg0
					 :|arg1| arg1
					 :|arg2| arg2)))
    (RETURN runAgentAndWaitForResponse)))

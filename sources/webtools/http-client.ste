;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;; BEGIN LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
; Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          ;
;                                                                            ;
; The contents of this file are subject to the Mozilla Public License        ;
; Version 1.1 (the "License"); you may not use this file except in           ;
; compliance with the License. You may obtain a copy of the License at       ;
; http://www.mozilla.org/MPL/                                                ;
;                                                                            ;
; Software distributed under the License is distributed on an "AS IS" basis, ;
; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   ;
; for the specific language governing rights and limitations under the       ;
; License.                                                                   ;
;                                                                            ;
; The Original Code is the STELLA Programming Language.                      ;
;                                                                            ;
; The Initial Developer of the Original Code is                              ;
; UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          ;
; 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               ;
;                                                                            ;
; Portions created by the Initial Developer are Copyright (C) 2004-2010      ;
; the Initial Developer. All Rights Reserved.                                ;
;                                                                            ;
; Contributor(s):                                                            ;
;                                                                            ;
; Alternatively, the contents of this file may be used under the terms of    ;
; either the GNU General Public License Version 2 or later (the "GPL"), or   ;
; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   ;
; in which case the provisions of the GPL or the LGPL are applicable instead ;
; of those above. If you wish to allow use of your version of this file only ;
; under the terms of either the GPL or the LGPL, and not to allow others to  ;
; use your version of this file under the terms of the MPL, indicate your    ;
; decision by deleting the provisions above and replace them with the notice ;
; and other provisions required by the GPL or the LGPL. If you do not delete ;
; the provisions above, a recipient may use your version of this file under  ;
; the terms of any one of the MPL, the GPL or the LGPL.                      ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Version: http-client.ste,v 1.7 2010/02/10 23:34:37 hans Exp

(in-package "STELLA")

(in-module "HTTP")


  ;;
;;;;;; URL manipulation
  ;;

;;; Conceivably, we could implement a URL class to represent a parsed URL

(defun (decompose-internet-url STRING STRING STRING STRING STRING STRING STRING) ((url STRING))
  :documentation "Takes an internet style URL and returns the components of
that URL as specified below.  Missing elements return the empty string \"\".
  PROTOCOL USERNAME:PASSWORD DOMAIN PORT PATH QUERY FRAGMENT

  o Protocol.  The access protocol.

       Those schemes which refer to internet protocols mostly have a
       common syntax for the rest of the object name. This starts with a
       double slash '//' to indicate its presence, and continues until
       the following slash '/':

  o An optional user name, if required (as it is with a few FTP servers).
    The password, if present, follows the user name, separated from it by a colon;
    the user name and optional password are followed by a commercial at sign '@'. 
  o The internet domain name of the host
  o The port number, if it is not the default number for the protocol,
    is given in decimal notation after a colon.
  o Path The path is a hierarchical representation of a particular path. It may 
    define details of how the client should communicate with the server, including
    information to be passed transparently to the server without any processing by
    the client.
    The path is interpreted in a manner dependent on the scheme being used.
    Generally, the reserved slash '/' character (ASCII 2F hex) denotes a level in a
    hierarchical structure, the higher level part to the left of the slash.
  o Query is the part of the hierarchical information following a '?' character.
  o Fragment is the part of the hierarchical information following a '#' character.

References:  http://www.gbiv.com/protocols/uri/rfc/rfc3986.html"
  :public? TRUE
  (let ((field-start 0)
        (field-end (string-search url #\: 0))
        (protocol STRING "")
        (user-information STRING "")
        (domain-name STRING "")
        (port-number STRING "")
        (path STRING "")
        (query STRING "")
        (fragment STRING ""))
    (when (defined? field-end)
      (setq protocol (subsequence url 0 field-end))
      (if (= field-end (string-search url "://" field-end))
        (++ field-end 3)                          ; Skip over ://  SHOULD CHECK for //!
        (++ field-end 1))
      (setq field-start field-end)
      (setq field-end (position url #\/ field-start))
      (setq domain-name (subsequence url field-start field-end))
      (setq field-start field-end))

    (setq field-end (position url #\? field-start))
    (if (defined? field-end)
      (progn 
        (setq path (subsequence url field-start field-end))
        (setq field-start (+ field-end 1))
        (setq field-end (position url #\# field-start))
        (if (defined? field-end)
          (progn 
            (setq query (subsequence url field-start field-end))
            (setq field-start (+ field-end 1))
            (setq fragment (subsequence url field-start NULL)))
          (setq query (subsequence url field-start NULL))))
      (progn
        (setq field-end (position url #\# field-start))
        (if (defined? field-end)
          (progn 
            (setq path (subsequence url field-start field-end))
            (setq field-start (+ field-end 1))
            (setq fragment (subsequence url field-start NULL)))
          (setq path (subsequence url field-start NULL)))))

    ;; Check for optional user information:
    (setq field-end (position domain-name #\@ 0))
    (when (defined? field-end)
      (setq user-information (subsequence domain-name 0 field-end))
      (setq domain-name (subsequence domain-name (+ field-end 1) NULL)))

    ;; Check for optional port information:
    (setq field-start (position domain-name #\: 0))
    (when (defined? field-start)
      (setq port-number (subsequence domain-name (+ field-start 1) NULL))
      (setq domain-name (subsequence domain-name 0 field-start)))

    (return protocol user-information domain-name port-number path query fragment)))

(defun (compose-internet-url STRING) ((protocol STRING) (userInfo STRING) (host STRING) (port INTEGER)
                                      (path STRING) (query STRING) (fragment STRING))
  :documentation "The inverse to `decompose-internet-url'.  Builds a URL string from the supplied
components.  Undefined portions can be supplied as NULL or the empty string."
  :public? TRUE
  (let ((url (new STRING-OUTPUT-STREAM)))
    (unless (blank-string? protocol)
      (print-stream url protocol "://"))
    (unless (blank-string? userInfo)
      (print-stream url userInfo "@"))
    (unless (blank-string? host)
      (print-stream url host))
    (when (defined? port)
      (print-stream url ":" port))
    (unless (blank-string? path)
      (if (starts-with? path "/" 0)
          (print-stream url path)
        (print-stream url "/" path)))
    (unless (blank-string? query)
      (print-stream url "?" query))
    (unless (blank-string? fragment)
      (print-stream url "#" fragment))
    (return (the-string url))))

(defun (url-path-to-filename STRING) ((path STRING))
  :documentation "Transform a URL `path' into a valid native filename for the local OS."
  :public? TRUE
  (let ((separator (directory-separator)))
    (if (eql? separator #\/)
      (return (unescape-url-string path))
      (progn 
        (setq path (unescape-url-string (substitute path separator #\/)))
        (when (and (eql? (operating-system) :MAC)
                   (eql? (nth path 0) separator))
          (setq path (subsequence path 1 NULL)))
        (return path)))))


  ;;
;;;;;; HTTP Requests
  ;;

;;; Simple STELLA implementation of HTTP requests.  This only supports HTTP 1.0
;;; and requires a bit of care to handle binary content but should do the trick
;;; for what we need it for.  Otherwise, we have to resort again to native
;;; implementations as we've done in the past with `HttpJava.java' and
;;; `http-lisp.lisp' which only supported Allegro CL.

(deftype HTTP-HEADERS (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER))

(defclass HTTP-EXCEPTION (READ-EXCEPTION)
  :public-slots ((error-code :type INTEGER)))

(defconstant HTTP-DEFAULT-PORT INTEGER 80)

(defun (handle-http-header-first-line STRING INTEGER STRING) ((line STRING) (fields HTTP-HEADERS))
  :documentation "Handles the first line of an http header.  
Returns version, response code, response message.  The first
line is inserted into `fields' fields with the empty string key \"\"
This is a low-level utility routine that can be used to build custom
message parsing code."
  :public? TRUE
  (let ((space1 (position line #\Space 0))
	(space2 (choose (null? space1) 
			NULL-INTEGER
			(position line #\Space (+ space1 1)))))
    (when (null? space2)
      (error "Malformed header line: " line))
    (insert-at fields "" line)
    (return (subsequence line 0 space1)
	    (string-to-integer (subsequence line (+ space1 1) space2))
	    (subsequence line (+ space2 1) NULL)) ))

(defun handle-http-header-other-line ((line STRING) (fields HTTP-HEADERS))
  :documentation "Handles header lines other than the first one.
Each such line is inserted into `fields' as keyword value pairs.
This is a low-level utility routine that can be used to build custom
message parsing code."
  :public? TRUE
  ;; Handles the other lines.  Inserts header into fields.
  (let ((colon-position (position line #\: 0)))
    (if (null? colon-position)
      (error "Bad header seen: " line)
      (insert-at fields
		 (subsequence line 0 colon-position)
		 (subsequence line (+ colon-position 2) NULL)))))


;;; Reading HTTP Headers (new version)

;;; NOTE (hc): the performance problem described below has been fixed
;;; with the fix to `open-network-stream' (using a :block buffering
;;; scheme).  But even without that, a CPU time of 0.24sec for
;;; fetching a small Web page is way out of line, it should take less
;;; than 1ms - of course, there will be an elapsed-time delay from the
;;; server.  If this is still a problem in MCL (in Allegro the CPU
;;; time is 0.0), we need to investigate.  Finally, using the STELLA
;;; read-line caused problems with binary files, so we wrote yet
;;; another version of read-line that avoids the use of the tokenizer.
;;;
;;; (tar) The new version does not perform quite as well as the older version.
;;; The problem is that the new read-line code uses tokenizer buffers,
;;; and thus permanently associate a tokenizer buffer with the input
;;; stream.  This in turn makes READ-SEQUENCE (used, for example in getting
;;; an HTTP page into a string) run about half as fast and greatly increase
;;; the consing for subsequent processing.
;;;
;;; On MCL retrieving the Loom home page from www.isi.edu, the difference is
;;;     New:  0.239s  and 172,336 bytes
;;;     Old:  0.079s  and  53,304 bytes

(defun (read-http-header-line STRING) ((stream INPUT-STREAM))
  ;; `read-line' variant that reads CR/LF-terminated HTTP header lines.
  ;; We don't use the STELLA `read-line', since it will use tokenization
  ;; which will prevent us from handling binary content correctly.
  ;; Instead, we use `native-read-line' for speed and add a little extra
  ;; logic to compensate for the unhandled terminator characters.
  (let ((line (native-read-line stream))
        (length (length line))
        (nextChar CHARACTER NULL))
    (when (null? line)
      ;; EOF, shouldn't really happen:
      (return NULL))
    (when (and (> length 0)
               (eql? (nth line (1- length)) #\Return))
      ;; Unix, we read to the linefeed but ignored the return, trim it off:
      (return (subsequence line 0 (1- length))))
    ;; see what the next character is:
    (setq nextChar (read-character stream))
    (cond ((eql? nextChar #\Linefeed)
           ;; Mac: we read to the return but didn't consume the linefeed, skip it:
           NULL)
          (otherwise
           ;; Windows: we read the full line, unread the test character:
           (unread-character nextChar stream)))
    (return line)))

(defun (read-http-header INTEGER STRING STRING) ((stream INPUT-STREAM) (fields HTTP-HEADERS))
  :documentation "Reads the HTTP header from `stream', parses the header fields
and stores the results in `fields'.  The first line of the response will be
stored in `fields' with the empty string \"\" as the key.  Other values will
have the header name as the key.  The first return value is the response code
of the HTTP request.  A response of 200 indicates success.  Other common
responses are 404 (page not found).  The second return value is the message
associated with the code.  The third return value is the version information.
If the stream ends before a valid header is read, then `null' is returned for
all values."
  :public? TRUE
  (mv-bind (version-string response-code response-message)
      (handle-http-header-first-line (read-http-header-line stream) fields)
    (let ((line STRING NULL))
      (loop
        (setq line (read-http-header-line stream))
        (cond ((eql? line "")
               (break))                  ; End of header
              ((null? line)
               (break))                  ; EOF
              (otherwise
               (handle-http-header-other-line line fields))))
      (return response-code response-message version-string))))

(defun (get-content-and-length OBJECT LONG-INTEGER) ((content OBJECT))
  ;; Helper function primarily to determine the length of file streams
  ;; (e.g., if we want to post a binary file).  If the length of a stream
  ;; cannot be determined, we convert it to a string first which will
  ;; CAUSE PROBLEMS if the stream contained binary data!!
  (typecase content
    (STRING-WRAPPER
     (return content (length (unwrap-string content))))
    (FILE-INPUT-STREAM
     (return content (file-length (filename content))))
    (INPUT-STREAM
     (let ((contentString (stream-to-string content)))
       (return contentString (length contentString))))))

(defun write-http-request ((stream OUTPUT-STREAM)
                           (method KEYWORD)
                           (host STRING)
                           (url-path STRING)
                           (headers HTTP-HEADERS)
                           (content OBJECT))
  :documentation "Send `content' as an HTTP 1.0 request on `stream' using `method'.
The request is sent to `url-path' at `host'.  The `stream' must be a TCP-stream
that is connected to `host' at the appropriate port.  `content' can be a string or
an input stream to read from."
  :public? TRUE
  (let ((contentLength LONG-INTEGER 0))
    (print-stream stream (symbol-name method) " " url-path " HTTP/1.0" #\Return #\Linefeed)
    (when (defined? host)
      (when (null? headers) (setq headers (new HTTP-HEADERS)))
      (insert-at headers "Host" host))
    (when (defined? content)
      (mv-setq (content contentLength)
        (get-content-and-length content))
      (when (null? headers) (setq headers (new HTTP-HEADERS)))
      (insert-at headers "Content-Length" (integer-to-string contentLength)))
    (when (defined? headers)
      (foreach (key value) in headers
          do (print-stream stream (unwrap-string key) ": " (unwrap-string value)
                           #\Return #\Linefeed)))
    ;; enforce a non-persistent connection, otherwise we'd have to use the
    ;; content-length of a reply when reading from a response stream:
    (print-stream stream "Connection: close" #\Return #\Linefeed)
    (print-stream stream #\Return #\Linefeed)
    (when (defined? content)
      (typecase content
        (STRING-WRAPPER
         (print-stream stream (unwrap-string content)))
        (INPUT-STREAM
         (copy-stream-to-stream content stream))))
    (flush-output stream)))

(defun (http-post-data INPUT-STREAM) ((host STRING)
                                      (port INTEGER)
                                      (url-path STRING)
                                      (headers HTTP-HEADERS)
                                      (content OBJECT))
  :documentation "Posts `content' as data to `url-path' on `host' and `port'.
`content' can be a string or an input stream to read from.  The port value for
standard http servers is 80.  Returns the body of the reply message as a stream,
if successful.  Otherwise an HTTP-EXCEPTION is signaled."
  :public? TRUE
  (let ((return-headers (new HTTP-HEADERS)))
    (special ((*printreadably?* FALSE))
      (mv-bind (in out)
          (open-network-stream host port)
	 ;; Send request
	 (write-http-request out :POST host url-path headers content)
	 ;; Read and parse reply
	 (mv-bind (return-Code return-Message version)
             (read-http-header in return-headers)
           (ignore version)
           (cond ((http-success-response-code? return-Code)
                  ;(close-stream out) ;; can't do that, in Lisp we could have the same native stream
                  (return in))
                 (otherwise
                  (let ((ex (new HTTP-EXCEPTION
                                 :message return-message
                                 :error-code return-code)))
                    ;; print unconditionally for now for debugging:
                    (print "http-post-data: code=" return-code ", message=" return-message ", version=" version)
                    (close-stream in)
                    (close-stream out)
                    (signal-exception ex)))))))))

(defun (http-post-data-to-string STRING) ((host STRING)
                                          (port INTEGER)
                                          (url-path STRING)
                                          (headers HTTP-HEADERS)
                                          (content OBJECT))
  :documentation "Just like `http-post-data' (which see) but returns the reply as a string.
CAUTION: String conversion will not do the right thing for binary data in Java."
  :public? TRUE
  (let ((stream (http-post-data host port url-path headers content))
        (data (stream-to-string stream)))
    (close-stream stream)
    (return data)))

(defun (http-get-data INPUT-STREAM) ((host STRING)
                                     (port INTEGER)
                                     (url-path STRING)
                                     (return-headers HTTP-HEADERS))
  :documentation "Accesses the data described by `url-path' on `host' and `port'.
The port value for standard http servers is 80.  If successful, returns the body
of the web message as a stream.  The headers from the reply message will be set
in `return-headers' if not null'.  If an error occurs an HTTP-EXCEPTION is signaled."
  :public? TRUE
  (when (null? return-headers) (setq return-headers (new HTTP-HEADERS)))
  (special ((*printreadably?* FALSE))
    (mv-bind (in out)
        (open-network-stream host port)
      ;; Send request:
      (write-http-request out :GET host url-path NULL NULL)
      ;; Read and parse reply:
      (mv-bind (return-Code return-Message version)
          (read-http-header in return-headers)
        (ignore version)
        (cond ((http-success-response-code? return-Code)
               ;(close-stream out) ;; can't do that, in Lisp we could have the same native stream
               (return in))
              (otherwise
               (let ((ex (new HTTP-EXCEPTION
                              :message return-message
                              :error-code return-code)))
                 ;; print unconditionally for now for debugging:
                 (print "http-get-data: code=" return-code ", message=" return-message ", version=" version)
                 (close-stream in)
                 (close-stream out)
                 (signal-exception ex))))))))

(defun (http-get-data-to-string STRING) ((host STRING)
                                         (port INTEGER)
                                         (url-path STRING)
                                         (return-headers HTTP-HEADERS))
  :documentation "Just like `http-get-data' (which see) but returns the result as a string.
CAUTION: String conversion will not do the right thing for binary data in Java."
  :public? TRUE
  (let ((stream (http-get-data host port url-path return-headers))
        (data (stream-to-string stream)))
    (close-stream stream)
    (return data)))


  ;;
;;;;;; Convenience functions
  ;;

(defun (open-url-stream INPUT-STREAM) ((url STRING))
  :documentation "Opens an input stream to `url'.
Currently only http: with no user name or password and file: urls on the local
host with absolute pathnames are supported."
  :public? TRUE
  (mv-bind (protocol user-info host port path query fragment)
      (decompose-internet-url url)
    (case (string-downcase protocol)
      ("http"
       (cond ((non-empty? user-info)
              (signal BAD-ARGUMENT-EXCEPTION
                      "open-url-stream: only URLs without user information are supported: " url))
             (otherwise
              (let ((thePort HTTP-DEFAULT-PORT)
                    (thePath (compose-internet-url "" "" "" NULL path query fragment)))
                (unless (blank-string? port)
                  (setq thePort (string-to-integer port)))
                (return (http-get-data host thePort thePath NULL))))))
      ("file"
       (cond ((non-empty? user-info)
              (signal BAD-ARGUMENT-EXCEPTION
                      "open-url-stream: only URLs without user information are supported: " url))
             ((or (blank-string? host)
                  (string-eql? host "localhost"))
              (return (new FILE-INPUT-STREAM :filename (url-path-to-filename path))))
             (otherwise
              (signal BAD-ARGUMENT-EXCEPTION
                      "open-url-stream: only absolute file URLs on the local host are supported: " url))))
      (otherwise
       (signal BAD-ARGUMENT-EXCEPTION
               "open-url-stream: only http and file URLs are supported: " url)))))

(defmacro with-input-url ((binding CONS) &body (body CONS))
  :documentation "Sets up an unwind-protected form which opens a URL for
input and closes it afterwards.  The stream for reading is bound to the
variable provided in the macro form.
Syntax is `(WITH-INPUT-URL (var url) body+)'."
  :public? TRUE
  (let ((var SYMBOL (first binding)))
    (return
      (bquote 
       (let ((& var INPUT-STREAM NULL))
	 (unwind-protect
	     (progn 
	       (setq & var (open-url-stream & (second binding)))
	       && body)
	   (when (defined? & var)
	     (close-stream & var))))))))

(defun download-url ((url STRING) (file STRING))
  :documentation "Download the data at `url' and save it to `file'."
  :public? TRUE :command? TRUE
  (with-output-file (out file)
    (copy-stream-to-stream (open-url-stream url) out)))

(defun (download-url-to-string STRING) ((url STRING))
  :documentation "Download the data at `url' and return it as a string.
CAUTION: String conversion will not do the right thing for binary data in Java."
  :public? TRUE :command? TRUE
  (return (stream-to-string (open-url-stream url))))


;;; This one used to be implemented via native methods in the webservices system
;;; (defined in HttpJava.java and http-lisp.lisp):

(defun (do-http-request STRING) ((uri STRING) &rest (options OBJECT))
  :documentation "Send an http request to `uri' and return a string representing the result."
  :public? TRUE :command? TRUE
  (let ((propList (vet-options (coerce-&rest-to-cons options)
			       (quote (:METHOD :HEADERS :CONTENT))))
	(method KEYWORD (lookup-with-default propList :METHOD :GET))
	(headers DICTIONARY (lookup propList :HEADERS))
	(content STRING-WRAPPER (lookup propList :CONTENT)))
    (when (defined? headers)
      (unless (isa? headers (type-spec-to-base-type (real-type-specifier @HTTP-HEADERS)))
        ;; coerce to the appropriate type:
        (let ((httpHeaders (new HTTP-HEADERS)))
          (foreach (key value) in headers
              do (insert-at httpHeaders key value))
          (setq headers httpHeaders))))
    (mv-bind (protocol user-info host port path query fragment)
        (decompose-internet-url uri)
      (ignore user-info)
      (unless (string-equal? protocol "http")
        (signal BAD-ARGUMENT-EXCEPTION "do-http-request: unsupported protocol: " protocol))
      (let ((thePort HTTP-DEFAULT-PORT)
            (thePath (compose-internet-url "" "" "" NULL path query fragment)))
        (unless (blank-string? port)
          (setq thePort (string-to-integer port)))
        (case method
          (:GET  (return (http-get-data-to-string host thePort thePath headers)))
          (:POST (return (http-post-data-to-string host thePort thePath headers content)))
          (otherwise
           (signal BAD-ARGUMENT-EXCEPTION "do-http-request: unsupported method: " method)))))))


#|
;;; Tests:

;;; retrieving an Ontosaurus URL (e.g., from our embedded Java server):

(/http/do-http-request "http://localhost:9090/ploom/ontosaurus/do-action?show+concept+PL-KERNEL-KB+RELATION")

;;; testing the correct transfer of a binary file:

(download-url "http://www.isi.edu/~hans/smiley.gif" "/tmp/smiley.gif")
|#

;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;; BEGIN LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
; Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          ;
;                                                                            ;
; The contents of this file are subject to the Mozilla Public License        ;
; Version 1.1 (the "License"); you may not use this file except in           ;
; compliance with the License. You may obtain a copy of the License at       ;
; http://www.mozilla.org/MPL/                                                ;
;                                                                            ;
; Software distributed under the License is distributed on an "AS IS" basis, ;
; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   ;
; for the specific language governing rights and limitations under the       ;
; License.                                                                   ;
;                                                                            ;
; The Original Code is the STELLA Programming Language.                      ;
;                                                                            ;
; The Initial Developer of the Original Code is                              ;
; UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          ;
; 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               ;
;                                                                            ;
; Portions created by the Initial Developer are Copyright (C) 1996-2006      ;
; the Initial Developer. All Rights Reserved.                                ;
;                                                                            ;
; Contributor(s):                                                            ;
;                                                                            ;
; Alternatively, the contents of this file may be used under the terms of    ;
; either the GNU General Public License Version 2 or later (the "GPL"), or   ;
; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   ;
; in which case the provisions of the GPL or the LGPL are applicable instead ;
; of those above. If you wish to allow use of your version of this file only ;
; under the terms of either the GPL or the LGPL, and not to allow others to  ;
; use your version of this file under the terms of the MPL, indicate your    ;
; decision by deleting the provisions above and replace them with the notice ;
; and other provisions required by the GPL or the LGPL. If you do not delete ;
; the provisions above, a recipient may use your version of this file under  ;
; the terms of any one of the MPL, the GPL or the LGPL.                      ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Version: cl-primal.ste,v 1.120 2006/05/16 18:29:06 tar Exp

;;; Common-Lisp implementations of various primitive (:native?)
;;;    STELLA functions, plus some additonal Lisp-specific support.

(in-package "STELLA")

(in-module "/STELLA")


  ;;
;;;;;; CL-specific constants and special 'print-object's:
  ;;

(verbatim :common-lisp
  (CL:defconstant NULL :null_value))

(verbatim :common-lisp
  (CL:defconstant TRUE CL:T))

(verbatim :common-lisp
  (CL:defconstant FALSE CL:NIL))

(defconstant CL-NIL LISP-CODE
  (verbatim :common-lisp (CL:or)))

(verbatim :common-lisp
  "(CL:defvar NULL-STRING (cl:make-string 1 :initial-element (CL:code-char 0)))")

(verbatim :common-lisp
  "(CL:defvar NULL-NATIVE-VECTOR (cl:vector))")

;; values for cl-array-null 
;; NOTE:  Any change to the set of supported null values also needs
;;        to change the type declaration function LOOKUP-CL-TYPE-FROM-STELLA-TYPE
;;        in file cl-translate.ste
;; NOTE:  Changes will also have to be made to LISP-NULL-ARRAY-SYMBOL-STRING
;;        in file primal.ste
(verbatim :common-lisp
  "(CL:defvar NULL-1D-ARRAY NULL-NATIVE-VECTOR)")

(verbatim :common-lisp
  "(CL:defvar NULL-2D-ARRAY (cl:make-array '(0 0)))")

(verbatim :common-lisp
  "(CL:defvar NULL-3D-ARRAY (cl:make-array '(0 0 0)))")

(verbatim :common-lisp
  "(CL:defvar NULL-4D-ARRAY (cl:make-array '(0 0 0 0)))")

(verbatim :common-lisp
  "(CL:defvar NULL-5D-ARRAY (cl:make-array '(0 0 0 0 0)))")

;; NOTE: This cannot declare the type of "value", because it is possible
;; that it will be called with a non-specialized NULL value for those
;; arrays of rank greater than 5.  We could just ignore them if we really
;; wanted to get speed, since they are likely to be exceedingly rare in
;; Stella code.
(verbatim :common-lisp
  "(CL:defun null-array? (value)
    (CL:TYPECASE value
      (CL:ARRAY    
        (CL:CASE (CL:ARRAY-RANK value)
          (1 (CL:eq value NULL-1D-ARRAY))
          (2 (CL:eq value NULL-2D-ARRAY))
          (3 (CL:eq value NULL-3D-ARRAY))
          (4 (CL:eq value NULL-4D-ARRAY))
          (5 (CL:eq value NULL-5D-ARRAY))
          (CL:t (CL:eq value NULL))))
      (CL:t (CL:eq value NULL))))")


(verbatim :common-lisp
  "#-:lispworks
   (CL:defmethod print-object ((self (CL:eql NULL)) stream)
     (CL:write-string \"NULL\" stream))")
(verbatim :common-lisp
  "#-:lispworks
   (CL:defmethod print-object ((self (CL:eql NULL-INTEGER)) stream)
     (CL:write-string \"NULL-INTEGER\" stream))")
(verbatim :common-lisp
  "#-:lispworks
   (CL:defmethod print-object ((self (CL:eql NULL-FLOAT)) stream)
     (CL:write-string \"NULL-FLOAT\" stream))")
(verbatim :common-lisp
  ;; disabling this for Lispworks might break proper printing of
  ;;    STELLA/Lisp conses though, since we need CL:NIL to print as `()':
  "#-:lispworks
   (CL:defmethod cl:print-object ((self (CL:eql CL:NIL)) stream)
     (CL:write-string \"()\" stream))")


  ;;
;;;;;; 'null?' and 'defined?':
  ;;

;;; NULL?
(verbatim :common-lisp
  (CL:defmethod null? ((value CL:T))
    ;; Return true if "value" equals NULL.
    (CL:eq value NULL)))

(verbatim :common-lisp
  (CL:defmethod null? ((value CL:INTEGER))
    ;; Return true if "value" equals NULL.
    ;; NOTE: Portable Common-Lisp should not define methods on CL:FIXNUM,
    ;;       since it is not required to have a corresponding CLOS class.
    (CL:or (CL:not (CL:typep value (CL:quote CL:FIXNUM)))
           (CL:= value NULL-INTEGER))))

(verbatim :common-lisp
  (CL:defmethod null? ((value CL:FLOAT))
    ;; Return true if "value" equals NULL.
    ;; NOTE: Portable Common-Lisp should not define methods on CL:DOUBLE-FLOAT,
    ;;       since it is not required to have a corresponding CLOS class.
    (CL:= value NULL-FLOAT)))

(verbatim :common-lisp
  (CL:defmethod null? ((value CL:CHARACTER))
    ;; Return true if "value" equals NULL.
    (CL:eq value NULL-CHARACTER)))

(verbatim :common-lisp
  (CL:defmethod null? ((value CL:STRING))
    ;; Return true if "value" equals NULL.
    (CL:eq value NULL-STRING)))

(verbatim :common-lisp
  (CL:defmethod null? ((value CL:VECTOR))
    ;; Return true if "value" equals NULL.
    (CL:eq value NULL-NATIVE-VECTOR)))

(verbatim :common-lisp
  (CL:defmethod null? ((value CL:ARRAY))
    (CL:declare (CL:inline null-array?))
    ;; Return true if "value" does not equal NULL.
    (null-array? value)))

;;; DEFINED?
(verbatim :common-lisp
  (CL:defmethod defined? ((value CL:T))
    ;; Return true if "value" does not equal NULL.
    (CL:not (CL:eq value NULL))))

(verbatim :common-lisp
  (CL:defmethod defined? ((value CL:INTEGER))
    ;; Return true if "value" does not equal NULL.
    ;; NOTE: Portable Common-Lisp should not define methods on CL:FIXNUM,
    ;;       since it is not required to have a corresponding CLOS class.
    (CL:and (CL:typep value (CL:quote CL:FIXNUM))
            (CL:not (CL:= value NULL-INTEGER)))))

(verbatim :common-lisp
  (CL:defmethod defined? ((value CL:FLOAT))
    ;; Return true if "value" does not equal NULL.
    ;; NOTE: Portable Common-Lisp should not define methods on CL:DOUBLE-FLOAT,
    ;;       since it is not required to have a corresponding CLOS class.
    (CL:not (CL:= value NULL-FLOAT))))

(verbatim :common-lisp
  (CL:defmethod defined? ((value CL:CHARACTER))
    ;; Return true if "value" does not equal NULL.
    (CL:not (CL:eq value NULL-CHARACTER))))

(verbatim :common-lisp
  (CL:defmethod defined? ((value CL:STRING))
    ;; Return true if "value" does not equal NULL.
    (CL:not (CL:eq value NULL-STRING))))

(verbatim :common-lisp
  (CL:defmethod defined? ((value CL:VECTOR))
    ;; Return true if "value" does not equal NULL.
    (CL:not (CL:eq value NULL-NATIVE-VECTOR))))

(verbatim :common-lisp
  (CL:defmethod defined? ((value CL:ARRAY))
    (CL:declare (CL:inline null-array?))
    ;; Return true if "value" does not equal NULL.
    (CL:not (null-array? value))))

  ;;
;;;;;; Equality tests:
  ;;

(verbatim :common-lisp
  (CL:defun eq? (x y)
    "Equality test equivalent to the C++ '==' and the Common Lisp 'EQL'."
    (CL:eql x y)))

  ;;
;;;;;; Arithmetic functions
  ;;

(defun (> BOOLEAN) ((x NUMBER) (y NUMBER)) (return (CL:> x y)))
(defun (>= BOOLEAN) ((x NUMBER) (y NUMBER)) (return (CL:>= x y)))
(defun (< BOOLEAN) ((x NUMBER) (y NUMBER)) (return (CL:< x y)))
(defun (<= BOOLEAN) ((x NUMBER) (y NUMBER)) (return (CL:<= x y)))

(defun (+ NUMBER) (&rest (args NUMBER))
  (let ((sum 0))
    (foreach arg in args
        do (setq sum (CL:+ sum arg)))
    (return sum)))

(defun (- NUMBER) ((x NUMBER) &rest (args NUMBER))
  (if (= (length args) 0)
      (return (CL:- x))
    (let ((difference x))
      (foreach arg in args
        do (setq difference (CL:- difference arg)))
      (return difference))))

(defun (* NUMBER) (&rest (args NUMBER))
  (let ((product 1))
    (foreach arg in args
        do (setq product (CL:* product arg)))
    (return product)))

(defun (/ NUMBER) ((x NUMBER) &rest (args NUMBER))
  (if (= (length args) 0)
      (return (CL:/ x))
    (let ((quotient x))
      (foreach arg in args
          do (setq quotient (CL:/ quotient arg)))
      (return quotient))))

(defun (ceiling INTEGER) ((n NUMBER))
  (return (CL:values (CL:ceiling n))))
(defun (floor INTEGER) ((n NUMBER))
  (return (CL:values (CL:floor n))))
#|
;; This would round x.5 to the even integer.  
;; Java unconditionally rounds up;
;; C++ doesn't have it built-in, so we need to do it by hand.
(defun (round INTEGER) ((n NUMBER))
  (return (CL:values (CL:round n))))
|#
(defun (round INTEGER) ((n NUMBER))
  (return (CL:values (CL:floor (+ n 0.5)))))
(defun (truncate INTEGER) ((n NUMBER))
  (return (CL:values (CL:truncate n))))

(defun (integer-length INTEGER) ((arg INTEGER))
  :public? TRUE
  :documentation "The number of bits needed to represent `arg'"
  (return (CL:integer-length arg)))

  ;;
;;;;;; Character library functions
  ;;

  ;;
;;;;;; String library functions
  ;;

(defun (make-string STRING) ((size INTEGER) (initchar CHARACTER))
  :documentation "Return a new string filled with 'size' 'initchar's."
  :public? TRUE
  (return (verbatim :common-lisp (CL:make-string size :initial-element initchar))))

;; TO DO: ADD PERMANENT STRING TABLE TO AVOID UNNECESSARY COPIES.

(defun (string-concatenate STRING) ((string1 STRING) (string2 STRING))
  :documentation "Return a new string representing the concatenation of
'string1' and 'string2'."
  (return
    (verbatim :common-lisp (CL:concatenate (CL:quote CL:STRING) string1 string2))))

(defun (string-upcase STRING) ((string STRING))
  :documentation "Return an upper-case copy of 'string'."
  (return (CL:string-upcase string)))

(defun (string-downcase STRING) ((string STRING))
  :documentation "Return a lower-case copy of 'string'."
  (return (CL:string-downcase string)) )

(defun (string-capitalize STRING) ((string STRING))
  :documentation "Return a capitalized version of 'string'."
  (return (CL:string-capitalize string)) )

(defmethod (copy STRING) ((string STRING))
  :documentation "Return a copy of 'string'."
  (return (CL:copy-seq string)))

(defmethod (remove STRING) ((string STRING) (char CHARACTER))
  :documentation "Remove all occurences of 'char' from 'string'."
  (return (CL:remove char string)))

(defmethod (substitute MUTABLE-STRING) ((self MUTABLE-STRING)
					(newChar CHARACTER)
					(oldChar CHARACTER))
  :documentation "Substitute all occurences of oldChar with newChar
in the string 'self'."
  (return (CL:substitute newChar oldChar self)) )

(defmethod (member? BOOLEAN) ((self STRING) (char CHARACTER))
  (return (CL:not (CL:null (CL:find char self)))))

(defmethod (rest STRING) ((self STRING))
  (return (CL:subseq self 1)) )

(defmethod (position INTEGER)
    ((string STRING) (character CHARACTER) (start INTEGER))
  :documentation "Return the position of 'character' within 'string' (counting
from zero); or return NULL if 'character' does not occur within 'string'.
If 'start' was supplied as non-NULL, only consider the substring starting
at 'start', however, the returned position will always be relative to the
entire string."
  :public? TRUE
  (when (null? start)
    (setq start 0))
  (return
    (verbatim :common-lisp
      (CL:or (CL:position character string :start start)
             NULL-INTEGER))))


(defmethod (last-position INTEGER)
    ((string STRING) (character CHARACTER) (end INTEGER))
  :documentation "Return the last position of 'character' within 'string' (counting
from zero); or return NULL if 'character' does not occur within 'string'.
If 'end' was supplied as non-NULL, only consider the substring ending
at 'end', however, the returned position will always be relative to the
entire string."
  :public? TRUE
  (if (null? end)
      (setq end (length string))
      (setq end (+ end 1)))
  (return
    (verbatim :common-lisp
      (CL:or (CL:position character string :end end :from-end cl:t)
             NULL-INTEGER))))

(defun (string-search INTEGER) ((string STRING)
                                (substring STRING)
                                (start INTEGER))
  :documentation "Return start position of the left-most occurrence right of
'start' of 'substring' in 'string'.  Return NULL if it is not a substring."
  (when (null? start)
    (setq start 0))
  (return
    (verbatim :common-lisp
      (CL:or (CL:search substring string :start2 start)
             NULL-INTEGER))))

(defmethod (subsequence STRING) ((string STRING) (start INTEGER) (end INTEGER))
  :documentation "Return a substring of 'string' beginning at position 'start'
and ending up to but not including position 'end', counting from zero.  An
'end' value of NULL stands for the rest of the string."
  (let ((nullEnd? (null? end))) ;; do this here to allow STELLA-level inlining
    (return
      (verbatim :common-lisp
        (CL:subseq string start (CL:if nullEnd? CL:NIL end))))))

;; There should also be a subsequence method on MUTABLE-STRING, but since
;; it would be the same as on STRING including the types, it is omitted.
;; That is because in CL, there is no difference between STRING and MUTABLE-STRING.

;;; Converting to and from string representations:

(defun (stringify STRING) ((expression OBJECT))
  (special ((*printPretty?* FALSE)
            (*printReadably?* TRUE))
    (return
      (verbatim :common-lisp
        (CL:let ((cl:*print-pretty* cl:nil))
          (CL:with-output-to-string (s)
            (%%print-object s expression)))))))

(verbatim :common-lisp
  (CL:defvar *standard-readtable* (CL:copy-readtable CL:nil)))
(verbatim :common-lisp
  (CL:defvar *case-sensitive-readtable* (CL:copy-readtable CL:nil)))
(verbatim :common-lisp
  "(CL:progn
    #+(or :ANSI-CL :CLTL2)
    (CL:setf (CL:readtable-case *case-sensitive-readtable*) :preserve))")

(defun (old-cl-read-s-expression-from-string OBJECT) ((string STRING))
  ;; This used to be `unstringify'.  We keep it for emergencies (see
  ;;    `toggle-cl-based-readers').
  (let ((caseSensitive? (case-sensitive? *module*)))
    (return (stella-code-to-cons-tree
             (verbatim :common-lisp
               (CL:let ((CL:*package* (CL:find-package "STELLA"))
                        (CL:*readtable*
                         (CL:if caseSensitive?
                             *case-sensitive-readtable*
                           *standard-readtable*)))
                 (cl:handler-case
                     (CL:read-from-string string)
                   (cl:stream-error ()
                     (cl:error
		      (new-read-exception ">> Unstringify: Parse error~%")))
                   (cl:error (c)
                     (cl:error
		      (new-unhandled-exception 
		       (cl:format nil "Unstringify: Caught unhandled exception ~A.~%" c)))))))))))

(defun (integer-to-string-in-base STRING) ((integer INTEGER) (base INTEGER))
  :public? TRUE
  :documentation "Return a string representation of `integer' in `base'.
Helping function for `integer-to-string' and `integer-to-hex-string'"
  ;; We don't use `CL:format' here for speed.
  ;; TO DO: MAKE THIS THREAD SAFE BY ALLOCATING A NEW BUFFER EVERYTIME.
  ;;        REQUIRED IN CLISP WHICH ENFORCES READ-ONLY CHARATERISTIC FOR
  ;;        CONSTANT STRINGS.
  (return
    (verbatim
      :common-lisp
      "(CL:let ((buffer #+:CLISP (CL:make-string 32 :initial-element #\\Space)
                        #-:CLISP \"                                \")
                (table \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\")
                (index 32)
                (digit 0)
                (negativeP CL:NIL))
         (CL:declare (CL:type CL:simple-string buffer table)
                     (CL:type CL:fixnum index digit))
         (CL:cond
          ((CL:= integer 0) \"0\")
          (CL:t
           (CL:when (CL:< integer 0)
             (CL:setq integer (CL:- integer))
             (CL:setq negativeP CL:t))
           (CL:loop while (CL:> integer 0)
               do (CL:decf index)
                  (CL:multiple-value-setq (integer digit)
                    (CL:floor integer base))
                  (CL:setf (CL:aref buffer index)
                    (CL:aref table digit)))
           (CL:when negativeP
             (CL:decf index)
             (CL:setf (CL:aref buffer index) \#\\-))
           (CL:subseq buffer index 32))))")))

(defun (integer-to-string STRING) ((integer INTEGER))
  :documentation "Return a string representation of `integer'."
  :public? TRUE
  (return (integer-to-string-in-base integer 10)))

(defun (integer-to-hex-string STRING) ((integer INTEGER))
  :documentation "Return a hex string representation of 'integer'."
  :public? TRUE
  (return (integer-to-string-in-base integer 16)))

(defun (float-to-string STRING) ((float FLOAT))
  :documentation "Return a string representation of 'float'."
  :public? TRUE
  ;; NOTE: in ACL we could use `EXCL::FLONUM-TO-STRING' for extra speed:
  (return
    (verbatim :common-lisp
      "(CL:let ((CL:*read-default-float-format* 'CL:double-float))
         (CL:with-output-to-string (s)
           (CL:prin1 float s)))")))

(defun (format-float STRING) ((value FLOAT) (nDecimals INTEGER))
  :documentation "Return a string representation of 'float' with 'nDecimals' decimal places."
  :public? TRUE
  (return (CL:format CL-NIL "~,vF" nDecimals value)))
  
(defun (string-to-integer INTEGER) ((string STRING))
  :documentation "Convert the 'string' representation of an integer into an
integer and return the result."
  :public? TRUE
  (return (verbatim :common-lisp
             "(CL:LET ((i (CL:parse-integer string)))
     (CL:CHECK-TYPE i CL:FIXNUM)
     i)"
             :otherwise NULL)))

(defun (string-to-float FLOAT) ((string STRING))
  :documentation "Convert the 'string' representation of a float into a
float and return the result."
  :public? TRUE
  ;; Note:  We set the default read format to double float so that we can avoid
  ;;   rounding problems that would otherwise emerge when coercing to double float.
  ;;   But we also keep the double-float coercion as a safety measure so that any
  ;;   floats read with other CommonLisp float markers will get converted into doubles.
  (return (verbatim
	      :common-lisp
	    "(CL:LET ((CL:*read-default-float-format* (CL:quote CL:double-float)))
               (CL:float (CL:read-from-string string) 0.0d0))"
	      :otherwise NULL)))

  ;;
;;;;;; Lisp Conses to Stella Conses and back
  ;;

;;; These routines convert Common Lisp s-expressions into equivalent Stella
;;;    structures.  In the C++ implementation, they would be implemented
;;;    by a YACC parser that walked an ASCII file and converted
;;;    CStar code into a cons forest.

(defun (cl-symbol-to-stella-symbol GENERALIZED-SYMBOL) ((name STRING))
  ;; 'name' is the symbol name of a Lisp symbol representing a STELLA
  ;;    symbol (possibly qualified with a STELLA module).
  ;; Convert `name' into an appropriate STELLA symbol.  Unfortunately,
  ;;    since we've lost all symbol escape information when going
  ;;    through the Lisp reader, some dwiming is required, since we
  ;;    don't have all the information to do (always proper) module
  ;;    name parsing, symbol/surrogate determination as in stella/|@foo|, etc.
  (let ((module *module*)
        (bareName name))
    (when (qualified-stella-name? name)
      (mv-setq (module bareName)
        ;; NOTE: this might generate read errors for certain escaped symbols
        ;; which we could avoid by using `compute-context-or-module-from-pathname'
        ;; for parsing - let's wait and see how this works out:
        (compute-module-and-bare-name name))
      (when (eql? bareName "")
        (if (or (eql? module *module*)
                (eql? module *root-module*))
            ;; special-case the division '/' symbol;
            (return
              (intern-rigid-symbol-wrt-module "/" *stella-module* SYMBOL-SYM))
          (signal-read-error "Empty symbol name encountered"))))
    ;; NOTE: (1) upcasing is relative to the current module, not the symbol
    ;;           module (otherwise, how would we interpret the module portion?)
    ;;       (2) we don't upcase here and rely on the LISP reader for upcasing,
    ;;           otherwise, we can't have case-escaped symbols such as stella/|Foo|
    ;;           that would result into appropriate mixed-case STELLA symbols,
    ;;           since we don't have the escape information anymore at this point.
    ;(when (not (case-sensitive? *module*))
    ;  (setq bareName (string-upcase bareName)))
    (cond ((keyword-name? bareName)
           ;; it might be ok, since it could have been escaped, but we are
           ;;    conservative here, since we don't know:
           (signal-read-error "Illegal read syntax: " name))
          ((surrogate-name? bareName)
           ;; again, the @ might have been escaped but we assume it wasn't:
           (return (intern-rigid-symbol-wrt-module
                    (subsequence bareName 1 NULL-INTEGER)
                    module SURROGATE-SYM)))
          (otherwise
           (return
             (intern-rigid-symbol-wrt-module bareName module SYMBOL-SYM))))))

(defun (stella-code-to-cons-tree OBJECT) ((stellaCode LISP-CODE))
  "Translate 'stellaCode' into a Stella parse tree
for which Lisp conses have been replaced by STELLA conses,
Lisp symbols have been replaced by STELLA symbols,
and literals have been replaced by wrapped literals."
  (cond
   ((CL:null stellaCode) (return NIL))
   ((CL:consp stellaCode)
    (let ((consTree NIL))
      ;; Don't use CDR recursion to avoid stack overflows;
      ;; use verbatim iteration to avoid some type problems:
      (verbatim :common-lisp
        (CL:loop for element in stellaCode
            do (setq consTree
                 (cons (stella-code-to-cons-tree element) consTree))))
      (return (reverse consTree))))
   ((CL:symbolp stellaCode)
    (let ((name (CL:symbol-name stellaCode)))
      (cond
       ((CL:keywordp stellaCode)
        (return (intern-rigid-symbol-wrt-module name *module* KEYWORD-SYM)))
       ((and (CL:eql (CL:symbol-package stellaCode)
		     ;; standard trick to find Common Lisp package:
		     (verbatim
			 :common-lisp (CL:symbol-package (CL:quote CL:EVAL))))
	     ;; Exclude imported symbols such as 'SETQ' and 'SETF':
	     (not (eq? (CL:find-symbol name "STELLA") stellaCode)))
	(return (intern-common-lisp-symbol name)))
       (otherwise
	(return (cl-symbol-to-stella-symbol name))))))
   ((CL:integerp stellaCode)
    (return (wrap-literal (safe-cast stellaCode INTEGER))))
   ((CL:floatp stellaCode)
    (return (wrap-literal
             (safe-cast (verbatim :common-lisp "(CL:float stellaCode 0.0d0)")
                        FLOAT))))
   ((CL:stringp stellaCode)
    (return (wrap-literal (safe-cast stellaCode STRING))))
   ((CL:characterp stellaCode)
    (return (wrap-literal (safe-cast stellaCode CHARACTER))))
   (otherwise (return (cast stellaCode OBJECT)))))

(defun (cons-tree-to-lisp-code LISP-CODE) ((stellaTree OBJECT))
  ;; Return a Lisp s-expression representing the translation of
  ;;    the code tree "stellaTree" into a Common Lisp s-expression.
  ;; "stellaTree" is assumed already to have been passed through
  ;;    the STELLA code walker.
  (when (null? stellaTree)
    (return (CL:quote NULL)))
  (typecase stellaTree
   (CONS
    (if (nil? stellaTree)
        (return CL-NIL)
      (return (CL:cons (cons-tree-to-lisp-code (value stellaTree))
                       (cons-tree-to-lisp-code (rest stellaTree))))))
   (KEYWORD
    (return (CL:intern (symbol-name stellaTree) "KEYWORD")))
   (SYMBOL
    (let ((translatedSymbol (cl-translate-global-symbol stellaTree)))
      (cond ((symbol? translatedSymbol)
             (let ((name (symbol-name (cast translatedSymbol SYMBOL))))
               (if (symbol-common-lisp? translatedSymbol)
                   (return (CL:intern name "COMMON-LISP"))
                 (return (CL:intern name "STELLA")))))
            (otherwise
             (return (cons-tree-to-lisp-code translatedSymbol))))))
   (SURROGATE
    (return (CL:intern (concatenate "@" (symbol-name stellaTree)) "STELLA")))
   (VERBATIM-STRING-WRAPPER
    (let ((verbatimString (wrapper-value stellaTree))
          (packageName (lisp-package *module*)))
      (return
        (verbatim :common-lisp
          (CL:let ((CL:*package* (CL:find-package packageName))
		   (CL:*readtable* *standard-readtable*))
            (CL:read-from-string verbatimString CL:NIL CL:NIL))))))
   ((INTEGER FLOAT STRING CHARACTER BOOLEAN ; MUTABLE-STRING
     )
    (return (safe-cast (wrapper-value stellaTree) LISP-CODE)))
   (otherwise
    (warn "cons-tree-to-lisp-code: Don't know how to convert " stellaTree
          " into LISP-CODE")
    ;; simply make it a string:
    (return (CL:format CL-NIL "~s" stellaTree)))))

(defun (cons-list-to-lisp-list LISP-CODE) ((list CONS))
  ;; Return a Lisp list containing the items in 'list'.
  (let ((lispList CL-NIL))
    (foreach item in list do (CL:push item lispList))
    (return (CL:nreverse lispList)) ))

  ;;
;;;;;; Stream operations
  ;;

(defun (old-cl-read-s-expression OBJECT BOOLEAN) ((inputStream INPUT-STREAM))
  ;; This used to be `read-s-expression'.  We keep it for emergencies (see
  ;;    `toggle-cl-based-readers').
  (let ((stream NATIVE-INPUT-STREAM inputStream)
        (eofValue (verbatim :common-lisp :EOF))
        (caseSensitive? (case-sensitive? *module*))
        (input LISP-CODE (verbatim :common-lisp
                           (CL:let ((CL:*package* (CL:find-package "STELLA"))
                                    (CL:*readtable*
                                     (CL:if caseSensitive?
                                         *case-sensitive-readtable*
                                       *standard-readtable*)))
                             (CL:read stream CL-NIL eofValue)))))
    (if (eq? input eofValue)
        (return NULL TRUE)
      (return (stella-code-to-cons-tree input) FALSE))))

(defun toggle-cl-based-readers ()
  ;; Toggle between the old CL-based STELLA readers and the new versions
  ;;    defined in `read.ste'.  Useful for emergencies when we update/debug
  ;;    the new reader functions and have hosed ourselves.
  ;; This can be used to toggle multiple times.  It prints a message
  ;;    stating which set of readers is currently active.
  (verbatim
    :common-lisp
    "(CL:let ((unstringify
               (CL:symbol-function 'read-s-expression-from-string))
              (oldUnstringify
               (CL:symbol-function 'old-cl-read-s-expression-from-string))
              (readSExp
               (CL:symbol-function 'read-s-expression))
              (oldReadSExp
               (CL:symbol-function 'old-cl-read-s-expression)))
       (CL:setf (CL:symbol-function 'read-s-expression-from-string)
         oldUnstringify)
       (CL:setf (CL:symbol-function 'old-cl-read-s-expression-from-string)
         unstringify)
       (CL:setf (CL:symbol-function 'read-s-expression) oldReadSExp)
       (CL:setf (CL:symbol-function 'old-cl-read-s-expression) readSExp)
       (CL:setf (CL:get 'old-cl-read-s-expression 'old-cl-readers-active?)
         (CL:not (CL:get 'old-cl-read-s-expression 'old-cl-readers-active?)))
       (CL:if (CL:get 'old-cl-read-s-expression 'old-cl-readers-active?)
           (CL:format CL:t \"Activated old CL-based readers.~%\")
         (CL:format CL:t \"Activated new STELLA-based readers.~%\")))"))

  ;;
;;;;;; File operations
  ;;

;;; The logical pathname translations below aren't stricly necessary,
;;;    but we make them anyway for symmetry with the other languages:

(defun (probe-file? BOOLEAN) ((fileName FILE-NAME))
  (setq fileName (translate-logical-pathname fileName))
  (return (CL:not (CL:null (CL:ignore-errors (CL:probe-file fileName))))))

(defun (file-write-date CALENDAR-DATE) ((fileName FILE-NAME))
  (setq fileName (translate-logical-pathname fileName))
  (return (verbatim
	      :common-lisp
	    (CL:let ((date (CL:file-write-date fileName)))
	      (CL:if (CL:NULL date)
		NULL
		(native-date-time-to-calendar-date date))))))

(defun (file-length INTEGER) ((fileName FILE-NAME))
  (setq fileName (translate-logical-pathname fileName))
  (return
    (verbatim :common-lisp
      (CL:with-open-file (fstream fileName :direction :input)
        (CL:file-length fstream)))))

(defun delete-file ((fileName FILE-NAME))
  (setq fileName (translate-logical-pathname fileName))
  (CL:delete-file fileName))

#|
(defun copy-file ((fromFilename FILE-NAME) (toFilename FILE-NAME))
  (setq fromFilename (translate-logical-pathname fromFilename))
  (setq toFilename   (translate-logical-pathname toFilename))
  (verbatim :common-lisp
     "(CL:LET ((buffer (CL:make-array :size 1024))
                bytes-read)
    (CL:DECLARE (CL:FIXNUM bytes-read))
    (CL:WITH-OPEN-FILE (in :direction :input)
       (CL:WITH-OPEN-FILE (out :direction :output)
          (CL:LOOP for bytes-read = (CL:read-sequence in buffer :start 0 :end 1024)
                   until (CL:< bytes-read 1)
                   do (CL:write-sequence out buffer :start 0 :end bytes-read)))))
"))
|#

  ;;
;;;;;; Timing functions
  ;;

(defun (get-ticktock TICKTOCK) ()
  :public? TRUE
  (return (verbatim :common-lisp
	    (CL:get-internal-run-time))))

(defun (ticktock-difference FLOAT) ((t1 TICKTOCK) (t2 TICKTOCK))
  :documentation "The difference in two TICKTOCK time values in seconds.
The resolution is implementation dependent but will normally be some fractional
value of a second."
  :public? TRUE
  (return (verbatim :common-lisp
	    (CL:/ (CL:float (CL:- t2 t1) 0.0d0)
		  (CL:float CL:internal-time-units-per-second 0.0d0)))))

(defun (ticktock-resolution FLOAT) ()
  :documentation "The minimum theoretically detectable resolution of the
difference in two TICKTOCK time values in seconds.  This resolution is
implementation dependent.  It may also not be realizable in practice, since
the timing grain size may be larger than this resolution."
  :public? TRUE
  (return (verbatim :common-lisp
	    (CL:/ (CL:float CL:internal-time-units-per-second 0.0d0)))))

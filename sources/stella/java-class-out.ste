;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;; BEGIN LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
; Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          ;
;                                                                            ;
; The contents of this file are subject to the Mozilla Public License        ;
; Version 1.1 (the "License"); you may not use this file except in           ;
; compliance with the License. You may obtain a copy of the License at       ;
; http://www.mozilla.org/MPL/                                                ;
;                                                                            ;
; Software distributed under the License is distributed on an "AS IS" basis, ;
; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   ;
; for the specific language governing rights and limitations under the       ;
; License.                                                                   ;
;                                                                            ;
; The Original Code is the STELLA Programming Language.                      ;
;                                                                            ;
; The Initial Developer of the Original Code is                              ;
; UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          ;
; 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               ;
;                                                                            ;
; Portions created by the Initial Developer are Copyright (C) 1996-2006      ;
; the Initial Developer. All Rights Reserved.                                ;
;                                                                            ;
; Contributor(s):                                                            ;
;                                                                            ;
; Alternatively, the contents of this file may be used under the terms of    ;
; either the GNU General Public License Version 2 or later (the "GPL"), or   ;
; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   ;
; in which case the provisions of the GPL or the LGPL are applicable instead ;
; of those above. If you wish to allow use of your version of this file only ;
; under the terms of either the GPL or the LGPL, and not to allow others to  ;
; use your version of this file under the terms of the MPL, indicate your    ;
; decision by deleting the provisions above and replace them with the notice ;
; and other provisions required by the GPL or the LGPL. If you do not delete ;
; the provisions above, a recipient may use your version of this file under  ;
; the terms of any one of the MPL, the GPL or the LGPL.                      ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Version: java-class-out.ste,v 1.17 2006/05/11 07:06:08 hans Exp

;;; Routines for translating a Stella class to Java

(in-package "STELLA")

(in-module "/STELLA")


(defun (java-yield-instance-var-tree CONS) ((slot STORAGE-SLOT)
					    (class CLASS))
  ;; Return a parse tree that defines a Java instance
  ;;   var corresponding to 'slot'.
  ;; Slot options are generated for the keywords
  ;;    :allocation, :initform, and :accessor.
  (let ((slotName (true-slot-name (slot-name slot) (class-type class)))
	(slotType (choose (slot-context-sensitive? slot)
                          @OBJECT
                          (compute-return-type-spec slot (class-type class))))
        (allocation (allocation slot))
        (allocationForm CONS NULL)
	(accessForm CONS NULL)
	(documentation (documentation slot))
	(documentationForm NIL))

    ;; If not public, then make slot protected.
    (if (slot-public? slot)
      (setq accessForm (bquote (& (wrap-literal "public"))))
      (setq accessForm (bquote (& (wrap-literal "protected")))))
    (case allocation
      (:embedded (setq allocationForm NIL))
      (:instance (setq allocationForm NIL))
      (:class (setq allocationForm (bquote (& (wrap-literal "static")))))
      (otherwise (setq allocationForm NIL)))
    (when (defined? documentation)
      (setq documentationForm (bquote (& documentation))))
    (return
     (bquote 
      ((&& accessForm
	&& allocationForm 
	& (java-translate-type-spec slotType))
       & (java-translate-name slotName)
       && documentationForm))) ))

(defun (java-get-instance-variable-definitions CONS) ((class CLASS))
  ;; Return list of instance variable definitions.
  ;; Currently, we migrate mixin slots to classes which inherit them
  (when (class-mixin? class)
    (return NIL))
  (let ((instanceVarDefs NIL)
	(superClass CLASS NULL))
    (foreach slot in (class-slots class)
             where (or
		    ;(class-mixin? (type-class (slot-owner slot)))
		    (and (storage-slot? slot)
			 (native-slot? slot)
			 (eql? (native-slot-home slot class) class)))
             collect (java-yield-instance-var-tree slot class)
	into instanceVarDefs)
    ;; Migrate mixin slots to directly inheriting classes:
    (foreach super in (class-direct-supers class)
	do (setq superClass (get-stella-class super TRUE))
	   (when (class-mixin? superClass)
	     (foreach slot in (class-slots superClass)
		 where (and (storage-slot? slot)
			    (native-slot? slot)
			    (eql? (native-slot-home slot superClass) superClass))
		 collect (java-yield-instance-var-tree slot superClass)
		 into instanceVarDefs)))
    (return instanceVarDefs) ))

(defun (java-get-constructor-and-method-definitions CONS CONS) ((class CLASS))
  ;; Gets the constructor and method definitions for `class';
  ;; Skips over any Flotsam bound methods.
  (let ((constructorDefinitions NIL)
	(methodDefinitions NIL)
	(method METHOD-SLOT NULL))
    (foreach tu in *translationUnits*
	where (or (eql? (category tu) (quote METHOD))
		  (eql? (category tu) (quote MACRO))
		  (eql? (category tu) (quote PRINT-METHOD)))
	do (if (eql? (category tu) (quote PRINT-METHOD))
	       (when (eql? (canonical-type (class-type (cast (the-object tu) @CLASS)))
			   (class-type class))
		 (pushq methodDefinitions tu))
	     (progn
	       (setq method (the-object tu))
	       (cond ((or (java-flotsam-function? method)
			  (method-startup-function? method)))  ;; Do nothing with these.
		     ((method-constructor? method)
		      ;; A constructor that returns CLASS.
		      (when (eql? (canonical-type (slot-base-type method))
				  (class-type class))
			(pushq constructorDefinitions tu)))
		     ((eql? (canonical-type (slot-owner method)) (class-type class))
		      ;; A method that is owned by CLASS.
		      (pushq methodDefinitions tu))))))
    (return (reverse constructorDefinitions) (reverse methodDefinitions)) ))

(defun (java-translate-define-native-class-unit CONS) ((unit TRANSLATION-UNIT))
  ;; Return a form that represents a native (Java) class definition.
  (return (java-translate-define-native-class (the-object unit))) )

(defun (java-translate-define-native-class CONS) ((class CLASS))
  ;; Return a form that represents a native (Java) class definition.
  (let ((parentClass OBJECT NULL)
	(interfaceClasses NIL)	
	(instanceVarDefs NIL)
	(constructorDefs NIL)
	(modifiers (CONS OF STRING-WRAPPER) NIL)
	(methodDefs NIL))

    (within-context (home-module class)
      ;; Don't output mixin classes!
      (when (class-mixin? class)
	(return NIL))
    
      (when (abstract? class)
	(pushq modifiers "abstract"))
      (when (public? class)
	(pushq modifiers "public"))

      ;; NOTE: for now, we assume the first class is the actual class.
      ;;   should probably test for mixin classes 
      (when (defined? (first (class-direct-supers class)))
	(setq parentClass 
	  (java-translate-class-name
	   (symbolize (first (class-direct-supers class)))))
	)

      ;; Put the rest of the classes into the interfaceClasses
      ;; NOTE: THIS IS UNDOUBTEDLY WRONG FOR JAVA.
      ;;  Interface classes are not allowed to have storage slots
      ;;  and all of their methods are abstract, so this cannot be
      ;;  the way we do things.  The information needs to be migrated
      ;;  into the class definition!  In other words this needs to happen
      ;;  much earlier.
;    (foreach super in (rest (class-direct-supers class))
;             collect (java-translate-class-name (symbolize super))
;	     into interfaceClasses)

      ;; DO WE NEED TO DO THIS?
;    (mark-renaming-slots (class-slots class))

      (setq instanceVarDefs (java-get-instance-variable-definitions class))

      (mv-setq (constructorDefs methodDefs)
	(java-get-constructor-and-method-definitions class))

      (return
	(bquote
	 (& (choose (exception-class? class) 
		    (quote JAVA_EXCEPTION_CLASS)
		    (quote JAVA_CLASS))
	  & (choose (defined? (documentation class))
                    (documentation class)
                    NULL)
	  & modifiers
	  & (choose (class-mixin? class) 
		    (wrap-literal "interface")
		    (wrap-literal "class"))
	  & (java-translate-class-name (symbolize (class-type class)))
	  & parentClass
	  & interfaceClasses 
	  & (choose (non-empty? instanceVarDefs)
		    (bquote ((JAVA_DECLARATIONS && instanceVarDefs)))
		     NIL)
	  & constructorDefs
	  & methodDefs ))) )))

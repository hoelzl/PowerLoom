;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;; BEGIN LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
; Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          ;
;                                                                            ;
; The contents of this file are subject to the Mozilla Public License        ;
; Version 1.1 (the "License"); you may not use this file except in           ;
; compliance with the License. You may obtain a copy of the License at       ;
; http://www.mozilla.org/MPL/                                                ;
;                                                                            ;
; Software distributed under the License is distributed on an "AS IS" basis, ;
; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   ;
; for the specific language governing rights and limitations under the       ;
; License.                                                                   ;
;                                                                            ;
; The Original Code is the STELLA Programming Language.                      ;
;                                                                            ;
; The Initial Developer of the Original Code is                              ;
; UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          ;
; 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               ;
;                                                                            ;
; Portions created by the Initial Developer are Copyright (C) 1996-2006      ;
; the Initial Developer. All Rights Reserved.                                ;
;                                                                            ;
; Contributor(s):                                                            ;
;                                                                            ;
; Alternatively, the contents of this file may be used under the terms of    ;
; either the GNU General Public License Version 2 or later (the "GPL"), or   ;
; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   ;
; in which case the provisions of the GPL or the LGPL are applicable instead ;
; of those above. If you wish to allow use of your version of this file only ;
; under the terms of either the GPL or the LGPL, and not to allow others to  ;
; use your version of this file under the terms of the MPL, indicate your    ;
; decision by deleting the provisions above and replace them with the notice ;
; and other provisions required by the GPL or the LGPL. If you do not delete ;
; the provisions above, a recipient may use your version of this file under  ;
; the terms of any one of the MPL, the GPL or the LGPL.                      ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Version: startup.ste,v 1.77 2006/05/21 07:29:59 hans Exp

;;; Support for executing startup-time code.

(in-package "STELLA")

(in-module "/STELLA")


  ;;
;;;;;; Version information
  ;;

;;; Before every new release these variables should be updated
;;; as the very last change, then committed, and then the source
;;; tree 'rtag'ged with a matching symbolic release tag.

(defglobal *stella-major-version-number* INTEGER 3  :public? TRUE)
(defglobal *stella-minor-version-number* INTEGER 4  :public? TRUE)
(defglobal *stella-release-state* STRING ""  :public? TRUE)
(defglobal *stella-patch-level* INTEGER 0 :public? TRUE)

(defglobal *stella-version-string* STRING (stella-version-string)
  :public? TRUE)

(defun (stella-version-string STRING) ()
  :documentation "Return a string identifying the current version of STELLA."
  :public? TRUE
  (return
    (concatenate
      "STELLA "
      (integer-to-string *stella-major-version-number*)
      "."
      (integer-to-string *stella-minor-version-number*)
      "."
      (integer-to-string *stella-patch-level*)
      *stella-release-state*)))

(defun (stella-information STRING) ()
  :documentation "Returns information about the current Stella implementation.
Useful when reporting problems."
  :public? TRUE :command? TRUE
  (return (concatenate *stella-version-string* 
                       " [" (symbol-name (running-in-language)) "]"
                       (running-system-information))))
                      

  ;;
;;;;;; Startup-time support
  ;;

;; IMPORTANT: Whenever '*startup-time-phases*' changes,
;;            'startup-stella-kernel' needs to be updated accordingly!!

(defglobal *startup-time-phases* (LIST OF KEYWORD)
  (cast (list :early-inits :modules 
	      :symbols :quoted-constants :globals
              :classes :finalize-classes :methods :finalize-methods :final)
        (LIST OF KEYWORD))
  :documentation "List of phases that can be legally used as an optional
phase argument to a `startup-time-progn' form.  The corresponding code
will be executed during the execution of a startup-time-code function only
if the position of the keyword in the list corresponds to the current value of
`*STARTUP-TIME-PHASE*', or if phasing of startup-time code is disabled.")

(defglobal *startup-time-phase* INTEGER 999
  :public? TRUE
  :documentation "The current phase during 'phased startup'.
The value has to correspond to the position of one of the keywords
in `*STARTUP-TIME-PHASES*'.  999 means no phasing at all.")

(defun (current-startup-time-phase? BOOLEAN) ((phase INTEGER))
  ;; TRUE if 'phase' corresponds to the current startup-time phase.
  :public? TRUE
  (return (or (eq? *startup-time-phase* 999)
              (eq? phase *startup-time-phase*))))

(defun (encode-startup-time-phase INTEGER) ((phase KEYWORD))
  ;; Encodes a startup-time 'phase' keyword by its position in
  ;;    '*startup-time-phases*'.
  ;; If 'phase' is an unknown keyword, :final is used by default.
  (let ((startupTimePhaseAsNumber 0))
    (unless (member? *startup-time-phases* phase)
      (setq phase :final))
    (foreach ph in *startup-time-phases*
             do (if (eq? ph phase)
                    (return startupTimePhaseAsNumber)
                  (++ startupTimePhaseAsNumber)))
    (error "`encode-startup-time-phase' should never get this far!")))

;; Need these forward declarations, since these functions
;; won't be defined until after this file got translated:
(defun startup-startup ())

(defun startup-kernel ((verbose? BOOLEAN))
  ;; Runs all startup code of the Stella kernel.
  ;; Prints phase annotations if 'verbose?' is TRUE.
  (foreach
      phase in (interval (phase-to-integer :early-inits)
			 (phase-to-integer :final))
      do
	(setq *startup-time-phase* phase)
	(when verbose?
	  (cond ((eq? phase (phase-to-integer :early-inits))
		 NULL) ;; don't have streams yet
		((eq? phase (phase-to-integer :symbols))
		 (inform "Running kernel startup code...")
		 (inform "Initializing symbol tables..."))
		((eq? phase (phase-to-integer :quoted-constants))
		 (inform "Initializing quoted constants..."))
		((eq? phase (phase-to-integer :globals))
		 (inform "Initializing global variables..."))
		((eq? phase (phase-to-integer :classes))
		 (inform "Creating class objects..."))
		((eq? phase (phase-to-integer :finalize-classes))
		 (inform "Finalizing classes..."))
		((eq? phase (phase-to-integer :methods))
		 (inform "Creating method objects..."))
		((eq? phase (phase-to-integer :finalize-methods))
		 (inform "Finalizing methods..."))
		((eq? phase (phase-to-integer :final))
		 (inform "Running non-phased startup code..."))))
	;; Finalize all kernel files in one shot instead of on
	;; a per-file basis, since that is more efficient:
	(when (eq? phase (phase-to-integer :finalize-classes))
	  (finalize-classes)
	  (setq *class-hierarchy-booted?* TRUE)
	  (continue))
	(when (eq? phase (phase-to-integer :finalize-methods))
	  (finalize-slots)
	  (cleanup-unfinalized-classes)
	  (continue))
	(startup-startup)
	;; In particular, make startup-cl-primal run before startup-primal
	;;  because the cl-primal method signatures would otherwise clobber
	;;  the native signatures in primal, and we need the native signatures
	;;  for proper translation into Java.
	(verbatim
	    :common-lisp (startup-cl-primal)
	    :cpp "startupCppPrimal()"
	    :java "Native.startupJavaNative()"
	    )
	(startup-primal)
	(startup-type-predicates)
	(startup-conses)
	(startup-hierarchy)
	(startup-taxonomies)
	(startup-lists)
	(startup-collections)
	(startup-iterators)
	(startup-literals)
	(startup-symbols)
	(startup-classes)
	(startup-methods)
	(startup-defclass)
	(startup-stella-in)
	(startup-foreach)
	(startup-walk)
	(startup-dynamic-slots)
	(startup-dynamic-literal-slots)
	(startup-systems)
	(startup-cl-translate)
	(startup-macros)
	(startup-memoize)
	(startup-streams)
	(startup-describe)
	(startup-demons)
	(startup-more-demons)
	(startup-name-utility)
	(startup-modules)
	(startup-contexts)
	(startup-read)
	(startup-xml)
	(startup-date-time)
	(startup-date-time-parser)))

(defun startup-cpp-translator ()
  (startup-cpp-translate)
  (startup-cpp-class-out)
  (startup-cpp-output)
  (startup-cpp-translate-file))

(defun startup-java-translator ()
  (startup-java-translate)
  (startup-java-class-out)
  (startup-java-output)
  (startup-java-translate-file))

(defun startup-idl-translator ()
  (startup-idl-translate)
  (startup-idl-class-out)
  (startup-idl-output)
  (startup-idl-translate-file))

(defun startup ((verbose? BOOLEAN))
  :public? TRUE
  ;; Runs all startup code.  Prints annotations if 'verbose?' is TRUE.
  (startup-kernel verbose?)
  (when verbose? (inform "Starting up translators..."))
  (foreach phase in (interval (phase-to-integer :early-inits)
                              (phase-to-integer :final))
      do (setq *startup-time-phase* phase)
         (startup-translate-file)
         (startup-cl-translate-file)
         (startup-cpp-translator)
         (startup-java-translator)
         (startup-idl-translator)
         (startup-tools))
  (setq *startup-time-phase* 999)
  ;; Reclaim all transient data structures:
  (sweep-transients))

(defun interpret-command-line-arguments ((count INTEGER)
                                         (arguments (ARRAY () OF STRING)))
  :documentation "Interpret any STELLA-relevant command line `arguments'."
  :public? TRUE
  (let ((cursor 0))
    (while (< cursor count)
      (case (aref arguments cursor)
        (("-e" "-eval" "--eval")
         (++ cursor)
         (if (= cursor count)
             (print-stream
              STANDARD-ERROR "ERROR: Missing argument to -eval option" EOL)
           (exception-case
               (evaluate
                (read-s-expression-from-string (aref arguments cursor)))
             (NATIVE-EXCEPTION (e)
               (print-stream
                STANDARD-ERROR "ERROR during processing of --eval option:" EOL
                "   " (exception-message e))))))
        (otherwise NULL))
      (++ cursor))))

(defun (consify-command-line-arguments (CONS OF STRING-WRAPPER))
    ((count INTEGER) (arguments (ARRAY () OF STRING)))
  :documentation "Convert `count' command line `arguments' into a CONS list."
  :public? TRUE
  (let ((result NIL))
    (foreach i in (interval (verbatim :cpp "1" :otherwise 0) (1- count))
        collect (aref arguments i) into result)
    (return result)))

(defmain (count arguments)
  :documentation "Main STELLA entry point."
  :public? TRUE :startup-system? FALSE
  (let (;; if there are no command line options, run all startup code and exit:
 ;;;;;; NOTE: THIS IS AN ISSUE, SINCE C++ INCLUDES THE COMMAND NAME AS ONE OF
 ;;;;;;    THE ARGUMENTS BUT JAVA DOES NOT, WHICH MEANS THEY ARE AT DIFFERENT
 ;;;;;;    POSITIONS IN `arguments';  SHOULD WE TRY TO RECTIFY?
        (testing? (= count (verbatim :cpp "1" :otherwise 0))))
    (print "Welcome to " (stella-version-string) EOL)
    ;; use this for main startup to print extra messages if
    ;;    we are running just for testing purposes:
    (startup testing?)
    ;; call this too, so we generate the proper system startup function object:
    (startup-stella-system)
    (interpret-command-line-arguments count arguments)
    (when testing?
      (print "Bye!" EOL))))

This is manual.info, produced by makeinfo version 4.3 from manual.texi.

   This file documents the STELLA programming language.

   Copyright (C) 2006 University of Southern California, Information
Sciences Institute 4676 Admiralty Way Marina Del Rey, CA 90292

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.


File: manual.info,  Node: CONS Lists and Trees,  Next: Lists,  Prev: Strings,  Up: Library Functions

`CONS' Lists and Trees
======================

 - Class: CONS : STANDARD-OBJECT
     Not documented.

      - Class Parameter of : any-value : OBJECT
          Not documented.

      - Slot of : value : (LIKE (ANY-VALUE SELF))
          Not documented.

      - Slot of : rest : (CONS OF (LIKE (ANY-VALUE SELF)))
          Not documented.

 - Variable: nil : CONS
     Not documented.

 - Method on CONS: empty? (self) : BOOLEAN
     Return `true' iff SELF equals `nil'.

 - Method on CONS: non-empty? (self) : BOOLEAN
     Return `true' iff SELF is not equal to `nil'.

 - Function: nil? ((x OBJECT)) : BOOLEAN
     Return `true' iff X equals `nil'.

 - Function: equal-cons-trees? ((tree1 OBJECT) (tree2 OBJECT)) : BOOLEAN
     Return `true' iff the cons trees TREE1 and TREE2 are structurally
     equivalent.  Uses an `eql?' test.

 - Method on CONS: object-equal? (tree1 (tree2 OBJECT)) : BOOLEAN
     Return `true' iff the cons trees TREE1 and TREE2 are structurally
     equivalent.  Uses `equal?' to test equality of subtrees.

 - Method on CONS: equal-hash-code (self) : INTEGER
     Return an `equal?' hash code for SELF.  Note that this is O(N) in
     the number of elements of SELF.

 - Function: cons ((value OBJECT) (rest CONS)) : CONS
     Return a cons record that points to VALUE and REST.

 - Method on CONS: first (self) : (LIKE (ANY-VALUE SELF))
     Return the first element of SELF.  The first element of SELF can
     be set with `setf'.  Note that `(first NIL)' = `null'.

 - Method on CONS: second (self) : (LIKE (ANY-VALUE SELF))
     Return the second element of SELF.  The second element of SELF can
     be set with `setf'.  Note that `(second NIL)' = `null'.

 - Method on CONS: third (self) : (LIKE (ANY-VALUE SELF))
     Return the third element of SELF.  The third element of SELF can
     be set with `setf'.  Note that `(third NIL)' = `null'.

 - Method on CONS: fourth (self) : (LIKE (ANY-VALUE SELF))
     Return the fourth element of SELF.  The fourth element of SELF can
     be set with `setf'.  Note that `(fourth NIL)' = `null'.

 - Method on CONS: fifth (self) : (LIKE (ANY-VALUE SELF))
     Return the fifth element of SELF.  The fifth element of SELF can
     be set with `setf'.  Note, that `(fifth NIL)' = `null'.

 - Method on CONS: nth (self (position INTEGER)) : (LIKE (ANY-VALUE
          SELF))
     Return the element of SELF at POSITION.  The nth element of SELF
     can be set with `setf'.  Note, that `(nth NIL <pos>)' = `null'.

 - Method on CONS: nth-rest (self (position INTEGER)) : (LIKE SELF)
     Apply `rest' POSITION times to SELF.

 - Method on CONS: last (self) : (LIKE (ANY-VALUE SELF))
     Return the last element of SELF.

 - Method on CONS: but-last (self) : (ITERATOR OF (LIKE (ANY-VALUE
          SELF)))
     Generate all but the last element of the cons list SELF.

 - Function: last-cons ((self CONS)) : (CONS OF (LIKE (ANY-VALUE SELF)))
     Return the last cons of SELF.

 - Method on CONS: length (self) : INTEGER
     Return the length of the CONS list SELF.

 - Method on CONS: member? (self (object OBJECT)) : BOOLEAN
     Return `true' iff OBJECT is a member of the cons list SELF (uses
     an `eql?' test).

 - Method on CONS: memb? (self (object OBJECT)) : BOOLEAN
     Return `true' iff OBJECT is a member of the cons list SELF (uses
     an `eq?' test).

 - Method on CONS: position (self (object OBJECT) (start INTEGER)) :
          INTEGER
     Return the position of OBJECT within the cons-list SELF (counting
     from zero); or return `null' if OBJECT does not occur within SELF
     (uses an `eql?' test).  If START was supplied as non-`null', only
     consider the sublist starting at START, however, the returned
     position will always be relative to the entire list.

 - Method on CONS: last-position (self (object OBJECT) (end INTEGER)) :
          INTEGER
     Return the position of OBJECT within the cons-list SELF (counting
     from zero); or return `null' if OBJECT does not occur within SELF
     (uses an `eql?' test).  If `start' was supplied as non-`null', only
     consider the sublist ending at END, however, the returned position
     will always be relative to the entire list.

 - Method on CONS: reverse (self) : (LIKE SELF)
     Destructively reverse the members of the cons list SELF.

 - Method on CONS: remove (self (value OBJECT)) : (LIKE SELF)
     Destructively remove all entries in the cons list SELF that match
     VALUE.  Unless the remaining list is `nil', insure that the cons
     that heads the list is unchanged.

 - Method on CONS: remove-duplicates (self) : (LIKE SELF)
     Destructively remove duplicates from SELF and return the result.
     Removes all but the first occurrence of items in the list.
     Preserves the original order of the remaining members.  Runs in
     linear time.

 - Method on CONS: remove-if (self (test? FUNCTION-CODE)) : (LIKE SELF)
     Destructively removes all members of the cons list SELF for which
     TEST? evaluates to `true'.  `test' takes a single argument of type
     OBJECT and returns `true' or `false'.  Returns a cons list.  In
     case the first element is removed, the return result should be
     assigned to a variable.

 - Method on CONS: substitute (self (inValue OBJECT) (outValue OBJECT))
          : CONS
     Destructively replace each appearance of OUTVALUE by INVALUE in
     the cons list SELF.

 - Method on CONS: concatenate (list1 (list2 CONS)
          &rest (otherLists CONS)) : CONS
     Return a cons list consisting of the concatenation of LIST1,
     LIST2, and OTHERLISTS.  The operation is destructive wrt all but
     the last list argument which is left intact.  The two mandatory
     parameters allow us to optimize the common binary case by not
     relying on the somewhat less efficient variable arguments
     mechanism.

 - Function: append ((consList1 CONS) (consList2 CONS)) : CONS
     Return a cons list representing the concatenation of CONSLIST1 and
     CONSLIST2.  The concatenation is NOT destructive.

 - Method on CONS: prepend (self (list1 CONS)) : CONS
     Return a cons list consisting of the concatenation of LIST1 and
     SELF.  A copy of LIST1 is prepended to SELF.  This operation
     results in structure sharing of SELF; to avoid this, SELF should
     not be pointed to by anything other than the tail of the prepended
     copy.

 - Macro: pushq ((variable SYMBOL) (value OBJECT)) : OBJECT
     Push VALUE onto the cons list VARIABLE.

 - Macro: pushq-new ((variable SYMBOL) (value OBJECT)) : OBJECT
     Push VALUE onto the cons list VARIABLE, unless VALUE is already a
     member of the list.

 - Macro: popq ((variable SYMBOL)) : OBJECT
     Pops a value from the cons list VARIABLE.

 - Function: cons-list (&rest (values OBJECT)) : CONS
     Return a cons list containing VALUES, in order.

 - Function: list* (&rest (values OBJECT)) : CONS
     Return a list of conses that make up the list VALUES, terminated
     by the last value rather than by `nil'.  Assumes that at least one
     value is passed in.

 - Function: copy-cons-list ((self CONS)) : (LIKE SELF)
     Return a copy of the cons list SELF.

 - Function: copy-cons-tree ((self OBJECT)) : (LIKE SELF)
     Return a copy of the cons tree SELF.

 - Function: substitute-cons-tree ((tree OBJECT) (newValue OBJECT)
          (oldValue OBJECT)) : OBJECT
     Destructively replace each appearance of OLDVALUE by NEWVALUE in
     the cons tree TREE.  Return the tree.  Uses an `eql?' test.

 - Function: search-cons-tree? ((tree OBJECT) (value OBJECT)) : BOOLEAN
     Return `true' iff the value VALUE is embedded within the cons tree
     TREE.  Uses an `eql?' test.

 - Function: tree-size ((self OBJECT)) : INTEGER
     Not documented.

 - Function: safe-tree-size ((tree CONS)) : INTEGER STRING
     Not documented.

 - Function: cons-tree-nth ((tree CONS) &rest (index INTEGER)) : OBJECT
     Access an arbitrary element of TREE identified by a path specified
     as a list of INDEX values.  The first INDEX specifies the INDEX-th
     element of TREE, the second INDEX the INDEX-th subelement of that
     element, etc.  Example:

            (cons-tree-nth (quote (a (b (c d e) f) g)) 1 1 2) => e


 - Function: cons-tree-nth-rest ((tree CONS) &rest (index INTEGER)) :
          CONS
     Access an arbitrary sublist of TREE identified by a path specified
     as a list of INDEX values.  The first INDEX specifies the INDEX-th
     element of TREE, the second INDEX the INDEX-th subelement of that
     element, ..., the last index specifies the `nth-rest' of the
     previous element (different from `cons-tree-nth').  Example:

            (cons-tree-nth-rest (quote (a (b (c d e) f) g)) 1 1 1) => (d e)


 - Function: match-cons-tree ((tree OBJECT) (pattern OBJECT)
          (bindings KEY-VALUE-LIST)) : KEY-VALUE-LIST
     Match PATTERN against TREE and return a list of variable bindings
     if they match, or NULL otherwise.  BINDINGS can be NULL or an
     initial list of bindings to consider.  Pattern variables use KIF
     syntax, i.e., they need to start with a `?' character.  A single
     question mark is interpreted as the anonymous variable. Example:

            (match-cons-tree (quote (a (b (a d) e) (a d) f g))
                             (quote (a (?x ?y ?) ?y ? g))
                             NULL)
            => |kv|(<?Y,(A D)> <?X,B>)

     Variables can't be quoted but quoting can effectively be achieved
     by inserting to-be-quoted variables bound to themselves into
     BINDINGS.

 - Function: cons-tree-match? ((tree OBJECT) (pattern OBJECT)) : BOOLEAN
     Predicate version of `match-cons-tree' (which see).

 - Method on CONS: consify (self) : (CONS OF (LIKE (ANY-VALUE SELF)))
     Return SELF.

 - Method on CONS: allocate-iterator (self) : (CONS-ITERATOR OF (LIKE
          (ANY-VALUE SELF)))
     Not documented.

 - Method on CONS-ITERATOR: next? (self) : BOOLEAN
     Not documented.

 - Method on CONS: sort (self (predicate FUNCTION-CODE)) : (CONS OF
          (LIKE (ANY-VALUE SELF)))
     Perform a stable, destructive sort of SELF according to PREDICATE,
     and return the result.  If PREDICATE has a `<' semantics, the
     result will be in ascending order.  It is not guaranteed that SELF
     will point to the beginning of the sorted result.  If PREDICATE is
     `null', a suitable `<' predicate is chosen depending on the first
     element of SELF, and it is assumed that all elements of SELF have
     the same type (supported element types are GENERALIZED-SYMBOL,
     STRING, INTEGER, and FLOAT).

 - Method on CONS: sort-tuples (self (n INTEGER)
          (predicate FUNCTION-CODE)) : (CONS OF (LIKE (ANY-VALUE SELF)))
     Just like `sort' but assumes each element of SELF is a tuple (a
     cons) whose N-th element (0-based) will be used for comparison.

 - Function: map-null-to-nil ((self CONS)) : (LIKE SELF)
     Return `nil' iff SELF is `null' or SELF otherwise.

 - Special Variable: *printpretty?* : BOOLEAN
     If `true' conses will be pretty printed.

 - Special Variable: *printreadably?* : BOOLEAN
     If `true' conses will be printed as readable Stella code.

 - Special Variable: *printprettycode?* : BOOLEAN
     When `true' pretty-print Stella and translated code.  Since (Lisp)
     pretty-printing is somewhat slow, turning this off speeds up file
     translation, but it also makes translated output very unreadable.

* Menu:

* CONS Lists as Sets::


File: manual.info,  Node: CONS Lists as Sets,  Prev: CONS Lists and Trees,  Up: CONS Lists and Trees

CONS Lists as Sets
------------------

 - Method on CONS: subset? (self (otherList CONS)) : BOOLEAN
     Return true if every element of SELF also occurs in OTHERLIST.
     Uses an `eql?' test and a simple quadratic-time algorithm.  Note
     that this does not check whether SELF and OTHERLIST actually are
     sets.

 - Method on CONS: equivalent-sets? (self (otherList CONS)) : BOOLEAN
     Return true if every element of SELF occurs in OTHERLIST and vice
     versa.  Uses an `eql?' test and a simple quadratic-time algorithm.
     Note that this does not check whether SELF and OTHERLIST actually
     are sets.

 - Method on CONS: union (self (otherList CONS)) : CONS
     Return the set union of SELF and OTHERLIST.  Uses an `eql?' test
     and a simple quadratic-time algorithm.  Note that the result is
     only guaranteed to be a set if both SELF and OTHERLIST are sets.

 - Method on CONS: intersection (self (otherList CONS)) : CONS
     Return the set intersection of SELF and OTHERLIST.  Uses an `eql?'
     test and a simple quadratic-time algorithm.  Note that the result
     is only guaranteed to be a set if both SELF and OTHERLIST are sets.

 - Method on CONS: difference (self (otherList CONS)) : CONS
     Return the set difference of SELF and OTHERLIST (i.e., all elements
     that are in SELF but not in `otherSet').  Uses an `eql?' test and
     a simple quadratic-time algorithm.  Note that the result is only
     guaranteed to be a set if both SELF and OTHERLIST are sets.

 - Method on CONS: subtract (self (otherList CONS)) : CONS
     Return the set difference of SELF and OTHERLIST by destructively
     removing elements from SELF that also occur in OTHERLIST.  Uses an
     `eql?' test and a simple quadratic-time algorithm.  Note that the
     result is only guaranteed to be a set if SELF is a set.


File: manual.info,  Node: Lists,  Next: Property and Key-Value Lists,  Prev: CONS Lists and Trees,  Up: Library Functions

Lists
=====

 - Class: LIST : SEQUENCE
     Not documented.

      - Class Parameter of : any-value : OBJECT
          Not documented.

      - Slot of : the-cons-list : (CONS OF (LIKE (ANY-VALUE SELF)))
          Not documented.

 - Variable: nil-list : LIST
     Not documented.

 - Function: defined-list? ((self LIST)) : BOOLEAN
     Return TRUE unless SELF is NULL or the `NIL-LIST'.

 - Function: null-list? ((self LIST)) : BOOLEAN
     Return TRUE iff SELF is NULL or the `NIL-LIST'.

 - Method on LIST: empty? (self) : BOOLEAN
     Return TRUE if the list SELF has no members.

 - Method on LIST: non-empty? (self) : BOOLEAN
     Return TRUE if the list SELF has at least one member.

 - Method on LIST: object-equal? (x (y OBJECT)) : BOOLEAN
     Return TRUE iff the lists X and Y are structurally equivalent.
     Uses `equal?' to test equality of elements.

 - Method on LIST: equal-hash-code (self) : INTEGER
     Return an `equal?' hash code for SELF.  Note that this is O(N) in
     the number of elements of SELF.

 - Function: list (&rest (values OBJECT)) : LIST
     Return a list containing VALUES, in order.

 - Method on LIST: first (self) : (LIKE (ANY-VALUE SELF))
     Return the first item in the list SELF, or NULL if empty.

 - Method on LIST: second (self) : (LIKE (ANY-VALUE SELF))
     Return the second item in the list SELF, or NULL if empty.

 - Method on LIST: third (self) : (LIKE (ANY-VALUE SELF))
     Return the third item in the list SELF, or NULL if empty.

 - Method on LIST: fourth (self) : (LIKE (ANY-VALUE SELF))
     Return the fourth item in the list SELF, or NULL if empty.

 - Method on LIST: fifth (self) : (LIKE (ANY-VALUE SELF))
     Return the fifth item in the list SELF, or NULL if empty.

 - Method on LIST: nth (self (position INTEGER)) : (LIKE (ANY-VALUE
          SELF))
     Return the nth item in the list SELF, or NULL if empty.

 - Method on LIST: rest (self) : (CONS OF (LIKE (ANY-VALUE SELF)))
     Return a cons list of all but the first item in the list SELF.

 - Method on LIST: last (self) : (LIKE (ANY-VALUE SELF))
     Return the last element of SELF.

 - Method on LIST: but-last (self) : (ITERATOR OF (LIKE (ANY-VALUE
          SELF)))
     Generate all but the last element of the list SELF.

 - Method on LIST: length (self) : INTEGER
     Not documented.

 - Method on LIST: member? (self (object OBJECT)) : BOOLEAN
     Return TRUE iff OBJECT is a member of the list SELF (uses an
     `eql?' test).

 - Method on LIST: memb? (self (object (LIKE (ANY-VALUE SELF)))) :
          BOOLEAN
     Return TRUE iff OBJECT is a member of the cons list SELF (uses an
     `eq?' test).

 - Method on LIST: position (self (object OBJECT) (start INTEGER)) :
          INTEGER
     Return the position of OBJECT within the list SELF (counting from
     zero); or return NULL if OBJECT does not occur within SELF (uses
     an `eql?' test).  If START was supplied as non-NULL, only consider
     the sublist starting at START, however, the returned position will
     always be relative to the entire list.

 - Method on LIST: last-position (self (object OBJECT) (end INTEGER)) :
          INTEGER
     Return the position of OBJECT within the list SELF (counting from
     zero); or return NULL if OBJECT does not occur within SELF (uses
     an `eql?' test).  If END was supplied as non-NULL, only consider
     the sublist ending at END, however, the returned position will
     always be relative to the entire list.

 - Method on LIST: insert (self (value (LIKE (ANY-VALUE SELF)))) :
     Add VALUE to the front of the list SELF.

 - Method on LIST: push (self (value (LIKE (ANY-VALUE SELF)))) :
     Add VALUE to the front of the list SELF.

 - Method on LIST: insert-new (self (value (LIKE (ANY-VALUE SELF)))) :
     Add VALUE to the front of the list SELF unless its already a
     member.

 - Method on LIST: insert-last (self (value (LIKE (ANY-VALUE SELF)))) :
     Insert VALUE as the last entry in the list SELF.

 - Method on LIST: reverse (self) : (LIKE SELF)
     Reverse the members of SELF (in place).

 - Method on LIST: remove (self (value (LIKE (ANY-VALUE SELF)))) :
          (LIKE SELF)
     Destructively remove all entries in SELF that match VALUE.

 - Method on LIST: remove-duplicates (self) : (LIKE SELF)
     Destructively remove duplicates from SELF and return the result.
     Preserves the original order of the remaining members.

 - Method on LIST: remove-deleted-members (self) : (LIKE SELF)
     Not documented.

 - Method on LIST: remove-if (self (test? FUNCTION-CODE)) : (LIKE SELF)
     Destructively remove all members of the list SELF for which TEST?
     evaluates to TRUE.  `test' takes a single argument of type OBJECT
     and returns TRUE or FALSE.  Returns SELF.

 - Method on LIST: pop (self) : (LIKE (ANY-VALUE SELF))
     Remove and return the first element in the list SELF.  Return NULL
     if the list is empty.

 - Method on LIST: substitute (self (inValue OBJECT) (outValue OBJECT))
          : (LIKE SELF)
     Destructively replace each appearance of OUTVALUE by INVALUE in
     the list SELF.

 - Method on LIST: concatenate (list1 (list2 LIST)
          &rest (otherLists LIST)) : LIST
     Copy LIST2 and all OTHERLISTS onto the end of LIST1.  The
     operation is destructive wrt LIST1, but leaves all other lists
     intact.  The two mandatory parameters allow us to optimize the
     common binary case by not relying on the somewhat less efficient
     variable arguments mechanism.

 - Method on LIST: prepend (self (list2 LIST)) : (LIKE SELF)
     Copy LIST2 onto the front of the list SELF.  The operation is
     destructive wrt SELF, but leaves LIST2 intact.

 - Method on LIST: copy (self) : (LIST OF (LIKE (ANY-VALUE SELF)))
     Return a copy of the list SELF.  The conses in the copy are
     freshly allocated.

 - Method on LIST: clear (self) :
     Make SELF an empty list.

 - Method on LIST: consify (self) : (CONS OF (LIKE (ANY-VALUE SELF)))
     Return a list of elements in SELF.

 - Method on LIST: allocate-iterator (self) : (LIST-ITERATOR OF (LIKE
          (ANY-VALUE SELF)))
     Not documented.

 - Method on LIST-ITERATOR: next? (self) : BOOLEAN
     Not documented.

 - Method on LIST: sort (self (predicate FUNCTION-CODE)) : (LIST OF
          (LIKE (ANY-VALUE SELF)))
     Perform a stable, destructive sort of SELF according to PREDICATE,
     and return the result.  If PREDICATE has a `<' semantics, the
     result will be in ascending order.  If PREDICATE is NULL, a
     suitable `<' predicate is chosen depending on the first element of
     SELF, and it is assumed that all elements of SELF have the same
     type (supported element types are GENERALIZED-SYMBOL, STRING,
     INTEGER, and FLOAT).

 - Function: map-null-to-nil-list ((self LIST)) : LIST
     Return NIL-LIST iff SELF is NULL or SELF otherwise.

* Menu:

* Lists as Sets::


File: manual.info,  Node: Lists as Sets,  Prev: Lists,  Up: Lists

Lists as Sets
-------------

   Similar to `CONS' lists `LIST''s can also be treated as sets and
support the set manipulations below.  Note that `LIST' constructors do
not check for proper set-hood and may have surprising results if a list
contains duplicate elements.

 - Method on LIST: subset? (self (otherList LIST)) : BOOLEAN
     Return true if every element of SELF also occurs in OTHERLIST.
     Uses an `eql?' test and a simple quadratic-time algorithm.  Note
     that this does not check whether SELF and OTHERLIST actually are
     sets.

 - Method on LIST: equivalent-sets? (self (otherList LIST)) : BOOLEAN
     Return true if every element of SELF occurs in OTHERLIST and vice
     versa.  Uses an `eql?' test and a simple quadratic-time algorithm.
     Note that this does not check whether SELF and OTHERLIST actually
     are sets.

 - Method on LIST: union (self (otherList LIST)) : LIST
     Return the set union of SELF and OTHERLIST.  Uses an `eql?' test
     and a simple quadratic-time algorithm.  Note that the result is
     only guaranteed to be a set if both SELF and OTHERLIST are sets.

 - Method on LIST: intersection (self (otherList LIST)) : LIST
     Return the set intersection of SELF and OTHERLIST.  Uses an `eql?'
     test and a simple quadratic-time algorithm.  Note that the result
     is only guaranteed to be a set if both SELF and OTHERLIST are sets.

 - Method on LIST: difference (self (otherList LIST)) : LIST
     Return the set difference of SELF and OTHERLIST (i.e., all elements
     that are in SELF but not in `otherSet').  Uses an `eql?' test and
     a simple quadratic-time algorithm.  Note that the result is only
     guaranteed to be a set if both SELF and OTHERLIST are sets.

 - Method on LIST: subtract (self (otherList LIST)) : LIST
     Return the set difference of SELF and OTHERLIST by destructively
     removing elements from SELF that also occur in OTHERLIST.  Uses an
     `eql?' test and a simple quadratic-time algorithm.  Note that the
     result is only guaranteed to be a set if SELF is a set.

   `SET' is a subclass of `LIST' that overrides certain `LIST'
operations to prevent duplicate elements.  The following additional or
modified operations are supported:

 - Class: SET : LIST, SET-MIXIN
     Not documented.

      - Class Parameter of : any-value : OBJECT
          Not documented.

 - Method on SET: insert (self (value (LIKE (ANY-VALUE SELF)))) :
     Add VALUE to the set SELF unless it is already a member.

 - Method on SET: push (self (value (LIKE (ANY-VALUE SELF)))) :
     Add VALUE to the front of set SELF unless it is already a member.

 - Method on SET: insert-last (self (value (LIKE (ANY-VALUE SELF)))) :
     Add VALUE to the end of set SELF unless it is already a member.

 - Method on SET: substitute (self (new OBJECT) (old OBJECT)) : (LIKE
          SELF)
     Destructively replace OLD with NEW in the set SELF unless NEW is
     already a member.

 - Method on SET: concatenate (set1 (set2 LIST) &rest (otherSets LIST))
          : SET
     Union SET2 and all OTHERSETS onto the end of SET1.  The operation
     is destructive wrt SET1, but leaves all other sets intact.  The
     two mandatory parameters allow us to optimize the common binary
     case by not relying on the somewhat less efficient variable
     arguments mechanism.

 - Method on SET: object-equal? (x (y OBJECT)) : BOOLEAN
     Return TRUE iff X and Y are SET's with equivalent members.  Uses
     `equal?' to test equality of elements.  This is more general than
     `equivalent-sets?', since that only uses an `eql?' test.

 - Method on SET: equal-hash-code (self) : INTEGER
     Return an `equal?' hash code for SELF.  Note that this is O(N) in
     the number of elements of SELF.

 - Function: set (&rest (values OBJECT)) : SET
     Return a set containing VALUES, in order.


File: manual.info,  Node: Property and Key-Value Lists,  Next: Vectors,  Prev: Lists,  Up: Library Functions

Property and Key-Value Lists
============================

 - Class: PROPERTY-LIST : DICTIONARY
     Not documented.

      - Class Parameter of : any-key : OBJECT
          Not documented.

      - Class Parameter of : any-value : OBJECT
          Not documented.

      - Slot of : the-plist : CONS
          Not documented.

 - Method on PROPERTY-LIST: empty? (self) : BOOLEAN
     Not documented.

 - Method on PROPERTY-LIST: non-empty? (self) : BOOLEAN
     Not documented.

 - Method on PROPERTY-LIST: object-equal? (x (y OBJECT)) : BOOLEAN
     Return TRUE if X and Y represent the same set of key/value pairs..

 - Method on PROPERTY-LIST: equal-hash-code (self) : INTEGER
     Return an `equal?' hash code for SELF.  Note that this is O(N) in
     the number of entries of SELF.

 - Method on PROPERTY-LIST: length (self) : INTEGER
     Not documented.

 - Method on PROPERTY-LIST: lookup (self (key (LIKE (ANY-KEY SELF)))) :
          (LIKE (ANY-VALUE SELF))
     Not documented.

 - Method on PROPERTY-LIST: insert-at (self (key (LIKE (ANY-KEY SELF)))
          (value (LIKE (ANY-VALUE SELF)))) :
     Insert the entry <`key', VALUE> into the property list SELF.  If a
     previous entry existed with key KEY, that entry is replaced.

 - Method on PROPERTY-LIST: remove-at (self
          (key (LIKE (ANY-KEY SELF)))) : OBJECT
     Remove the entry that matches the key KEY.  Return the value of
     the matching entry, or NULL if there is no matching entry.
     Assumes that at most one entry matches KEY.

 - Method on PROPERTY-LIST: copy (self) : (LIKE SELF)
     Return a copy of the list SELF.  The conses in the copy are
     freshly allocated.

 - Method on PROPERTY-LIST: clear (self) :
     Make SELF an empty property list.

 - Method on PROPERTY-LIST: allocate-iterator (self) :
          (PROPERTY-LIST-ITERATOR OF (LIKE (ANY-KEY SELF)) (LIKE
          (ANY-VALUE SELF)))
     Not documented.

 - Method on PROPERTY-LIST-ITERATOR: next? (self) : BOOLEAN
     Not documented.

 - Class: KV-CONS : STANDARD-OBJECT
     Not documented.

      - Class Parameter of : any-key : OBJECT
          Not documented.

      - Class Parameter of : any-value : OBJECT
          Not documented.

      - Slot of : key : OBJECT
          Not documented.

      - Slot of : value : OBJECT
          Not documented.

      - Slot of : rest : KV-CONS
          Not documented.

 - Function: kv-cons ((key OBJECT) (value OBJECT) (rest KV-CONS)) :
          KV-CONS
     Create, fill-in, and return a new KV-CONS.

 - Function: copy-kv-cons-list ((kvconslist KV-CONS)) : KV-CONS
     Return a copy of the cons list `consList'.

 - Class: KEY-VALUE-LIST : DICTIONARY
     Not documented.

      - Class Parameter of : any-key : OBJECT
          Not documented.

      - Class Parameter of : any-value : OBJECT
          Not documented.

      - Slot of : the-kv-list : KV-CONS
          Not documented.

 - Method on KEY-VALUE-LIST: empty? (self) : BOOLEAN
     Not documented.

 - Method on KEY-VALUE-LIST: non-empty? (self) : BOOLEAN
     Not documented.

 - Method on KEY-VALUE-LIST: object-equal? (x (y OBJECT)) : BOOLEAN
     Return TRUE if X and Y represent the same set of key/value pairs.

 - Method on KEY-VALUE-LIST: equal-hash-code (self) : INTEGER
     Return an `equal?' hash code for SELF.  Note that this is O(N) in
     the number of entries of SELF.

 - Method on KEY-VALUE-LIST: length (self) : INTEGER
     Not documented.

 - Method on KEY-VALUE-LIST: lookup (self (key (LIKE (ANY-KEY SELF))))
          : (LIKE (ANY-VALUE SELF))
     Not documented.

 - Method on KEY-VALUE-LIST: reverse (self) : (LIKE SELF)
     Destructively reverse the members of the list SELF.

 - Method on KEY-VALUE-LIST: insert-at (self
          (key (LIKE (ANY-KEY SELF))) (value (LIKE (ANY-VALUE SELF)))) :
     Insert the entry <`key', VALUE> into the association SELF. If a
     previous entry existed with key KEY, that entry is replaced.

 - Method on KEY-VALUE-LIST: remove-at (self
          (key (LIKE (ANY-KEY SELF)))) : OBJECT
     Remove the entry that matches the key KEY.  Return the value of
     the matching entry, or NULL if there is no matching entry.
     Assumes that at most one entry matches KEY.

 - Method on KEY-VALUE-LIST: insert-entry (self
          (key (LIKE (ANY-KEY SELF))) (value (LIKE (ANY-VALUE SELF)))) :
     Insert an entry <`key',VALUE> to SELF unless an identical entry
     already exists.  This can generate duplicate entries for KEY.

 - Method on KEY-VALUE-LIST: remove-entry (self
          (key (LIKE (ANY-KEY SELF))) (value (LIKE (ANY-VALUE SELF)))) :
     Remove the entry that matches <`key',VALUE>.  Assumes that more
     than one entry can match KEY.

 - Method on KEY-VALUE-LIST: push (self (value KV-CONS)) :
     Make VALUE be the new first element of SELF.  Note that the `rest'
     slot of VALUE should be `null', since it will be overwritten.
     This might duplicate an existing entry. If a previous entry
     existed with the same key as VALUE, that entry is retained, but
     shadowed by this new entry.

 - Method on KEY-VALUE-LIST: kv-push (self (key (LIKE (ANY-KEY SELF)))
          (value (LIKE (ANY-VALUE SELF)))) :
     Add a new entry <`key', VALUE> to the front of the association
     SELF. This might duplicate an existing entry. If a previous entry
     existed with key KEY, that entry is retained, but shadowed by this
     new entry.

 - Method on KEY-VALUE-LIST: pop (self) : (LIKE (ANY-VALUE SELF))
     Remove and return the value of the first element of the kv-list
     SELF.  It does NOT return the KV-CONS object.  Return `null' if
     the list is empty.

 - Method on KEY-VALUE-LIST: copy (self) : (LIKE SELF)
     Return a copy of the kv-list SELF.  The kv-conses in the copy are
     freshly allocated.

 - Method on KEY-VALUE-LIST: clear (self) :
     Make SELF an empty dictionary.

 - Method on KEY-VALUE-LIST: consify (self) : (CONS OF (LIKE (ANY-VALUE
          SELF)))
     Return a list of key-value pairs in SELF.

 - Method on KEY-VALUE-LIST: allocate-iterator (self) :
          (KV-LIST-ITERATOR OF (LIKE (ANY-KEY SELF)) (LIKE (ANY-VALUE
          SELF)))
     Not documented.

 - Method on KV-LIST-ITERATOR: next? (self) : BOOLEAN
     Not documented.


File: manual.info,  Node: Vectors,  Next: Hash Tables,  Prev: Property and Key-Value Lists,  Up: Library Functions

Vectors
=======

 - Class: VECTOR : SEQUENCE
     Not documented.

      - Class Parameter of : any-value : OBJECT
          Not documented.

      - Slot of : array-size : INTEGER
          Not documented.

      - Slot of : the-array : (NATIVE-VECTOR OF (LIKE (ANY-VALUE SELF)))
          Not documented.

 - Class: EXTENSIBLE-VECTOR : VECTOR
     Not documented.

 - Method on VECTOR: empty? (self) : BOOLEAN
     Return `true' if SELF has length 0.

 - Method on VECTOR: non-empty? (self) : BOOLEAN
     Return `true' if SELF has length > 0.

 - Method on VECTOR: object-equal? (x (y OBJECT)) : BOOLEAN
     Return TRUE iff the vectors X and Y are structurally equivalent.
     Uses `equal?' to test equality of elements.

 - Method on VECTOR: equal-hash-code (self) : INTEGER
     Return an `equal?' hash code for SELF.

 - Function: vector (&rest (values OBJECT)) : VECTOR
     Return a vector containing VALUES, in order.

 - Method on VECTOR: first (self) : (LIKE (ANY-VALUE SELF))
     Not documented.

 - Method on VECTOR: second (self) : (LIKE (ANY-VALUE SELF))
     Not documented.

 - Method on VECTOR: third (self) : (LIKE (ANY-VALUE SELF))
     Not documented.

 - Method on VECTOR: fourth (self) : (LIKE (ANY-VALUE SELF))
     Not documented.

 - Method on VECTOR: fifth (self) : (LIKE (ANY-VALUE SELF))
     Not documented.

 - Method on VECTOR: nth (self (position INTEGER)) : (LIKE (ANY-VALUE
          SELF))
     Not documented.

 - Method on VECTOR: last (self) : (LIKE (ANY-VALUE SELF))
     Return the last item in the vector SELF.

 - Method on VECTOR: but-last (self) : (ITERATOR OF (LIKE (ANY-VALUE
          SELF)))
     Generate all but the last element of the vector SELF.

 - Method on VECTOR: length (self) : INTEGER
     Not documented.

 - Method on VECTOR: member? (self (object OBJECT)) : BOOLEAN
     Not documented.

 - Method on VECTOR: position (self (object OBJECT) (start INTEGER)) :
          INTEGER
     Return the position of OBJECT within the vector SELF (counting
     from zero); or return `null' if OBJECT does not occur within SELF
     (uses an `eql?' test).  If START was supplied as non-`null', only
     consider the portion starting at START, however, the returned
     position will always be relative to the entire vector.

 - Method on VECTOR: last-position (self (object OBJECT) (end INTEGER))
          : INTEGER
     Return the position of OBJECT within the vector SELF (counting
     from zero); or return `null' if OBJECT does not occur within SELF
     (uses an `eql?' test).  If END was supplied as non-`null', only
     consider the portion ending at index END, however, the returned
     position will always be relative to the entire vector.

 - Method on VECTOR: insert-at (self (offset INTEGER)
          (value (LIKE (ANY-VALUE SELF)))) :
     Not documented.

 - Method on VECTOR: copy (self) : (VECTOR OF (LIKE (ANY-VALUE SELF)))
     Return a copy of the vector SELF.

 - Method on VECTOR: clear (self) :
     Not documented.

 - Function: resize-vector ((self VECTOR) (size INTEGER)) :
     Change the size of SELF to SIZE.  If SIZE is smaller than the
     current size of SELF the vector will be truncated.  Otherwise, the
     internal array of SELF will be grown to SIZE and unused elements
     will be initialized to NULL.

 - Method on VECTOR: consify (self) : (CONS OF (LIKE (ANY-VALUE SELF)))
     Return a list of elements in SELF.

 - Method on EXTENSIBLE-VECTOR: insert-at (self (offset INTEGER)
          (value (LIKE (ANY-VALUE SELF)))) :
     Not documented.

 - Method on VECTOR-SEQUENCE: insert (self
          (value (LIKE (ANY-VALUE SELF)))) :
     Append VALUE to the END of the sequence SELF.  Resize the array if
     necessary.

 - Method on VECTOR-SEQUENCE: remove (self
          (value (LIKE (ANY-VALUE SELF)))) : VECTOR-SEQUENCE
     Remove VALUE from the sequence SELF, and left shift the values
     after it to close the gap.

 - Method on VECTOR-SEQUENCE: length (self) : INTEGER
     Not documented.


File: manual.info,  Node: Hash Tables,  Next: Key Value Maps,  Prev: Vectors,  Up: Library Functions

Hash Tables
===========

 - Class: HASH-TABLE : ABSTRACT-HASH-TABLE
     Not documented.

      - Class Parameter of : any-key : OBJECT
          Not documented.

      - Class Parameter of : any-value : OBJECT
          Not documented.

 - Class: STRING-HASH-TABLE : ABSTRACT-HASH-TABLE
     Not documented.

      - Class Parameter of : any-key : STRING
          Not documented.

      - Class Parameter of : any-value : OBJECT
          Not documented.

 - Class: STRING-TO-INTEGER-HASH-TABLE : ABSTRACT-HASH-TABLE
     Not documented.

      - Class Parameter of : any-key : STRING
          Not documented.

      - Class Parameter of : any-value : INTEGER
          Not documented.

 - Class: INTEGER-HASH-TABLE : ABSTRACT-HASH-TABLE
     Not documented.

      - Class Parameter of : any-key : INTEGER
          Not documented.

      - Class Parameter of : any-value : OBJECT
          Not documented.

 - Class: FLOAT-HASH-TABLE : ABSTRACT-HASH-TABLE
     Not documented.

      - Class Parameter of : any-key : FLOAT
          Not documented.

      - Class Parameter of : any-value : OBJECT
          Not documented.

 - Method on HASH-TABLE: lookup (self (key (LIKE (ANY-KEY SELF)))) :
          (LIKE (ANY-VALUE SELF))
     Not documented.

 - Method on HASH-TABLE: insert-at (self (key (LIKE (ANY-KEY SELF)))
          (value (LIKE (ANY-VALUE SELF)))) :
     Not documented.

 - Method on HASH-TABLE: remove-at (self (key (LIKE (ANY-KEY SELF)))) :
     Not documented.

 - Method on STRING-HASH-TABLE: lookup (self (key STRING)) : (LIKE
          (ANY-VALUE SELF))
     Not documented.

 - Method on STRING-HASH-TABLE: insert-at (self (key STRING)
          (value OBJECT)) :
     Not documented.

 - Method on STRING-HASH-TABLE: remove-at (self (key STRING)) :
     Not documented.

 - Method on STRING-TO-INTEGER-HASH-TABLE: lookup (self (key STRING)) :
          INTEGER
     Not documented.

 - Method on STRING-TO-INTEGER-HASH-TABLE: insert-at (self (key STRING)
          (value INTEGER)) :
     Not documented.

 - Method on INTEGER-HASH-TABLE: lookup (self (key INTEGER)) : (LIKE
          (ANY-VALUE SELF))
     Not documented.

 - Method on INTEGER-HASH-TABLE: insert-at (self (key INTEGER)
          (value OBJECT)) :
     Not documented.

 - Method on FLOAT-HASH-TABLE: insert-at (self (key FLOAT)
          (value OBJECT)) :
     Not documented.

   STELLA provides its own implementation of hash tables for cases where
language-native implementations are not available, or where additional
features are needed.

 - Class: STELLA-HASH-TABLE : ABSTRACT-HASH-TABLE
     Not documented.

      - Class Parameter of : any-key : OBJECT
          Not documented.

      - Class Parameter of : any-value : OBJECT
          Not documented.

      - Slot of : the-table : (ARRAY SIZE () OF KV-CONS)
          Not documented.

      - Slot of : size : INTEGER
          Not documented.

      - Slot of : initial-size : INTEGER
          If supplied, the initial hash table will be sized to hold at
          least that many elements.

      - Slot of : free-elements : INTEGER
          Not documented.

      - Slot of : equal-test? : BOOLEAN
          If true use `equal?' as the equality test and
          `equal-hash-code' as the hash function, otherwise, use `eql?'
          and `hash-code' (the default).

 - Method on STELLA-HASH-TABLE: lookup (self
          (key (LIKE (ANY-KEY SELF)))) : (LIKE (ANY-VALUE SELF))
     Lookup the entry identified by KEY in SELF and return its value,
     or NULL if no such entry exists.    Uses an `eql?' test by default
     or `equal?' if `equal-test?' of SELF is TRUE.

 - Method on STELLA-HASH-TABLE: insert-at (self
          (key (LIKE (ANY-KEY SELF))) (value (LIKE (ANY-VALUE SELF)))) :
     Set the value of the entry identified by KEY in SELF to VALUE or
     add a new entry if no entry with KEY exists yet.  Uses an `eql?'
     test by default or `equal?' if `equal-test?' of SELF is TRUE.

 - Method on STELLA-HASH-TABLE: remove-at (self
          (key (LIKE (ANY-KEY SELF)))) :
     Remove the entry identified by KEY from SELF.  Uses an `eql?' test
     by default or `equal?' if `equal-test?' of SELF is TRUE.

 - Method on STELLA-HASH-TABLE: length (self) : INTEGER
     Return the number of entries in SELF.

 - Method on STELLA-HASH-TABLE: empty? (self) : BOOLEAN
     Return TRUE if SELF has zero entries.

 - Method on STELLA-HASH-TABLE: non-empty? (self) : BOOLEAN
     Return TRUE if SELF has at least 1 entry.

 - Method on STELLA-HASH-TABLE: copy (self) : (LIKE SELF)
     Return a copy of the hash table SELF.  The bucket table and
     buckets are freshly allocated, however, the keys and values of
     entries are not copied themselves (similar to what we do for
     lists, etc.).

 - Method on STELLA-HASH-TABLE: clear (self) :
     Remove all entries from SELF.  This will result in a
     re-initialization of the table upon the first insertion into SELF.

 - Method on STELLA-HASH-TABLE: consify (self) : (CONS OF CONS)
     Collect all entries of SELF into a cons list of `(<key> <value>)'
     pairs and return the result.

 - Method on STELLA-HASH-TABLE: object-equal? (x (y OBJECT)) : BOOLEAN
     Return TRUE if X and Y represent the same set of key/value pairs.

 - Method on STELLA-HASH-TABLE: equal-hash-code (self) : INTEGER
     Return an `equal?' hash code for SELF.  Note that this is O(N) in
     the number of entries of SELF.

 - Method on STELLA-HASH-TABLE: allocate-iterator (self) :
          (STELLA-HASH-TABLE-ITERATOR OF (LIKE (ANY-KEY SELF)) (LIKE
          (ANY-VALUE SELF)))
     Allocate an iterator for SELF.

   Hashing objects into STELLA hash tables is accomplished via
`hash-code' and `equal-hash-code' methods.  These methods are
implemented for all built-in STELLA types but are user extensible for
cases where special functionality on user-defined objects is needed.
Defining new `hash-code' methods should only be necessary if new
wrapper types are defined, since for all types descending from
`STANDARD-OBJECT' the built-in method should be adequate.

 - Function: object-hash-code ((self OBJECT)) : INTEGER
     Return a hash code for SELF (can be negative).  Two objects that
     are `eq?' are guaranteed to generate the same hash code.  Two
     objects that are not `eq?' do not necessarily generate different
     hash codes.  Similar to `hash-code' but always hashes on the
     address of SELF even if it is a wrapper.

 - Method on OBJECT: hash-code (self) : INTEGER
     Return a hash code for SELF (can be negative).  Two objects that
     are `eql?' are guaranteed to generate the same hash code.  Two
     objects that are not `eql?' do not necessarily generate different
     hash codes.

 - Method on STANDARD-OBJECT: hash-code (self) : INTEGER
     Not documented.

 - Method on STRING-WRAPPER: hash-code (self) : INTEGER
     Not documented.

 - Method on INTEGER-WRAPPER: hash-code (self) : INTEGER
     Not documented.

 - Method on FLOAT-WRAPPER: hash-code (self) : INTEGER
     Not documented.

 - Method on CHARACTER-WRAPPER: hash-code (self) : INTEGER
     Not documented.

 - Method on BOOLEAN-WRAPPER: hash-code (self) : INTEGER
     Not documented.

 - Method on STRING: hash-code (self) : INTEGER
     Not documented.

 - Method on INTEGER: hash-code (self) : INTEGER
     Not documented.

 - Method on FLOAT: hash-code (self) : INTEGER
     Not documented.

 - Method on CHARACTER: hash-code (self) : INTEGER
     Not documented.

 - Method on OBJECT: equal-hash-code (self) : INTEGER
     Return a hash code for SELF (can be negative).  Two objects that
     are `equal?' are guaranteed to generate the same hash code
     (provided, that writers of `object-equal?' methods also
     implemented the appropriate `equal-hash-code' method).  Two
     objects that are not `equal?'do not necessarily generate different
     hash codes.

   The following low-level utilities are available to implement
specialized hashing schemes or for defining new versions of
`equal-hash-code'.

 - Function: hashmod ((code INTEGER) (size INTEGER)) : INTEGER
     Map the hash code CODE onto a bucket index for a hash table of
     SIZE (i.e., onto the interval [0..size-1].  This is just like
     `rem' for positive hash codes but also works for negative hash
     codes by mapping those onto a positive number first.  Note, that
     the sign conversion mapping is not equivalent to calling the `abs'
     function (it simply masks the sign bit for speed) and therefore
     really only makes sense for hash codes.

 - Function: rotate-hash-code ((arg INTEGER)) : INTEGER
     Rotate ARG to the right by 1 position.  This means shift ARG to
     the right by one and feed in ARGs bit zero from the left.  In Lisp
     the result will stay in positive FIXNUM range.  In C++ and Java
     this might return a negative value which might be equal to
     NULL-INTEGER.  Important: to make this inlinable, it must be
     called with an atom (i.e., constant or variable) as its argument.
     This function is primarily useful for hashing sequences of items
     where the hash code should take the sequential order of elements
     into account (e.g., lists).


File: manual.info,  Node: Key Value Maps,  Next: Hash Sets,  Prev: Hash Tables,  Up: Library Functions

Key Value Maps
==============

   `KEY-VALUE-MAP' is a full-featured dictionary class that supports
`eql?' or extensible `equal?' equality tests, O(1) access operations
even for large numbers of entries by using a hash table, light-weight
`KV-CONS' representation for small tables and iteration even if the
dictionary is represented by a hash table (note that in STELLA we
cannot iterate over regular `HASH-TABLE''s, since native Lisp hash
tables do not allow us to implement a hash table iterator).  Since
large `KEY-VALUE-MAP''s are implemented via `STELLA-HASH-TABLE''s, we
can support iteration.

 - Class: KEY-VALUE-MAP : DICTIONARY
     Full-featured dictionary class that supports `eql?' or `equal?'
     equality tests, O(1) access operations even for large numbers of
     entries by using a hash table, light-weight KV-CONS representation
     for small tables and iteration even if the dictionary is
     represented by a hash table.

      - Slot of : the-map : OBJECT
          Not documented.

      - Slot of : equal-test? : BOOLEAN
          If true use `equal?' as the equality test (and
          `equal-hash-code' as the hash function), otherwise, use
          `eql?' (and `hash-code') (the default).

      - Slot of : initial-size : INTEGER
          If supplied, the initial table will be sized to hold at least
          that many elements.

      - Slot of : crossover-point : INTEGER
          Not documented.

 - Method on KEY-VALUE-MAP: lookup (self (key (LIKE (ANY-KEY SELF)))) :
          (LIKE (ANY-VALUE SELF))
     Lookup the entry identified by KEY in SELF and return its value,
     or NULL if no such entry exists.    Uses an `eql?' test by default
     or `equal?' if `equal-test?' of SELF is TRUE.

 - Method on KEY-VALUE-MAP: insert-at (self (key (LIKE (ANY-KEY SELF)))
          (value (LIKE (ANY-VALUE SELF)))) :
     Set the value of the entry identified by KEY in SELF to VALUE or
     add a new entry if no entry with KEY exists yet.  Uses an `eql?'
     test by default or `equal?' if `equal-test?' of SELF is TRUE.

 - Method on KEY-VALUE-MAP: remove-at (self
          (key (LIKE (ANY-KEY SELF)))) :
     Remove the entry identified by KEY from SELF.  Uses an `eql?' test
     by default or `equal?' if `equal-test?' of SELF is TRUE.

 - Method on KEY-VALUE-MAP: length (self) : INTEGER
     Return the number of entries in SELF.

 - Method on KEY-VALUE-MAP: empty? (self) : BOOLEAN
     Return TRUE if SELF has zero entries.

 - Method on KEY-VALUE-MAP: non-empty? (self) : BOOLEAN
     Return TRUE if SELF has at least 1 entry.

 - Method on KEY-VALUE-MAP: copy (self) : (LIKE SELF)
     Return a copy of the map SELF.  All entries are freshly allocated,
     however, the keys and values of entries are not copied themselves
     (similar to what we do for lists, etc.).

 - Method on KEY-VALUE-MAP: clear (self) :
     Reset SELF to have zero entries.

 - Method on KEY-VALUE-MAP: allocate-iterator (self) :
          (DICTIONARY-ITERATOR OF (LIKE (ANY-KEY SELF)) (LIKE
          (ANY-VALUE SELF)))
     Allocate an iterator for SELF.  The only modifying operations
     allowed during iteration are removal of the current element or
     changing its value.  All other removal or insertion operations
     might lead to corruption or undefined results.

 - Method on KEY-VALUE-MAP: consify (self) : CONS
     Collect all entries of SELF into a cons list of `(<key> <value>)'
     pairs and return the result.

 - Method on KEY-VALUE-MAP: object-equal? (x (y OBJECT)) : BOOLEAN
     Return TRUE if X and Y represent the same set of key/value pairs.

 - Method on KEY-VALUE-MAP: equal-hash-code (self) : INTEGER
     Return an `equal?' hash code for SELF.  Note that this is O(N) in
     the number of entries of SELF.


This is manual.info, produced by makeinfo version 4.2 from manual.texi.

   This file documents the STELLA programming language.

   Copyright (C) 2003 University of Southern California, Information
Sciences Institute 4676 Admiralty Way Marina Del Rey, CA 90292

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.


File: manual.info,  Node: CONS Lists and Trees,  Next: Lists,  Prev: Strings,  Up: Library Functions

`CONS' Lists and Trees
======================

 - Variable: nil : CONS
     Not documented.

 - Method: empty? ((self CONS)) : BOOLEAN
     Return `true' iff SELF equals `nil'.

 - Method: non-empty? ((self CONS)) : BOOLEAN
     Return `true' iff SELF is not equal to `nil'.

 - Function: nil? ((x OBJECT)) : BOOLEAN
     Return `true' iff X equals `nil'.

 - Function: equal-cons-trees? ((tree1 OBJECT) (tree2 OBJECT)) : BOOLEAN
     Return `true' iff the cons trees TREE1 and TREE2 are structurally
     equivalent.  Uses an `eql?' test.

 - Method: object-equal? ((tree1 CONS) (tree2 OBJECT)) : BOOLEAN
     Return `true' iff the cons trees TREE1 and TREE2 are structurally
     equivalent.  Uses `equal?' to test equality of subtrees.

 - Method: equal-hash-code ((self CONS)) : INTEGER
     Return an `equal?' hash code for SELF.  Note that this is O(N) in
     the number of elements of SELF.

 - Function: cons ((value OBJECT) (rest CONS)) : CONS
     Return a cons record that points to VALUE and REST.

 - Method: first ((self CONS)) : (LIKE (ANY-VALUE SELF))
     Return the first element of SELF.  The first element of SELF can
     be set with `setf'.  Note that `(first NIL)' = `null'.

 - Method: second ((self CONS)) : (LIKE (ANY-VALUE SELF))
     Return the second element of SELF.  The second element of SELF can
     be set with `setf'.  Note that `(second NIL)' = `null'.

 - Method: third ((self CONS)) : (LIKE (ANY-VALUE SELF))
     Return the third element of SELF.  The third element of SELF can
     be set with `setf'.  Note that `(third NIL)' = `null'.

 - Method: fourth ((self CONS)) : (LIKE (ANY-VALUE SELF))
     Return the fourth element of SELF.  The fourth element of SELF can
     be set with `setf'.  Note that `(fourth NIL)' = `null'.

 - Method: fifth ((self CONS)) : (LIKE (ANY-VALUE SELF))
     Return the fifth element of SELF.  The fifth element of SELF can
     be set with `setf'.  Note, that `(fifth NIL)' = `null'.

 - Method: nth ((self CONS) (position INTEGER)) : (LIKE (ANY-VALUE
          SELF))
     Return the element of SELF at POSITION.  The nth element of SELF
     can be set with `setf'.  Note, that `(nth NIL <pos>)' = `null'.

 - Method: nth-rest ((self CONS) (position INTEGER)) : (LIKE SELF)
     Apply `rest' POSITION times to SELF.

 - Method: last ((self CONS)) : (LIKE (ANY-VALUE SELF))
     Return the last element of SELF.

 - Method: but-last ((self CONS)) : (ITERATOR OF (LIKE (ANY-VALUE
          SELF)))
     Generate all but the last element of the cons list SELF.

 - Function: last-cons ((self CONS)) : (CONS OF (LIKE (ANY-VALUE SELF)))
     Return the last cons of SELF.

 - Method: length ((self CONS)) : INTEGER
     Return the length of the CONS list SELF.

 - Method: member? ((self CONS) (object OBJECT)) : BOOLEAN
     Return `true' iff OBJECT is a member of the cons list SELF (uses
     an `eql?' test).

 - Method: memb? ((self CONS) (object OBJECT)) : BOOLEAN
     Return `true' iff OBJECT is a member of the cons list SELF (uses
     an `eq?' test).

 - Method: position ((self CONS) (object OBJECT) (start INTEGER)) :
          INTEGER
     Return the position of OBJECT within the cons-list SELF (counting
     from zero); or return `null' if OBJECT does not occur within SELF
     (uses an `eql?' test).  If START was supplied as non-`null', only
     consider the sublist starting at START, however, the returned
     position will always be relative to the entire list.

 - Method: reverse ((self CONS)) : (LIKE SELF)
     Destructively reverse the members of the cons list SELF.

 - Method: remove ((self CONS) (value OBJECT)) : (LIKE SELF)
     Destructively remove all entries in the cons list SELF that match
     VALUE.  Unless the remaining list is `nil', insure that the cons
     that heads the list is unchanged.

 - Method: remove-duplicates ((self CONS)) : (LIKE SELF)
     Destructively remove duplicates from SELF and return the result.
     Removes all but the first occurrence of items in the list.
     Preserves the original order of the remaining members.  Runs in
     linear time.

 - Method: remove-if ((self CONS) (test? FUNCTION-CODE)) : (LIKE SELF)
     Destructively removes all members of the cons list SELF for which
     TEST? evaluates to `true'.  `test' takes a single argument of type
     OBJECT and returns `true' or `false'.  Returns a cons list.  In
     case the first element is removed, the return result should be
     assigned to a variable.

 - Method: substitute ((self CONS) (inValue OBJECT) (outValue OBJECT))
          : CONS
     Destructively replace each appearance of OUTVALUE by INVALUE in
     the cons list SELF.

 - Method: concatenate ((list1 CONS) (list2 CONS)
          &rest (otherLists CONS)) : CONS
     Return a cons list consisting of the concatenation of LIST1,
     LIST2, and OTHERLISTS.  The operation is destructive wrt all but
     the last list argument which is left intact.  The two mandatory
     parameters allow us to optimize the common binary case by not
     relying on the somewhat less efficient variable arguments
     mechanism.

 - Function: append ((consList1 CONS) (consList2 CONS)) : CONS
     Return a cons list representing the concatenation of CONSLIST1 and
     CONSLIST2.  The concatenation is NOT destructive.

 - Method: prepend ((self CONS) (list1 CONS)) : CONS
     Return a cons list consisting of the concatenation of LIST1 and
     SELF.  A copy of LIST1 is prepended to SELF.  This operation
     results in structure sharing of SELF; to avoid this, SELF should
     not be pointed to by anything other than the tail of the prepended
     copy.

 - Macro: pushq ((variable SYMBOL) (value OBJECT)) : OBJECT
     Push VALUE onto the cons list VARIABLE.

 - Macro: pushq-new ((variable SYMBOL) (value OBJECT)) : OBJECT
     Push VALUE onto the cons list VARIABLE, unless VALUE is already a
     member of the list.

 - Macro: popq ((variable SYMBOL)) : OBJECT
     Pops a value from the cons list VARIABLE.

 - Function: cons-list (&rest (values OBJECT)) : CONS
     Return a cons list containing VALUES, in order.

 - Function: list* (&rest (values OBJECT)) : CONS
     Return a list of conses that make up the list VALUES, terminated
     by the last value rather than by `nil'.  Assumes that at least one
     value is passed in.

 - Function: copy-cons-list ((self CONS)) : (LIKE SELF)
     Return a copy of the cons list SELF.

 - Function: copy-cons-tree ((self OBJECT)) : (LIKE SELF)
     Return a copy of the cons tree SELF.

 - Function: substitute-cons-tree ((tree OBJECT) (newValue OBJECT)
          (oldValue OBJECT)) : OBJECT
     Destructively replace each appearance of OLDVALUE by NEWVALUE in
     the cons tree TREE.  Return the tree.  Uses an `eql?' test.

 - Function: search-cons-tree? ((tree OBJECT) (value OBJECT)) : BOOLEAN
     Return `true' iff the value VALUE is embedded within the cons tree
     TREE.  Uses an `eql?' test.

 - Function: tree-size ((self OBJECT)) : INTEGER
     Not documented.

 - Function: safe-tree-size ((tree CONS)) : INTEGER STRING
     Not documented.

 - Method: consify ((self CONS)) : (CONS OF (LIKE (ANY-VALUE SELF)))
     Return SELF.

 - Method: allocate-iterator ((self CONS)) : (CONS-ITERATOR OF (LIKE
          (ANY-VALUE SELF)))
     Not documented.

 - Method: next? ((self CONS-ITERATOR)) : BOOLEAN
     Not documented.

 - Method: sort ((self CONS) (predicate FUNCTION-CODE)) : (CONS OF
          (LIKE (ANY-VALUE SELF)))
     Perform a stable, destructive sort of SELF according to PREDICATE,
     and return the result.  If PREDICATE has a `<' semantics, the
     result will be in ascending order.  It is not guaranteed that SELF
     will point to the beginning of the sorted result.  If PREDICATE is
     `null', a suitable `<' predicate is chosen depending on the first
     element of SELF, and it is assumed that all elements of SELF have
     the same type (supported element types are GENERALIZED-SYMBOL,
     STRING, INTEGER, and FLOAT).

 - Function: map-null-to-nil ((self CONS)) : CONS
     Return `nil' iff SELF is `null' or SELF otherwise.

 - Special Variable: *printpretty?* : BOOLEAN
     If `true' conses will be pretty printed.

 - Special Variable: *printreadably?* : BOOLEAN
     If `true' conses will be printed as readable Stella code.

 - Special Variable: *printprettycode?* : BOOLEAN
     When `true' pretty-print Stella and translated code.  Since (Lisp)
     pretty-printing is somewhat slow, turning this off speeds up file
     translation, but it also makes translated output very unreadable.

* Menu:

* CONS Lists as Sets::


File: manual.info,  Node: CONS Lists as Sets,  Prev: CONS Lists and Trees,  Up: CONS Lists and Trees

CONS Lists as Sets
------------------

 - Method: subset? ((self CONS) (otherList CONS)) : BOOLEAN
     Return true if every element of SELF also occurs in OTHERLIST.
     Uses an `eql?' test and a simple quadratic-time algorithm.  Note
     that this does not check whether SELF and OTHERLIST actually are
     sets.

 - Method: equivalent-sets? ((self CONS) (otherList CONS)) : BOOLEAN
     Return true if every element of SELF occurs in OTHERLIST and vice
     versa.  Uses an `eql?' test and a simple quadratic-time algorithm.
     Note that this does not check whether SELF and OTHERLIST actually
     are sets.

 - Method: union ((self CONS) (otherList CONS)) : CONS
     Return the set union of SELF and OTHERLIST.  Uses an `eql?' test
     and a simple quadratic-time algorithm.  Note that the result is
     only guaranteed to be a set if both SELF and OTHERLIST are sets.

 - Method: intersection ((self CONS) (otherList CONS)) : CONS
     Return the set intersection of SELF and OTHERLIST.  Uses an `eql?'
     test and a simple quadratic-time algorithm.  Note that the result
     is only guaranteed to be a set if both SELF and OTHERLIST are sets.

 - Method: difference ((self CONS) (otherList CONS)) : CONS
     Return the set difference of SELF and OTHERLIST (i.e., all elements
     that are in SELF but not in `otherSet').  Uses an `eql?' test and
     a simple quadratic-time algorithm.  Note that the result is only
     guaranteed to be a set if both SELF and OTHERLIST are sets.

 - Method: subtract ((self CONS) (otherList CONS)) : CONS
     Return the set difference of SELF and OTHERLIST by destructively
     removing elements from SELF that also occur in OTHERLIST.  Uses an
     `eql?' test and a simple quadratic-time algorithm.  Note that the
     result is only guaranteed to be a set if SELF is a set.


File: manual.info,  Node: Lists,  Next: Property and Key-Value Lists,  Prev: CONS Lists and Trees,  Up: Library Functions

Lists
=====

 - Variable: nil-list : LIST
     Not documented.

 - Function: defined-list? ((self LIST)) : BOOLEAN
     Return TRUE unless SELF is NULL or the `NIL-LIST'.

 - Function: null-list? ((self LIST)) : BOOLEAN
     Return TRUE iff SELF is NULL or the `NIL-LIST'.

 - Method: empty? ((self LIST)) : BOOLEAN
     Return TRUE if the list SELF has no members.

 - Method: non-empty? ((self LIST)) : BOOLEAN
     Return TRUE if the list SELF has at least one member.

 - Method: object-equal? ((x LIST) (y OBJECT)) : BOOLEAN
     Return TRUE iff the lists X and Y are structurally equivalent.
     Uses `equal?' to test equality of elements.

 - Method: equal-hash-code ((self LIST)) : INTEGER
     Return an `equal?' hash code for SELF.  Note that this is O(N) in
     the number of elements of SELF.

 - Function: list (&rest (values OBJECT)) : LIST
     Return a list containing VALUES, in order.

 - Method: first ((self LIST)) : (LIKE (ANY-VALUE SELF))
     Return the first item in the list SELF, or NULL if empty.

 - Method: second ((self LIST)) : (LIKE (ANY-VALUE SELF))
     Return the second item in the list SELF, or NULL if empty.

 - Method: third ((self LIST)) : (LIKE (ANY-VALUE SELF))
     Return the third item in the list SELF, or NULL if empty.

 - Method: fourth ((self LIST)) : (LIKE (ANY-VALUE SELF))
     Return the fourth item in the list SELF, or NULL if empty.

 - Method: fifth ((self LIST)) : (LIKE (ANY-VALUE SELF))
     Return the fifth item in the list SELF, or NULL if empty.

 - Method: nth ((self LIST) (position INTEGER)) : (LIKE (ANY-VALUE
          SELF))
     Return the nth item in the list SELF, or NULL if empty.

 - Method: rest ((self LIST)) : (CONS OF (LIKE (ANY-VALUE SELF)))
     Return a cons list of all but the first item in the list SELF.

 - Method: last ((self LIST)) : (LIKE (ANY-VALUE SELF))
     Return the last element of SELF.

 - Method: but-last ((self LIST)) : (ITERATOR OF (LIKE (ANY-VALUE
          SELF)))
     Generate all but the last element of the list SELF.

 - Method: length ((self LIST)) : INTEGER
     Not documented.

 - Method: member? ((self LIST) (object OBJECT)) : BOOLEAN
     Return TRUE iff OBJECT is a member of the list SELF (uses an
     `eql?' test).

 - Method: memb? ((self LIST) (object (LIKE (ANY-VALUE SELF)))) :
          BOOLEAN
     Return TRUE iff OBJECT is a member of the cons list SELF (uses an
     `eq?' test).

 - Method: position ((self LIST) (object OBJECT) (start INTEGER)) :
          INTEGER
     Return the position of OBJECT within the list SELF (counting from
     zero); or return NULL if OBJECT does not occur within SELF (uses
     an `eql?' test).  If START was supplied as non-NULL, only consider
     the sublist starting at START, however, the returned position will
     always be relative to the entire list.

 - Method: insert ((self LIST) (value (LIKE (ANY-VALUE SELF)))) :
     Add VALUE to the front of the list SELF.

 - Method: push ((self LIST) (value (LIKE (ANY-VALUE SELF)))) :
     Add VALUE to the front of the list SELF.

 - Method: insert-new ((self LIST) (value (LIKE (ANY-VALUE SELF)))) :
     Add VALUE to the front of the list SELF unless its already a
     member.

 - Method: insert-last ((self LIST) (value (LIKE (ANY-VALUE SELF)))) :
     Insert VALUE as the last entry in the list SELF.

 - Method: reverse ((self LIST)) : (LIKE SELF)
     Reverse the members of SELF (in place).

 - Method: remove ((self LIST) (value (LIKE (ANY-VALUE SELF)))) : (LIKE
          SELF)
     Destructively remove all entries in SELF that match VALUE.

 - Method: remove-duplicates ((self LIST)) : (LIKE SELF)
     Destructively remove duplicates from SELF and return the result.
     Preserves the original order of the remaining members.

 - Method: remove-deleted-members ((self LIST)) : (LIKE SELF)
     Not documented.

 - Method: remove-if ((self LIST) (test? FUNCTION-CODE)) : (LIKE SELF)
     Destructively remove all members of the list SELF for which TEST?
     evaluates to TRUE.  `test' takes a single argument of type OBJECT
     and returns TRUE or FALSE.  Returns SELF.

 - Method: pop ((self LIST)) : (LIKE (ANY-VALUE SELF))
     Remove and return the first element in the list SELF.  Return NULL
     if the list is empty.

 - Method: substitute ((self LIST) (inValue OBJECT) (outValue OBJECT))
          : (LIKE SELF)
     Destructively replace each appearance of OUTVALUE by INVALUE in
     the list SELF.

 - Method: concatenate ((list1 LIST) (list2 LIST)
          &rest (otherLists LIST)) : LIST
     Copy LIST2 and all OTHERLISTS onto the end of LIST1.  The
     operation is destructive wrt LIST1, but leaves all other lists
     intact.  The two mandatory parameters allow us to optimize the
     common binary case by not relying on the somewhat less efficient
     variable arguments mechanism.

 - Method: prepend ((self LIST) (list2 LIST)) : (LIKE SELF)
     Copy LIST2 onto the front of the list SELF.  The operation is
     destructive wrt SELF, but leaves LIST2 intact.

 - Method: copy ((self LIST)) : (LIST OF (LIKE (ANY-VALUE SELF)))
     Return a copy of the list SELF.  The conses in the copy are
     freshly allocated.

 - Method: clear ((self LIST)) :
     Make SELF an empty list.

 - Method: consify ((self LIST)) : (CONS OF (LIKE (ANY-VALUE SELF)))
     Return a list of elements in SELF.

 - Method: allocate-iterator ((self LIST)) : (LIST-ITERATOR OF (LIKE
          (ANY-VALUE SELF)))
     Not documented.

 - Method: next? ((self LIST-ITERATOR)) : BOOLEAN
     Not documented.

 - Method: sort ((self LIST) (predicate FUNCTION-CODE)) : (LIST OF
          (LIKE (ANY-VALUE SELF)))
     Perform a stable, destructive sort of SELF according to PREDICATE,
     and return the result.  If PREDICATE has a `<' semantics, the
     result will be in ascending order.  If PREDICATE is NULL, a
     suitable `<' predicate is chosen depending on the first element of
     SELF, and it is assumed that all elements of SELF have the same
     type (supported element types are GENERALIZED-SYMBOL, STRING,
     INTEGER, and FLOAT).

 - Function: map-null-to-nil-list ((self LIST)) : LIST
     Return NIL-LIST iff SELF is NULL or SELF otherwise.

* Menu:

* Lists as Sets::


File: manual.info,  Node: Lists as Sets,  Prev: Lists,  Up: Lists

Lists as Sets
-------------

   Similar to `CONS' lists `LIST''s can also be treated as sets and
support the set manipulations below.  Note that `LIST' constructors do
not check for proper set-hood and may have surprising results if a list
contains duplicate elements.

 - Method: subset? ((self LIST) (otherList LIST)) : BOOLEAN
     Return true if every element of SELF also occurs in OTHERLIST.
     Uses an `eql?' test and a simple quadratic-time algorithm.  Note
     that this does not check whether SELF and OTHERLIST actually are
     sets.

 - Method: equivalent-sets? ((self LIST) (otherList LIST)) : BOOLEAN
     Return true if every element of SELF occurs in OTHERLIST and vice
     versa.  Uses an `eql?' test and a simple quadratic-time algorithm.
     Note that this does not check whether SELF and OTHERLIST actually
     are sets.

 - Method: union ((self LIST) (otherList LIST)) : LIST
     Return the set union of SELF and OTHERLIST.  Uses an `eql?' test
     and a simple quadratic-time algorithm.  Note that the result is
     only guaranteed to be a set if both SELF and OTHERLIST are sets.

 - Method: intersection ((self LIST) (otherList LIST)) : LIST
     Return the set intersection of SELF and OTHERLIST.  Uses an `eql?'
     test and a simple quadratic-time algorithm.  Note that the result
     is only guaranteed to be a set if both SELF and OTHERLIST are sets.

 - Method: difference ((self LIST) (otherList LIST)) : LIST
     Return the set difference of SELF and OTHERLIST (i.e., all elements
     that are in SELF but not in `otherSet').  Uses an `eql?' test and
     a simple quadratic-time algorithm.  Note that the result is only
     guaranteed to be a set if both SELF and OTHERLIST are sets.

 - Method: subtract ((self LIST) (otherList LIST)) : LIST
     Return the set difference of SELF and OTHERLIST by destructively
     removing elements from SELF that also occur in OTHERLIST.  Uses an
     `eql?' test and a simple quadratic-time algorithm.  Note that the
     result is only guaranteed to be a set if SELF is a set.

   `SET' is a subclass of `LIST' that overrides certain `LIST'
operations to prevent duplicate elements.  The following additional or
modified operations are supported:

 - Method: insert ((self SET) (value (LIKE (ANY-VALUE SELF)))) :
     Add VALUE to the set SELF unless it is already a member.

 - Method: push ((self SET) (value (LIKE (ANY-VALUE SELF)))) :
     Add VALUE to the front of set SELF unless it is already a member.

 - Method: insert-last ((self SET) (value (LIKE (ANY-VALUE SELF)))) :
     Add VALUE to the end of set SELF unless it is already a member.

 - Method: substitute ((self SET) (new OBJECT) (old OBJECT)) : (LIKE
          SELF)
     Destructively replace OLD with NEW in the set SELF unless NEW is
     already a member.

 - Method: concatenate ((set1 SET) (set2 LIST) &rest (otherSets LIST))
          : SET
     Union SET2 and all OTHERSETS onto the end of SET1.  The operation
     is destructive wrt SET1, but leaves all other sets intact.  The
     two mandatory parameters allow us to optimize the common binary
     case by not relying on the somewhat less efficient variable
     arguments mechanism.

 - Method: object-equal? ((x SET) (y OBJECT)) : BOOLEAN
     Return TRUE iff X and Y are SET's with equivalent members.  Uses
     `equal?' to test equality of elements.  This is more general than
     `equivalent-sets?', since that only uses an `eql?' test.

 - Method: equal-hash-code ((self SET)) : INTEGER
     Return an `equal?' hash code for SELF.  Note that this is O(N) in
     the number of elements of SELF.

 - Function: set (&rest (values OBJECT)) : SET
     Return a set containing VALUES, in order.


File: manual.info,  Node: Property and Key-Value Lists,  Next: Vectors,  Prev: Lists,  Up: Library Functions

Property and Key-Value Lists
============================

 - Method: empty? ((self PROPERTY-LIST)) : BOOLEAN
     Not documented.

 - Method: non-empty? ((self PROPERTY-LIST)) : BOOLEAN
     Not documented.

 - Method: object-equal? ((x PROPERTY-LIST) (y OBJECT)) : BOOLEAN
     Return TRUE if X and Y represent the same set of key/value pairs..

 - Method: equal-hash-code ((self PROPERTY-LIST)) : INTEGER
     Return an `equal?' hash code for SELF.  Note that this is O(N) in
     the number of entries of SELF.

 - Method: length ((self PROPERTY-LIST)) : INTEGER
     Not documented.

 - Method: lookup ((self PROPERTY-LIST) (key (LIKE (ANY-KEY SELF)))) :
          (LIKE (ANY-VALUE SELF))
     Not documented.

 - Method: insert-at ((self PROPERTY-LIST) (key (LIKE (ANY-KEY SELF)))
          (value (LIKE (ANY-VALUE SELF)))) :
     Insert the entry <`key', VALUE> into the property list SELF.  If a
     previous entry existed with key KEY, that entry is replaced.

 - Method: remove-at ((self PROPERTY-LIST) (key (LIKE (ANY-KEY SELF))))
          : OBJECT
     Remove the entry that matches the key KEY.  Return the value of
     the matching entry, or NULL if there is no matching entry.
     Assumes that at most one entry matches KEY.

 - Method: copy ((self PROPERTY-LIST)) : (LIKE SELF)
     Return a copy of the list SELF.  The conses in the copy are
     freshly allocated.

 - Method: clear ((self PROPERTY-LIST)) :
     Make SELF an empty property list.

 - Method: allocate-iterator ((self PROPERTY-LIST)) :
          (PROPERTY-LIST-ITERATOR OF (LIKE (ANY-KEY SELF)) (LIKE
          (ANY-VALUE SELF)))
     Not documented.

 - Method: next? ((self PROPERTY-LIST-ITERATOR)) : BOOLEAN
     Not documented.

 - Function: kv-cons ((key OBJECT) (value OBJECT) (rest KV-CONS)) :
          KV-CONS
     Create, fill-in, and return a new KV-CONS.

 - Function: copy-kv-cons-list ((kvconslist KV-CONS)) : KV-CONS
     Return a copy of the cons list `consList'.

 - Method: empty? ((self KEY-VALUE-LIST)) : BOOLEAN
     Not documented.

 - Method: non-empty? ((self KEY-VALUE-LIST)) : BOOLEAN
     Not documented.

 - Method: object-equal? ((x KEY-VALUE-LIST) (y OBJECT)) : BOOLEAN
     Return TRUE if X and Y represent the same set of key/value pairs.

 - Method: equal-hash-code ((self KEY-VALUE-LIST)) : INTEGER
     Return an `equal?' hash code for SELF.  Note that this is O(N) in
     the number of entries of SELF.

 - Method: length ((self KEY-VALUE-LIST)) : INTEGER
     Not documented.

 - Method: lookup ((self KEY-VALUE-LIST) (key (LIKE (ANY-KEY SELF)))) :
          (LIKE (ANY-VALUE SELF))
     Not documented.

 - Method: reverse ((self KEY-VALUE-LIST)) : (LIKE SELF)
     Destructively reverse the members of the list SELF.

 - Method: insert-at ((self KEY-VALUE-LIST) (key (LIKE (ANY-KEY SELF)))
          (value (LIKE (ANY-VALUE SELF)))) :
     Insert the entry <`key', VALUE> into the association SELF. If a
     previous entry existed with key KEY, that entry is replaced.

 - Method: remove-at ((self KEY-VALUE-LIST)
          (key (LIKE (ANY-KEY SELF)))) : OBJECT
     Remove the entry that matches the key KEY.  Return the value of
     the matching entry, or NULL if there is no matching entry.
     Assumes that at most one entry matches KEY.

 - Method: insert-entry ((self KEY-VALUE-LIST)
          (key (LIKE (ANY-KEY SELF))) (value (LIKE (ANY-VALUE SELF)))) :
     Insert an entry <`key',VALUE> to SELF unless an identical entry
     already exists.  This can generate duplicate entries for KEY.

 - Method: remove-entry ((self KEY-VALUE-LIST)
          (key (LIKE (ANY-KEY SELF))) (value (LIKE (ANY-VALUE SELF)))) :
     Remove the entry that matches <`key',VALUE>.  Assumes that more
     than one entry can match KEY.

 - Method: push ((self KEY-VALUE-LIST) (value KV-CONS)) :
     Make VALUE be the new first element of SELF.  Note that the `rest'
     slot of VALUE should be `null', since it will be overwritten.
     This might duplicate an existing entry. If a previous entry
     existed with the same key as VALUE, that entry is retained, but
     shadowed by this new entry.

 - Method: kv-push ((self KEY-VALUE-LIST) (key (LIKE (ANY-KEY SELF)))
          (value (LIKE (ANY-VALUE SELF)))) :
     Add a new entry <`key', VALUE> to the front of the association
     SELF. This might duplicate an existing entry. If a previous entry
     existed with key KEY, that entry is retained, but shadowed by this
     new entry.

 - Method: pop ((self KEY-VALUE-LIST)) : (LIKE (ANY-VALUE SELF))
     Remove and return the value of the first element of the kv-list
     SELF.  It does NOT return the KV-CONS object.  Return `null' if
     the list is empty.

 - Method: copy ((self KEY-VALUE-LIST)) : (LIKE SELF)
     Return a copy of the kv-list SELF.  The kv-conses in the copy are
     freshly allocated.

 - Method: clear ((self KEY-VALUE-LIST)) :
     Make SELF an empty dictionary.

 - Method: consify ((self KEY-VALUE-LIST)) : (CONS OF (LIKE (ANY-VALUE
          SELF)))
     Return a list of key-value pairs in SELF.

 - Method: allocate-iterator ((self KEY-VALUE-LIST)) :
          (KV-LIST-ITERATOR OF (LIKE (ANY-KEY SELF)) (LIKE (ANY-VALUE
          SELF)))
     Not documented.

 - Method: next? ((self KV-LIST-ITERATOR)) : BOOLEAN
     Not documented.


File: manual.info,  Node: Vectors,  Next: Hash Tables,  Prev: Property and Key-Value Lists,  Up: Library Functions

Vectors
=======

 - Method: empty? ((self VECTOR)) : BOOLEAN
     Return `true' if SELF has length 0.

 - Method: non-empty? ((self VECTOR)) : BOOLEAN
     Return `true' if SELF has length > 0.

 - Method: object-equal? ((x VECTOR) (y OBJECT)) : BOOLEAN
     Return TRUE iff the vectors X and Y are structurally equivalent.
     Uses `equal?' to test equality of elements.

 - Method: equal-hash-code ((self VECTOR)) : INTEGER
     Return an `equal?' hash code for SELF.

 - Function: vector (&rest (values OBJECT)) : VECTOR
     Return a vector containing VALUES, in order.

 - Method: first ((self VECTOR)) : (LIKE (ANY-VALUE SELF))
     Not documented.

 - Method: second ((self VECTOR)) : (LIKE (ANY-VALUE SELF))
     Not documented.

 - Method: third ((self VECTOR)) : (LIKE (ANY-VALUE SELF))
     Not documented.

 - Method: fourth ((self VECTOR)) : (LIKE (ANY-VALUE SELF))
     Not documented.

 - Method: fifth ((self VECTOR)) : (LIKE (ANY-VALUE SELF))
     Not documented.

 - Method: nth ((self VECTOR) (position INTEGER)) : (LIKE (ANY-VALUE
          SELF))
     Not documented.

 - Method: last ((self VECTOR)) : (LIKE (ANY-VALUE SELF))
     Return the last item in the vector SELF.

 - Method: but-last ((self VECTOR)) : (ITERATOR OF (LIKE (ANY-VALUE
          SELF)))
     Generate all but the last element of the vector SELF.

 - Method: length ((self VECTOR)) : INTEGER
     Not documented.

 - Method: member? ((self VECTOR) (object OBJECT)) : BOOLEAN
     Not documented.

 - Method: position ((self VECTOR) (object OBJECT) (start INTEGER)) :
          INTEGER
     Return the position of OBJECT within the vector SELF (counting
     from zero); or return `null' if OBJECT does not occur within SELF
     (uses an `eql?' test).  If START was supplied as non-`null', only
     consider the portion starting at START, however, the returned
     position will always be relative to the entire vector.

 - Method: insert-at ((self VECTOR) (offset INTEGER)
          (value (LIKE (ANY-VALUE SELF)))) :
     Not documented.

 - Method: copy ((self VECTOR)) : (VECTOR OF (LIKE (ANY-VALUE SELF)))
     Return a copy of the vector SELF.

 - Method: clear ((self VECTOR)) :
     Not documented.

 - Function: resize-vector ((self VECTOR) (size INTEGER)) :
     Change the size of SELF to SIZE.  If SIZE is smaller than the
     current size of SELF the vector will be truncated.  Otherwise, the
     internal array of SELF will be grown to SIZE and unused elements
     will be initialized to NULL.

 - Method: consify ((self VECTOR)) : (CONS OF (LIKE (ANY-VALUE SELF)))
     Return a list of elements in SELF.

 - Method: insert-at ((self EXTENSIBLE-VECTOR) (offset INTEGER)
          (value (LIKE (ANY-VALUE SELF)))) :
     Not documented.

 - Method: insert ((self VECTOR-SEQUENCE)
          (value (LIKE (ANY-VALUE SELF)))) :
     Append VALUE to the END of the sequence SELF.  Resize the array if
     necessary.

 - Method: remove ((self VECTOR-SEQUENCE)
          (value (LIKE (ANY-VALUE SELF)))) : VECTOR-SEQUENCE
     Remove VALUE from the sequence SELF, and left shift the values
     after it to close the gap.

 - Method: length ((self VECTOR-SEQUENCE)) : INTEGER
     Not documented.


File: manual.info,  Node: Hash Tables,  Next: Key Value Maps,  Prev: Vectors,  Up: Library Functions

Hash Tables
===========

 - Method: lookup ((self HASH-TABLE) (key (LIKE (ANY-KEY SELF)))) :
          (LIKE (ANY-VALUE SELF))
     Not documented.

 - Method: insert-at ((self HASH-TABLE) (key (LIKE (ANY-KEY SELF)))
          (value (LIKE (ANY-VALUE SELF)))) :
     Not documented.

 - Method: remove-at ((self HASH-TABLE) (key (LIKE (ANY-KEY SELF)))) :
     Not documented.

 - Method: lookup ((self STRING-HASH-TABLE) (key STRING)) : (LIKE
          (ANY-VALUE SELF))
     Not documented.

 - Method: insert-at ((self STRING-HASH-TABLE) (key STRING)
          (value OBJECT)) :
     Not documented.

 - Method: remove-at ((self STRING-HASH-TABLE) (key STRING)) :
     Not documented.

 - Method: lookup ((self STRING-TO-INTEGER-HASH-TABLE) (key STRING)) :
          INTEGER
     Not documented.

 - Method: insert-at ((self STRING-TO-INTEGER-HASH-TABLE) (key STRING)
          (value INTEGER)) :
     Not documented.

 - Method: lookup ((self INTEGER-HASH-TABLE) (key INTEGER)) : (LIKE
          (ANY-VALUE SELF))
     Not documented.

 - Method: insert-at ((self INTEGER-HASH-TABLE) (key INTEGER)
          (value OBJECT)) :
     Not documented.

 - Method: insert-at ((self FLOAT-HASH-TABLE) (key FLOAT)
          (value OBJECT)) :
     Not documented.

   STELLA provides its own implementation of hash tables for cases where
language-native implementations are not available, or where additional
features are needed.

 - Method: lookup ((self STELLA-HASH-TABLE)
          (key (LIKE (ANY-KEY SELF)))) : (LIKE (ANY-VALUE SELF))
     Lookup the entry identified by KEY in SELF and return its value,
     or NULL if no such entry exists.    Uses an `eql?' test by default
     or `equal?' if `equal-test?' of SELF is TRUE.

 - Method: insert-at ((self STELLA-HASH-TABLE)
          (key (LIKE (ANY-KEY SELF))) (value (LIKE (ANY-VALUE SELF)))) :
     Set the value of the entry identified by KEY in SELF to VALUE or
     add a new entry if no entry with KEY exists yet.  Uses an `eql?'
     test by default or `equal?' if `equal-test?' of SELF is TRUE.

 - Method: remove-at ((self STELLA-HASH-TABLE)
          (key (LIKE (ANY-KEY SELF)))) :
     Remove the entry identified by KEY from SELF.  Uses an `eql?' test
     by default or `equal?' if `equal-test?' of SELF is TRUE.

 - Method: length ((self STELLA-HASH-TABLE)) : INTEGER
     Return the number of entries in SELF.

 - Method: empty? ((self STELLA-HASH-TABLE)) : BOOLEAN
     Return TRUE if SELF has zero entries.

 - Method: non-empty? ((self STELLA-HASH-TABLE)) : BOOLEAN
     Return TRUE if SELF has at least 1 entry.

 - Method: copy ((self STELLA-HASH-TABLE)) : (LIKE SELF)
     Return a copy of the hash table SELF.  The bucket table and
     buckets are freshly allocated, however, the keys and values of
     entries are not copied themselves (similar to what we do for
     lists, etc.).

 - Method: clear ((self STELLA-HASH-TABLE)) :
     Remove all entries from SELF.  This will result in a
     re-initialization of the table upon the first insertion into SELF.

 - Method: consify ((self STELLA-HASH-TABLE)) : (CONS OF CONS)
     Collect all entries of SELF into a cons list of `(<key> <value>)'
     pairs and return the result.

 - Method: object-equal? ((x STELLA-HASH-TABLE) (y OBJECT)) : BOOLEAN
     Return TRUE if X and Y represent the same set of key/value pairs.

 - Method: equal-hash-code ((self STELLA-HASH-TABLE)) : INTEGER
     Return an `equal?' hash code for SELF.  Note that this is O(N) in
     the number of entries of SELF.

 - Method: allocate-iterator ((self STELLA-HASH-TABLE)) :
          (STELLA-HASH-TABLE-ITERATOR OF (LIKE (ANY-KEY SELF)) (LIKE
          (ANY-VALUE SELF)))
     Allocate an iterator for SELF.


File: manual.info,  Node: Key Value Maps,  Next: Hash Sets,  Prev: Hash Tables,  Up: Library Functions

Key Value Maps
==============

   `KEY-VALUE-MAP' is a full-featured dictionary class that supports
`eql?' or extensible `equal?' equality tests, O(1) access operations
even for large numbers of entries by using a hash table, light-weight
`KV-CONS' representation for small tables and iteration even if the
dictionary is represented by a hash table (note that in STELLA we
cannot iterate over regular `HASH-TABLE''s, since native Lisp hash
tables do not allow us to implement a hash table iterator).  Since
large `KEY-VALUE-MAP''s are implemented via `STELLA-HASH-TABLE''s, we
can support iteration.

 - Method: lookup ((self KEY-VALUE-MAP) (key (LIKE (ANY-KEY SELF)))) :
          (LIKE (ANY-VALUE SELF))
     Lookup the entry identified by KEY in SELF and return its value,
     or NULL if no such entry exists.    Uses an `eql?' test by default
     or `equal?' if `equal-test?' of SELF is TRUE.

 - Method: insert-at ((self KEY-VALUE-MAP) (key (LIKE (ANY-KEY SELF)))
          (value (LIKE (ANY-VALUE SELF)))) :
     Set the value of the entry identified by KEY in SELF to VALUE or
     add a new entry if no entry with KEY exists yet.  Uses an `eql?'
     test by default or `equal?' if `equal-test?' of SELF is TRUE.

 - Method: remove-at ((self KEY-VALUE-MAP) (key (LIKE (ANY-KEY SELF))))
          :
     Remove the entry identified by KEY from SELF.  Uses an `eql?' test
     by default or `equal?' if `equal-test?' of SELF is TRUE.

 - Method: length ((self KEY-VALUE-MAP)) : INTEGER
     Return the number of entries in SELF.

 - Method: empty? ((self KEY-VALUE-MAP)) : BOOLEAN
     Return TRUE if SELF has zero entries.

 - Method: non-empty? ((self KEY-VALUE-MAP)) : BOOLEAN
     Return TRUE if SELF has at least 1 entry.

 - Method: copy ((self KEY-VALUE-MAP)) : (LIKE SELF)
     Return a copy of the map SELF.  All entries are freshly allocated,
     however, the keys and values of entries are not copied themselves
     (similar to what we do for lists, etc.).

 - Method: clear ((self KEY-VALUE-MAP)) :
     Reset SELF to have zero entries.

 - Method: allocate-iterator ((self KEY-VALUE-MAP)) :
          (DICTIONARY-ITERATOR OF (LIKE (ANY-KEY SELF)) (LIKE
          (ANY-VALUE SELF)))
     Allocate an iterator for SELF.  The only modifying operations
     allowed during iteration are removal of the current element or
     changing its value.  All other removal or insertion operations
     might lead to corruption or undefined results.

 - Method: consify ((self KEY-VALUE-MAP)) : CONS
     Collect all entries of SELF into a cons list of `(<key> <value>)'
     pairs and return the result.

 - Method: object-equal? ((x KEY-VALUE-MAP) (y OBJECT)) : BOOLEAN
     Return TRUE if X and Y represent the same set of key/value pairs.

 - Method: equal-hash-code ((self KEY-VALUE-MAP)) : INTEGER
     Return an `equal?' hash code for SELF.  Note that this is O(N) in
     the number of entries of SELF.


File: manual.info,  Node: Hash Sets,  Next: Iterators,  Prev: Key Value Maps,  Up: Library Functions

Hash Sets
=========

   `HASH-SET' is a full-featured set class that supports `eql?' or
extensible `equal?' equality tests, O(1) insert and `member?'
operations, O(N) `intersection' etc. operations even for large numbers
of entries by using a STELLA hash table, light-weight `KV-CONS'
representation for small sets and iteration even if the set is
represented by a hash table.  The only minor drawback right now is that
we waste one value slot per entry, since we piggy-back off
`KEY-VALUE-MAP''s, however, that wastes at most 25% space.

 - Function: hash-set (&rest (values OBJECT)) : HASH-SET
     Return an `eql?' HASH-SET containing VALUES.

 - Method: member? ((self HASH-SET) (object OBJECT)) : BOOLEAN
     Return TRUE iff OBJECT is a member of the set SELF.  Uses an
     `eql?' test by default or `equal?' if `equal-test?' of SELF is
     TRUE.

 - Method: insert ((self HASH-SET) (value (LIKE (ANY-VALUE SELF)))) :
     Add VALUE to the set SELF unless it is already a member.  Uses an
     `eql?' test by default or `equal?' if `equal-test?' of SELF is
     TRUE.

 - Method: remove ((self HASH-SET) (value (LIKE (ANY-VALUE SELF)))) :
          (LIKE SELF)
     Destructively remove VALUE from the set SELF if it is a member and
     return SELF.  Uses an `eql?' test by default or `equal?' if
     `equal-test?' of SELF is TRUE.

 - Method: remove-if ((self HASH-SET) (test? FUNCTION-CODE)) : (LIKE
          SELF)
     Destructively remove all elements of the set SELF for which TEST?
     evaluates to TRUE.  TEST? takes a single argument of type OBJECT
     and returns TRUE or FALSE.  Returns SELF.

 - Method: pop ((self HASH-SET)) : (LIKE (ANY-VALUE SELF))
     Remove and return an arbitrary element of the set SELF.  Return
     NULL if the set is empty.  Performance note: for large sets
     implemented via hash tables it takes O(N) to empty out the set
     with repeated calls to `pop', since the emptier the table gets,
     the longer it takes to find an element.  Therefore, it is usually
     better to use iteration with embedded removals for such cases.

 - Method: substitute ((self HASH-SET) (new OBJECT) (old OBJECT)) :
          (LIKE SELF)
     Destructively replace OLD with NEW in the set SELF unless NEW is
     already a member.  Uses an `eql?' test by default or `equal?' if
     `equal-test?' of SELF is TRUE.

 - Method: copy ((self HASH-SET)) : (LIKE SELF)
     Return a copy of the set SELF.  All entries are freshly allocated,
     however, the values are not copied themselves (similar to what we
     do for lists, etc.).

 - Method: consify ((self HASH-SET)) : (CONS OF (LIKE (ANY-VALUE SELF)))
     Collect all entries of SELF into a cons list and return the result.

 - Method: subset? ((self HASH-SET) (otherSet HASH-SET)) : BOOLEAN
     Return true if every element of SELF also occurs in OTHERSET.
     Uses an `eql?' test by default or `equal?' if `equal-test?' of
     SELF is TRUE.

 - Method: equivalent-sets? ((self HASH-SET) (otherSet HASH-SET)) :
          BOOLEAN
     Return true if every element of SELF occurs in OTHERSET and vice
     versa.  Uses an `eql?' test by default or `equal?' if
     `equal-test?' of SELF is TRUE.

 - Method: intersection ((self HASH-SET) (otherSet HASH-SET)) : HASH-SET
     Return the set intersection of SELF and OTHERSET as a new set.
     Uses an `eql?' test by default or `equal?' if `equal-test?' of
     SELF is TRUE.

 - Method: union ((self HASH-SET) (otherSet HASH-SET)) : HASH-SET
     Return the set union of SELF and OTHERSET as a new set.  Uses an
     `eql?' test by default or `equal?' if `equal-test?' of SELF is
     TRUE.

 - Method: difference ((self HASH-SET) (otherSet HASH-SET)) : HASH-SET
     Return the set difference of SELF and OTHERSET as a new set (i.e.,
     all elements that are in SELF but not in OTHERSET).  Uses an
     `eql?' test by default or `equal?' if `equal-test?' of SELF is
     TRUE.

 - Method: subtract ((self HASH-SET) (otherSet HASH-SET)) : HASH-SET
     Return the set difference of SELF and OTHERSET by destructively
     removing elements from SELF that also occur in OTHERSET.  Uses an
     `eql?' test by default or `equal?' if `equal-test?' of SELF is
     TRUE.

 - Method: object-equal? ((x HASH-SET) (y OBJECT)) : BOOLEAN
     Return TRUE iff sets X and Y are HASH-SET's with equivalent
     members.  Uses an `eql?' test by default or `equal?' if
     `equal-test?' of `self' is TRUE.  This is equivalent to calling
     `equivalent-sets?'.

 - Method: equal-hash-code ((self HASH-SET)) : INTEGER
     Return an `equal?' hash code for SELF.  Note that this is O(N) in
     the number of elements of SELF.


File: manual.info,  Node: Iterators,  Next: Symbols,  Prev: Hash Sets,  Up: Library Functions

Iterators
=========

 - Method: empty? ((self ITERATOR)) : BOOLEAN
     Return TRUE if the sequence represented by SELF has no elements.
     Side-effect free.

 - Method: member? ((self ITERATOR) (value OBJECT)) : BOOLEAN
     Iterate over values of SELF, returning TRUE if one of them is
     `eql' to 'value.

 - Method: length ((self ABSTRACT-ITERATOR)) : INTEGER
     Iterate over SELF, and count how many items there are.  Bad idea
     if SELF iterates over an infinite collection, since in that case
     it will run forever.'

 - Method: pop ((self ITERATOR)) : (LIKE (ANY-VALUE SELF))
     Return the first item of the sequence represented by SELF, or NULL
     if it is empty.  Destructively uses up the first iteration element.

 - Method: advance ((self ITERATOR) (n INTEGER)) : (LIKE SELF)
     Return SELF after skipping over the first N elements in the
     (remainder of the) iteration.

 - Method: concatenate ((iterator1 ITERATOR) (iterator2 ITERATOR)
          &rest (otherIterators ITERATOR)) : ALL-PURPOSE-ITERATOR
     Return an iterator that first generates all values of ITERATOR1,
     then those of ITERATOR2, and then those of all OTHERITERATORS.
     The generated values can be filtered by supplying a filter
     function to the resulting iterator.

 - Method: consify ((self ITERATOR)) : (CONS OF (LIKE (ANY-VALUE SELF)))
     Return a list of elements generated by SELF.

 - Method: next? ((self ALL-PURPOSE-ITERATOR)) : BOOLEAN
     Apply the stored `next?' function to SELF.


File: manual.info,  Node: Symbols,  Next: Contexts and Modules,  Prev: Iterators,  Up: Library Functions

Symbols
=======

 - Function: lookup-symbol ((name STRING)) : SYMBOL
     Return the first symbol with NAME visible from the current module.

 - Function: intern-symbol ((name STRING)) : SYMBOL
     Return a newly-created or existing symbol with name NAME.

 - Function: unintern-symbol ((self SYMBOL)) :
     Remove SELF from its home module and the symbol table.

 - Function: lookup-symbol-in-module ((name STRING) (module MODULE)
          (local? BOOLEAN)) : SYMBOL
     Return the first symbol with NAME visible from MODULE.  If LOCAL?
     only consider symbols directly interned in MODULE.  If MODULE is
     `null', use `*MODULE*' instead.

 - Function: intern-symbol-in-module ((name STRING) (module MODULE)
          (local? BOOLEAN)) : SYMBOL
     Look for a symbol named NAME in MODULE (if LOCAL? do not consider
     inherited modules).  If none exists, intern it locally in MODULE.
     Return the existing or newly-created symbol.

 - Function: intern-derived-symbol ((baseSymbol GENERALIZED-SYMBOL)
          (newName STRING)) : SYMBOL
     Return a newly-created or existing symbol with name NEWNAME which
     is interned in the same module as BASESYMBOL.

 - Function: visible-symbol? ((self SYMBOL)) : BOOLEAN
     Return `true' if SELF is visible from the current module.

 - Function: lookup-visible-symbols-in-module ((name STRING)
          (module MODULE) (enforceShadowing? BOOLEAN)) : (CONS OF
          SYMBOL)
     Return the list of symbols with NAME visible from MODULE.  More
     specific symbols (relative to the module precedence order defined
     by `visible-modules') come earlier in the list.  If MODULE is
     `null', start from `*MODULE*' instead.  If ENFORCESHADOWING? is
     true, do not return any symbols that are shadowed due to some
     :SHADOW declaration.

 - Function: import-symbol ((symbol SYMBOL) (module MODULE)) : SYMBOL
     Import SYMBOL into MODULE and return the imported SYMBOL.  Signal
     an error if a different symbol with the same name already exists
     locally in MODULE.  Any symbol with the same name visible in
     MODULE by inheritance will be shadowed by the newly imported
     SYMBOL.

 - Function: safe-import-symbol ((symbol SYMBOL) (module MODULE)) :
          SYMBOL
     Safe version of `import-symbol' (which see).  Only imports SYMBOL
     if no symbol with that name is currently interned or visible in
     MODULE.  Returns SYMBOL if it was imported or the conflicting
     symbol in MODULE otherwise.

 - Function: lookup-surrogate ((name STRING)) : SURROGATE
     Return the first surrogate with NAME visible from the current
     module.

 - Function: intern-surrogate ((name STRING)) : SURROGATE
     Return a newly-created or existing surrogate with name NAME.

 - Function: unintern-surrogate ((self SURROGATE)) :
     Remove SELF from its home module and the surrogate table.

 - Function: lookup-surrogate-in-module ((name STRING) (module MODULE)
          (local? BOOLEAN)) : SURROGATE
     Return the first surrogate with NAME visible from MODULE.  If
     LOCAL? only consider surrogates directly interned in MODULE.  If
     MODULE is `null', use `*MODULE*' instead.

 - Function: intern-surrogate-in-module ((name STRING) (module MODULE)
          (local? BOOLEAN)) : SURROGATE
     Look for a symbol named NAME in MODULE (if LOCAL? do not consider
     inherited modules).  If none exists, intern it locally in MODULE.
     Return the existing or newly-created symbol.

 - Function: intern-derived-surrogate ((baseSymbol GENERALIZED-SYMBOL)
          (newName STRING)) : SURROGATE
     Return a newly-created or existing surrogate with name NEWNAME
     which is interned in the same module as BASESYMBOL.

 - Function: visible-surrogate? ((self SURROGATE)) : BOOLEAN
     Return `true' if SELF is visible from the current module.

 - Function: lookup-visible-surrogates-in-module ((name STRING)
          (module MODULE) (enforceShadowing? BOOLEAN)) : (CONS OF
          SURROGATE)
     Return the list of surrogates with NAME visible from MODULE.  More
     specific surrogates (relative to the module precedence order
     defined by `visible-modules') come earlier in the list.  If MODULE
     is `null', start from `*MODULE*' instead.  If ENFORCESHADOWING? is
     true, do not return any surrogates that are shadowed due to some
     :SHADOW declaration.

 - Function: import-surrogate ((surrogate SURROGATE) (module MODULE)) :
          SURROGATE
     Import SURROGATE into MODULE and return the imported SURROGATE.
     Signal an error if a different surrogate with the same name
     already exists locally in MODULE.  Any surrogate with the same
     name visible in MODULE by inheritance will be shadowed by the
     newly imported SURROGATE.

 - Function: safe-import-surrogate ((surrogate SURROGATE)
          (module MODULE)) : SURROGATE
     Safe version of `import-surrogate' (which see).  Only imports
     SURROGATE if no surrogate with that name is currently interned or
     visible in MODULE.  Returns SURROGATE if it was imported or the
     conflicting surrogate in MODULE otherwise.

 - Function: lookup-keyword ((name STRING)) : KEYWORD
     Return the keyword with NAME if it exists.

 - Function: intern-keyword ((name STRING)) : KEYWORD
     Return a newly-created or existing keyword with name NAME.
     Storage note: a COPY of NAME is stored in the keyword

 - Function: gensym ((prefix STRING)) : SYMBOL
     Return a transient symbol with a name beginning with PREFIX and
     ending with a globally gensym'd integer.

 - Function: local-gensym ((prefix STRING)) : SYMBOL
     Not documented.

 - Function: symbol-plist ((symbol SYMBOL)) : CONS
     Return the property list of SYMBOL.  The `symbol-plist' of a
     symbol can be set with `setf'.  IMPORTANT: Property list are
     modified destructively, hence, if you supply it as a whole make
     sure to always supply a modfiable copy, e.g., by using `bquote'.

 - Function: symbol-property ((symbol SYMBOL) (key STANDARD-OBJECT)) :
          OBJECT
     Return the property of SYMBOL whose key is `eq?' to KEY.  Symbol
     properties can be set with `setf'.

 - Function: symbol-value ((symbol SYMBOL)) : OBJECT
     Return the value of SYMBOL.  Note, that this value is not visible
     to code that references a variable with the same name as SYMBOL.
     The `symbol-value' is simply a special property that can always be
     accessed in constant time.  The `symbol-value' of a symbol can be
     changed with `setf'.

 - Function: symbolize ((surrogate SURROGATE)) : SYMBOL
     Convert SURROGATE into a symbol with the same name and module.


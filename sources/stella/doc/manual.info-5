This is manual.info, produced by makeinfo version 4.3 from manual.texi.

   This file documents the STELLA programming language.

   Copyright (C) 2006 University of Southern California, Information
Sciences Institute 4676 Admiralty Way Marina Del Rey, CA 90292

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.


File: manual.info,  Node: Miscellaneous,  Prev: XML Support,  Up: Library Functions

Miscellaneous
=============

   This is a catch-all section for functions and methods that haven't
been categorized yet into any of the previous sections.  They are in
random order and many of them will never be part of the official STELLA
interface.  So beware!

 - Function: operating-system () : KEYWORD
     Not documented.

 - Method on DIMENSIONAL-ARRAY-MIXIN: 1d-aref (self (i INTEGER)) :
          (LIKE (ANY-VALUE SELF))
     Return the element of SELF at position `[i]'.

 - Method on DIMENSIONAL-ARRAY-MIXIN: 1d-aref-address (self
          (i INTEGER)) : INTEGER
     Return the 1D address of the element at position `[i]'.  This is
     useful for fast element-wise iteration that doesn't need
     arithmetic.

 - Method on DIMENSIONAL-ARRAY-MIXIN: 1d-aref-setter (self
          (value (LIKE (ANY-VALUE SELF))) (i INTEGER)) : (LIKE
          (ANY-VALUE SELF))
     Set the element of SELF at position `[i]' to VALUE and return the
     result.

 - Method on 2-DIMENSIONAL-ARRAY-MIXIN: 2d-aref (self (i INTEGER)
          (j INTEGER)) : (LIKE (ANY-VALUE SELF))
     Return the element of SELF at position `[i, j]'.

 - Method on 2-DIMENSIONAL-ARRAY-MIXIN: 2d-aref-address (self
          (i INTEGER) (j INTEGER)) : INTEGER
     Return the 1D address of the element at position `[i, j]'.  This
     is useful for fast element-wise iteration that doesn't need
     arithmetic.

 - Method on 2-DIMENSIONAL-ARRAY-MIXIN: 2d-aref-setter (self
          (value (LIKE (ANY-VALUE SELF))) (i INTEGER) (j INTEGER)) :
          (LIKE (ANY-VALUE SELF))
     Set the element of SELF at position `[i, j]' to VALUE and return
     the result.

 - Method on LONG-INTEGER: abs (x) : LONG-INTEGER
     Return the absolute value of X.

 - Function: activate-demon ((demon DEMON)) :
     Install DEMON in the location(s) specified by its internal
     structure.

 - Method on POLYMORPHIC-RELATION: active? (self) : BOOLEAN
     True if SELF or a superslot of SELF is marked active.

 - Function: add-configuration-property ((property STRING)
          (value OBJECT) (configuration CONFIGURATION-TABLE)) : OBJECT
     Add VALUE to PROPERTY in CONFIGURATION and return it.  If a
     previous value exists add VALUE to the end (listify the old value
     if it is not yet a list).  Otherwise, create a new list containing
     VALUE.  Use the global system configuration table if CONFIGURATION
     is NULL.

 - Function: add-current-date-substitution
          ((substitution-list (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER)))
          :
     Fill in SUBSTITUTION-LIST with date information for the current
     date and time.  See `add-date-substitution' for details.

 - Function: add-date-substitution ((date CALENDAR-DATE)
          (substitution-list (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER)))
          :
     Fill in SUBSTITUTION-LIST with template variable substitions for
     the names YEAR, MONTH, MON, DAY, HOUR, MINUTE, SECOND, TIMEZONE,
     DAY-OF-WEEK, DOW with their values for DATE.  Also, pre-formatted
     DATE, TIME and ISO8601 variables are set.

     TIMEZONE is in the format "{+|-}hhmm".  MONTH is the full English
     month name and MON is the numeric month.  DAY-OF-WEEK is an English
     string and DOW is the first three letters.  Minutes and seconds are
     zero-padded.

     These substitutions can be used with
     `substitute-template-variables-in-string'

 - Function: add-hook ((hookList HOOK-LIST) (hookFunction SYMBOL)) :
     Insert the function named HOOKFUNCTION into HOOKLIST.

 - Command: add-load-path ((path STRING)) : (CONS OF STRING-WRAPPER)
     Append the directories listed in the |-separated PATH to the end
     of the STELLA load path.  Return the resulting load path.

 - Command: add-property-value ((property NAME) (value OBJECT)) :
     Add VALUE to the end of PROPERTYs (a string or symbol) value list
     in the configuration table.  Coerces the current value to a list
     or initializes the list if it is as yet undefined.  Allows
     incremental addition of values to list-valued propertys.  Note
     that PROPERTY is evaluated and will need to be quoted if supplied
     as a symbol.  Symbols will also be upcased if this command is run
     in a non-case-sensitive module.

 - N-Command: add-trace (&rest (keywords GENERALIZED-SYMBOL)) : LIST
     Enable trace messages identified by any of the listed KEYWORDS.
     After calling (`add-trace' <keyword>) code guarded by (`trace-if'
     <keyword> ...)  will be executed when it is encountered.

 - Function: advance-past-whitespace ((source STRING) (start INTEGER))
          : INTEGER
     Returns the first index into SOURCE, starting from START, of the
     first character that is not white space.

 - Function: all-classes ((module MODULE) (local? BOOLEAN)) : (ITERATOR
          OF CLASS)
     Iterate over all classes visible from MODULE.  If LOCAL?, return
     only classes interned in MODULE.  If MODULE is null, return all
     classes interned everywhere.

 - Function: all-contexts () : (ITERATOR OF CONTEXT)
     Return an iterator that generates all contexts.

 - Macro: all-defined? (&body (forms CONS)) : OBJECT
     Evaluate each of the forms in FORMS, and return TRUE if none of
     them are NULL.

 - Function: all-functions ((module MODULE) (local? BOOLEAN)) :
          (ITERATOR OF FUNCTION)
     Iterate over all functions visible from MODULE.  If LOCAL?, return
     only functions bound to symbols interned in MODULE.  If MODULE is
     null, return all functions defined everywhere.

 - Function: all-included-modules ((self MODULE)) : (ITERATOR OF MODULE)
     Generate a sequence of all modules included by SELF, inclusive,
     starting from the highest ancestor and working down to SELF (which
     is last).

 - Function: all-methods ((module MODULE) (local? BOOLEAN)) : (ITERATOR
          OF METHOD-SLOT)
     Iterate over all methods visible from MODULE.  If LOCAL?, return
     only methods interned in MODULE.  If MODULE is null, return all
     methods interned everywhere.

 - Function: all-modules () : (ITERATOR OF MODULE)
     Return an iterator that generates all modules.

 - Function: all-public-functions ((module MODULE) (local? BOOLEAN)) :
          (ITERATOR OF FUNCTION)
     Iterate over all functions visible from MODULE.  If LOCAL?, return
     only functions bound to symbols interned in MODULE.  If MODULE is
     null, return all functions defined everywhere.

 - Function: all-public-methods ((module MODULE) (local? BOOLEAN)) :
          (ITERATOR OF METHOD-SLOT)
     Iterate over all public methods visible from MODULE.  If LOCAL?,
     return only methods interned in MODULE.  If MODULE is null, return
     all methods interned everywhere.

 - Function: all-required-systems ((system-name STRING)) : (CONS OF
          STRING-WRAPPER)
     Returns a CONS of all of the systems required by SYSTEM-NAME

 - Function: all-slots ((module MODULE) (local? BOOLEAN)) : (ITERATOR
          OF SLOT)
     Iterate over all slots visible from MODULE.  If LOCAL?, return
     only methods interned in MODULE.  If MODULE is null, return all
     methods interned everywhere.

 - Function: all-subcontexts ((context CONTEXT) (traversal KEYWORD)) :
          (ALL-PURPOSE-ITERATOR OF CONTEXT)
     Return an iterator that generates all subcontexts of `self' (not
     including `self') in the order specified by TRAVERSAL (one of
     :preorder, :inorder, :postorder or :topdown).

 - Function: all-surrogates ((module MODULE) (local? BOOLEAN)) :
          (ITERATOR OF SURROGATE)
     Iterate over all surrogates visible from MODULE.  If LOCAL?,
     return only surrogates interned in MODULE.  If MODULE is null,
     return all surrogates interned everywhere.

 - Function: all-symbols ((module MODULE) (local? BOOLEAN)) : (ITERATOR
          OF SYMBOL)
     Iterate over all symbols visible from MODULE.  If LOCAL?, return
     only symbols interned in MODULE.  If MODULE is null, return all
     symbols interned everywhere.

 - Function: all-variables ((module MODULE) (local? BOOLEAN)) :
          (ITERATOR OF GLOBAL-VARIABLE)
     Iterate over all variables visible from MODULE.  If LOCAL?, return
     only variables bound to symbols interned in MODULE.  If MODULE is
     null, return all variables defined everywhere.

 - Method on ABSTRACT-ITERATOR: allocate-iterator (self) : (LIKE SELF)
     Iterator objects return themselves when asked for an iterator
     (they occupy the same position as a collection within a `foreach'
     statement).

 - Method on MEMOIZABLE-ITERATOR: allocate-iterator (self) : (ITERATOR
          OF (LIKE (ANY-VALUE SELF)))
     Alias for `clone-memoized-iterator'.

 - Method on STORAGE-SLOT: allocation (self) : KEYWORD
     Return the most specific :allocation facet, or :instance if all
     inherited values are NULL.

 - Function: apply ((code FUNCTION-CODE) (arguments (CONS OF OBJECT)))
          : OBJECT
     Apply CODE to ARGUMENTS, returning a value of type OBJECT.
     Currently limited to at most 10 ARGUMENTS.

 - Function: apply-boolean-method ((code METHOD-CODE)
          (arguments (CONS OF OBJECT))) : BOOLEAN
     Apply CODE to ARGUMENTS, returning a value of type BOOLEAN.

 - Function: apply-float-method ((code METHOD-CODE)
          (arguments (CONS OF OBJECT))) : FLOAT
     Apply CODE to ARGUMENTS, returning a value of type FLOAT.

 - Function: apply-integer-method ((code METHOD-CODE)
          (arguments (CONS OF OBJECT))) : INTEGER
     Apply CODE to ARGUMENTS, returning a value of type INTEGER.

 - Function: apply-long-integer-method ((code METHOD-CODE)
          (arguments (CONS OF OBJECT))) : LONG-INTEGER
     Apply CODE to ARGUMENTS, returning a value of type LONG-INTEGER.

 - Function: apply-method ((code METHOD-CODE)
          (arguments (CONS OF OBJECT))) : OBJECT
     Apply CODE to ARGUMENTS, returning a value of type OBJECT.

 - Function: apply-string-method ((code METHOD-CODE)
          (arguments (CONS OF OBJECT))) : STRING
     Apply CODE to ARGUMENTS, returning a value of type STRING.

 - Function: autoload ((qualifiedName STRING) (systemName STRING)
          (cache SURROGATE) (error? BOOLEAN)) : FUNCTION-CODE
     Autoload function QUALIFIEDNAME from system SYSTEMNAME.  If it is
     already present in the system, simply return its code.  If CACHE
     is defined, return its value if defined, otherwise, set its value
     to the function found.  If the function failed to be defined by
     loading SYSTEMNAME and ERROR? is true, raise an error.  Otherwise,
     simply return NULL.

 - Function: base60-to-float ((l (CONS OF NUMBER-WRAPPER))) : FLOAT
     Converts (x y z) into a float.  The return value is x + y/60 +
     z/3600.  This can be used to convert from Degree-Minute-Second to
     decimal degrees or from Hour-Minute-Second format to decimal hours.

 - Function: blank-string? ((string STRING)) : BOOLEAN
     Return true if STRING is either NULL, empty, or only contains
     white space characters.

 - Function: break-program ((message STRING)) :
     Interrupt the program and print MESSAGE.  Continue after
     confirmation with the user.

 - Command: bump-log-indent () :
     Increase the indentation level for subsequent log messages.

 - Function: byte-array-read-sequence ((buffer TOKENIZER-BYTE-ARRAY)
          (stream INPUT-STREAM) (start INTEGER) (end INTEGER)) : INTEGER
     Read from STREAM filling BUFFER between START and END (depending
     on how many characters are available).  Return the actual end
     pointer to the input read into BUFFER.  EOF is indicated by the
     return value being equal to start.

 - Function: byte-array-write-sequence ((buffer TOKENIZER-BYTE-ARRAY)
          (stream NATIVE-OUTPUT-STREAM) (start INTEGER) (end INTEGER)) :
     Write from BUFFER to STREAM, using data in the buffer starting at
     position START stopping just before END.

 - Method on CALENDAR-DATE: calendar-date-to-date-string (date
          (timezone FLOAT) (numeric-month? BOOLEAN)) : STRING
     Returns the date part of the string representation of DATE
     adjusted for TIMEZONE.  Format is YYYY-MMM-DD, where MMM is a
     three letter English abbreviation of the month if NUMERIC-MONTH?
     is `false' and a two digit numeric value if NUMERIC-MONTH? is
     `true'.  The value `false' is recommended.

 - Method on CALENDAR-DATE: calendar-date-to-iso8601-string (date
          (timezone FLOAT) (include-timezone? BOOLEAN)) : STRING
     Returns an ISO-8601 string representation of DATE adjusted for
     TIMEZONE.  The Format is YYYY-MM-DDThh:mm:ss z:zz.  The timezone
     as an offset hh:mm is included if INCLUDE-TIMEZONE? is `true'.

     Recommended values for the flag is `true'.

 - Method on CALENDAR-DATE: calendar-date-to-string (date
          (timezone FLOAT) (numeric-month? BOOLEAN)
          (include-timezone? BOOLEAN)) : STRING
     Returns a string representation of DATE adjusted for TIMEZONE.
     The Format is YYYY-MMM-DD hh:mm:ss z.z, where MMM is a three letter
     English abbreviation of the month if NUMERIC-MONTH? is `false' and
     a two digit numeric value if NUMERIC-MONTH? is `true'.  The
     timezone as a float offset z.z is included if INCLUDE-TIMEZONE? is
     `true'.

     Recommended values for the flags are `false' and `true'
     respectively.

 - Method on CALENDAR-DATE: calendar-date-to-time-string (date
          (timezone FLOAT) (include-timezone? BOOLEAN)
          (include-millis? BOOLEAN) (pad-hours? BOOLEAN)) : STRING
     Returns the time part of the string representation of DATE
     adjusted for TIMEZONE.  The timezone is included in the string if
     INCLUDE-TIMEZONE? is `true'.  The value `true' is recommended.
     Milliseconds will be included if INCLUDE-MILLIS? is `true'.  Hours
     will be zero-padded to length 2 if PAD-HOURS? is `true'.


 - Command: call-clear-module (&rest (name NAME)) :
     Destroy all objects belonging to module NAME or any of its
     children.  If no NAME is supplied, the current module will be
     cleared after confirming with the user.  Important modules such as
     STELLA are protected against accidental clearing.

 - Function: cast ((value OBJECT) (type TYPE)) : OBJECT
     Perform a run-time type check, and then return VALUE.

 - N-Command: ccc (&rest (name NAME)) : CONTEXT
     Change the current context to the one named NAME.  Return the
     value of the new current context.  If no NAME is supplied, return
     the pre-existing value of the current context.  `cc' is a no-op if
     the context reference cannot be successfully evaluated.  In
     CommonLisp, if the new context is case sensitive, then change the
     readtable case to the value of
     CL-USER::*STELLA-CASE-SENSITIVE-READ-MODE* [default = :INVERT],
     otherwise to :UPCASE.

 - Function: cl-slot-value ((object OBJECT) (slotName STRING)
          (dontConvert? BOOLEAN)) : LISP-CODE
     Lookup slot SLOTNAME on OBJECT and return the lispified slot value
     (see `lispify').  If DONTCONVERT? is TRUE, the returned slot value
     will not be lispified.  Generate a warning if no such slot exists
     on OBJECT.  In a call directly from Lisp SLOTNAME can also be
     supplied as a Lisp symbol.

 - Function: cl-slot-value-setter ((object OBJECT) (slotName STRING)
          (value LISP-CODE) (dontConvert? BOOLEAN)) : LISP-CODE
     Lookup slot SLOTNAME on OBJECT and set its value to the stellafied
     VALUE (see `stellafy').  If DONTCONVERT? is TRUE, VALUE will not
     be stellafied before it gets assigned.  Generate a warning if no
     such slot exists on OBJECT, or if VALUE has the wrong type.  In a
     call directly from Lisp SLOTNAME can also be supplied as a Lisp
     symbol.

 - Function: cl-translate-file ((file FILE-NAME) (relative? BOOLEAN)) :
     Translate a Stella FILE to Common-Lisp.  If RELATIVE?, concatenate
     root directory to FILE.

 - Function: cl-translate-system ((system-name STRING)) :
     Translate a Stella system named SYSTEM-NAME to Common Lisp.

 - Function: cleanup-unfinalized-classes () :
     Remove all finalized classes from `*UNFINALIZED-CLASSES*', and set
     `*NEWLY-UNFINALIZED-CLASSES?*' to `false'.

 - Method on VECTOR-SEQUENCE: clear (self) :
     Clear SELF by setting its active length to zero.

 - Method on HEAP: clear (self) :
     Clear SELF by setting its active length to zero.

 - Function: clear-configuration-property ((property STRING)
          (configuration CONFIGURATION-TABLE)) : OBJECT
     Remove PROPERTY in CONFIGURATION and return the previous value.
     Use the global system configuration table if CONFIGURATION is NULL.

 - Function: clear-recycle-list ((list RECYCLE-LIST)) :
     Reset LIST to its empty state.

 - Function: clear-recycle-lists () :
     Reset all currently active recycle lists to their empty state.

 - Function: clear-system ((name STRING)) :
     Clears out the system definition named NAME.  If NAME is `null',
     then clear out all system definitions.  This function is useful
     when changes have been made to the system definition, and one
     wants to have it reloaded from the standard location in the file
     system.

 - Command: clear-trace () :
     Disable all tracing previously enabled with `add-trace'.

 - Function: clone-memoized-iterator ((self MEMOIZABLE-ITERATOR)) :
          (ITERATOR OF (LIKE (ANY-VALUE SELF)))
     Clone the memoized iterator SELF so it can be used to iterate over
     the collection represented by SELF, while allowing to iterate over
     it multiple times via multiple clones.

 - Macro: clv ((code OBJECT)) : OBJECT
     Convenience macro to splice Lisp expressions into STELLA
     expressions without upsetting the translator during interactive
     sessions.  If CODE is a currently bound Lisp variable, this tries
     to infer the type of the resulting expression from the object CODE
     is bound to and generates an appropriate cast.  `clv' stands for
     Common-Lisp Value or Verbatim.

 - Macro: coerce-&rest-to-cons ((restVariable SYMBOL)) : OBJECT
     Coerce the argument list variable RESTVARIABLE into a CONS list
     containing all its elements (uses argument list iteration to do
     so).  If RESTVARIABLE already is a CONS due to argument
     listification, this is a no-op.

 - Function: coerce-option-value ((value OBJECT) (type TYPE)) : OBJECT
     Coerce VALUE to TYPE.  Return NULL if not possible.

 - Function: coerce-to-boolean ((object OBJECT)) : BOOLEAN-WRAPPER
     Return the boolean object represented by OBJECT.  Return NULL if
     coercion is not possible.

 - Function: coerce-to-float ((object OBJECT)) : FLOAT
     Coerce `number' to a float value or NULL if not possible.

 - Function: coerce-to-hash-set ((self OBJECT) (equalTest? BOOLEAN)) :
          HASH-SET
     Coerce the collection SELF into a HASH-SET.  Use an equal test if
     EQUALTEST? is TRUE (EQUALTEST? will be ignored if SELF already is
     a HASH-SET).

 - Function: coerce-to-string ((object OBJECT)) : STRING
     Coerce OBJECT into a string.  If no standard coercion is possible,
     simply stringify OBJECT.

 - Function: coerce-to-symbol ((name NAME)) : GENERALIZED-SYMBOL
     Return the (generalized) symbol represented by NAME.  Return
     `null' if NAME is undefined or does not represent a string.

 - Function: coerce-value-to-boolean ((value OBJECT) (error? BOOLEAN))
          : BOOLEAN-WRAPPER
     Return the boolean object represented by VALUE.  Return NULL if
     coercion is not possible or raise an error if ERROR? is TRUE.

 - Function: coerce-value-to-float ((value OBJECT) (error? BOOLEAN)) :
          FLOAT
     Coerce VALUE to a float value if possible, return NULL otherwise
     or raise an error if ERROR? is true.

 - Function: coerce-value-to-string ((value OBJECT) (error? BOOLEAN)) :
          STRING
     Coerce VALUE into a string if possible, return NULL otherwise or
     raise an error if ERROR? is true.

 - Function: coerce-value-to-type ((value OBJECT) (type TYPE)
          (error? BOOLEAN)) : OBJECT
     Coerce VALUE to TYPE.  Return NULL if not possible or raise an
     error if ERROR? is TRUE.

 - Macro: collect (&body (body CONS)) : OBJECT
     Use a VRLET to collect values.  Input can have one of the
     following forms:

            (collect <var> in <expression> [where <test> <var>])
            (collect <collect-expression>
                     foreach <var> in <expression>
                     {as ...}*
                     [where <test> <var>]
                     [do ...])

     The second form really accepts an arbitrary `foreach' expression
     following the `foreach' keyword.

 - Method on SLOT: collection-valued? (self) : BOOLEAN
     True if slot values are collections.

 - Function: command? ((method METHOD-SLOT)) : BOOLEAN
     Return `true' if METHOD is an evaluable command.

 - Method on STORAGE-SLOT: component? (self) : BOOLEAN
     True if fillers of this slot are components of the owner slot, and
     therefore should be deleted if the owner is deleted.

 - Function: compose-namestring
          ((name-components (CONS OF STRING-WRAPPER))
          &rest (options OBJECT)) : STRING
     NAME-COMPONENTS is a cons to be processed into a namestring.
     `:prefix' and `:suffix' are strings that will NOT be
     case-converted.  `:case' is one of :UPCASE :TitleCase :titleCaseX
     :downcase :Capitalize         default is :TitleCase `:separator'
     is a string that should separate word elements.  It does not
     separate the prefix or suffix.  Default is ""
     `:translation-table' should be a STRING-HASH-TABLE hash table that
     strings into their        desired printed representation as a
     string.  In general the argument        will be strings, but that
     is not strictly necessary.


 - Function: compose-namestring-full
          ((strings (CONS OF STRING-WRAPPER)) (prefix STRING)
          (suffix STRING) (outputcase KEYWORD) (outputseparator STRING)
          (translationtable STRING-HASH-TABLE)
          (useacronymheuristics? BOOLEAN)) : STRING
     Non-keyword version of `compose-namestring', which will probably be
     easier to use when called from non-Lisp languages.

 - Function: compute-module-and-bare-name ((name STRING)) : MODULE
          STRING
     Compute the module indicated by the STELLA name NAME and return
     it.  Return the bare symbol name as the second value.  NAME does
     not necessarily have to be qualified in which case the current
     module is returned.  NAME is assumed to be the printed
     representation of a STELLA symbol, surrogate or keyword.

 - Function: config-file-option-handler ((option CMD-LINE-OPTION)
          (value OBJECT)) :
     Load the configuration file VALUE.  This will modify currently set
     system properties defined in VALUE with new values but leave all
     other currently set properties as they are.

 - Function: configure-stella ((file FILE-NAME)) :
     Perform STELLA run-time configuration.  If supplied, load the
     configuration file FILE first which should be supplied with a
     physical pathname.

 - Method on OBJECT: consify (self) : CONS
     If `object' is a CONS, return it.  Otherwise, return a singleton
     cons list containing it.

 - Function: consify-command-line-arguments ((count INTEGER)
          (arguments (ARRAY () OF STRING))) : (CONS OF STRING-WRAPPER)
     Convert COUNT command line ARGUMENTS into a CONS list.

 - Macro: continuable-error (&body (body CONS)) : OBJECT
     Signal error message, placing non-string arguments in quotes.

 - Method on VECTOR-SEQUENCE: copy (self) : (VECTOR-SEQUENCE OF (LIKE
          (ANY-VALUE SELF)))
     Return a copy of the vector sequence SELF.

 - Method on CUSTOM-VECTOR-SEQUENCE: copy (self) :
          (CUSTOM-VECTOR-SEQUENCE OF (LIKE (ANY-VALUE SELF)))
     Return a copy of the vector sequence SELF.

 - Function: copy-stream-to-stream ((in INPUT-STREAM)
          (out OUTPUT-STREAM)) :
     Copy IN verbatimely to OUT.  Does the right thing for binary data.

 - Function: cpp-translate-system ((systemName STRING)) :
     Translate the system SYSTEMNAME to C++.

 - N-Command: cpptrans ((statement OBJECT)) :
     Translate STATEMENT to C++ and print the result.

 - Function: create-derived-list ((self LIST)) : LIST
     Create a new list object with the same type as SELF.

 - Function: create-object ((type TYPE)
          &rest (initial-value-pairs OBJECT)) : OBJECT
     Funcallable version of the `new' operator.  Return an instance of
     the class named by TYPE.  If INITIAL-VALUE-PAIRS is supplied, it
     has to be a key/value list similar to what's accepted by `new' and
     the named slots will be initialized with the supplied values.
     Similar to `new', all required arguments for TYPE must be
     included.  Since all the slot initialization, etc. is handled
     dynamically at run time, `create-object' is much slower than
     `new'; therefore, it should only be used if TYPE cannot be known
     at translation time.

 - Function: deactivate-demon ((demon DEMON)) :
     Detach DEMON from the location(s) specified by its internal
     structure.

 - Method on DECODED-DATE-TIME: decoded-date-time-to-iso8601-string
          (date) : STRING
     Returns an ISO-8601 string representation of DATE The Format is
     YYYY-MM-DDThh:mm:ss+zz:zz, with the string stopping at when a null
     value is first encountered.  The time zone will only be included
     (if present) if a time value is given.

 - Function: decompose-namestring ((namestring STRING)
          &rest (options OBJECT)) : (CONS OF STRING-WRAPPER)
     Keyword options:   :break-on-cap    one of  :YES :NO :CLEVER
      default is :CLEVER   :break-on-number one of  :YES :NO :CLEVER
          default is :CLEVER   :break-on-separators string
              default is "-_ "

     DECOMPOSE-NAMESTRING returns a cons of STRING-WRAPPERS that are
     the decomposition of the input STRING.  The arguments are used as
     follows:   NAMESTRING       is the input string.    :break-on-cap
      is a keyword controlling whether changes in capitalization is
     used                    to indicate word boundaries.  If :YES,
     then all capitalization                    changes delineate
     words.  If :CLEVER, then unbroken runs of
     capitalized letters are treated as acronyms and remain grouped.
                     If :NO or NULL, there is no breaking of words
     based on capitalization.    :break-on-number is a flag controlling
     whether encountering a number indicates                    a word
     boundary.  If :YES, then each run of numbers is treated as 		   a
     word separate from surrounding words.  If :CLEVER, then an
     attempt is made to recognize ordinal numbers (ie, 101st) and
     treat them as separate words.  If :NO or NULL, there is no breaking
                       of words when numbers are encountered.
     :break-on-separators   A string of characters which constitute
     word delimiters in                          the input word.  This
     is used to determine how to break                    the name into
     individual words.  Defaults are space, `-' and `_'.

 - Function: decompose-namestring-full ((namestring STRING)
          (break-on-cap KEYWORD) (break-on-number KEYWORD)
          (break-on-separators STRING)) : (CONS OF STRING-WRAPPER)
     Non-keyword version of `decompose-namestring', which will probably
     be easier to use when called from non-Lisp languages.

 - Function: default-cmd-line-option-handler ((option CMD-LINE-OPTION)
          (value OBJECT)) :
     Default handler that tries to set a system property based on
     OPTION and VALUE.

 - Method on STORAGE-SLOT: default-form (self) : OBJECT
     Returns the current value of default expression when the slot has
     not been assigned a value.

 - Macro: defdemon ((name STRING-WRAPPER) (parameterstree CONS)
          &body (optionsandbody CONS)) : OBJECT
     Define a demon NAME and attach it to a class or slot.

 - Function: define-demon ((name STRING) &rest (options OBJECT)) : DEMON
     Define a class or slot demon.  Options are :create, :destroy,
     :class, :slot, :guard?, :code, :method, :inherit?, and
     :documentation.

 - Function: define-logical-host-property ((host STRING)
          (property KEYWORD) (value OBJECT)) :
     Define PROPERTY with VALUE for the logical host HOST.  As a
     side-effect, this also defines HOST as a logical host (both
     PROPERTY and VALUE can be supplied as NULL).  If :ROOT-DIRECTORY
     is specified, all pathnames with HOST are assumed to be relative to
     that directory (even if they are absolute) and will be rerooted
     upon translation.  :ROOT-DIRECTORY can be a logical or physical
     pathname.  If :LISP-TRANSLATIONS is specified, those will be used
     verbatimely as the value of `(CL:logical-pathname-translations
     host)' if we are running in Lisp, which allows us to depend on the
     native `CL:translate-logical-pathname' for more complex
     translation operations.

 - Function: define-module ((name STRING) (options CONS)) : MODULE
     Define or redefine a module named NAME having the options OPTIONS.
     Return the new module.

 - Function: define-stella-class ((name TYPE) (supers (LIST OF TYPE))
          (slots (LIST OF SLOT)) (options KEYWORD-KEY-VALUE-LIST)) :
          CLASS
     Return a Stella class with name NAME.  Caution:  If the class
     already exists, the Stella class object gets redefined, but the
     native C++ class is not redefined.

 - Function: define-stella-method-slot ((inputname SYMBOL)
          (returntypes CONS) (function? BOOLEAN) (inputParameters CONS)
          (options KEYWORD-KEY-VALUE-LIST)) : METHOD-SLOT
     Define a new Stella method object (a slot), and attach it to the
     class identified by the first parameter in INPUTPARAMETERS.

 - Method on LONG-INTEGER: defined? (x) : BOOLEAN
     Return true if X is defined (handled specially by all translators).

 - Method on ARRAY: defined? (x) : BOOLEAN
     Return true if X is defined (handled specially by all translators).

 - Macro: defmain ((varList CONS) &body (body CONS)) : OBJECT
     Defines a function called MAIN which will have the appropriate
     signature for the target translation language.  The signature will
     be:   C++:   public static int main (int v1, char** v2) {<body>}
     Java:  public static void main (String [] v2) {<body>}   Lisp:
     (defun main (&rest args) <body>) The argument VARLIST must have
     two symbols, which will be the names for the INTEGER argument
     count and an array of STRINGs with the argument values.  It can
     also be empty to indicate that no command line arguments will be
     handled.  The startup function for the containing system will
     automatically be called before BODY is executed unless the option
     :STARTUP-SYSTEM? was supplied as FALSE.  There can only be one
     DEFMAIN per module.

 - N-Command: defsystem ((name SYMBOL) &rest (options OBJECT)) :
          SYSTEM-DEFINITION
     Define a system of files that collectively define a Stella
     application.     Required options are:    :directory - the
     relative path from the respective source/native/binary root
     directory                  to the directory containing the system
     files.  Can be a string or a list                  of strings (do
     not include directory separators).     :files - a list of files in
     the system, containing strings and lists              of strings;
     the latter defines exploded paths to files              in
     subdirectories.     Optional options are:    :data-files       - a
     list of files like the :files keyword, which contain
              data or other content that should not be processed, but
                           instead copied verbatim to the native
     directory    :required-systems - a list of systems (strings) that
     should be loaded                         prior to loading this
     system.     :cardinal-module - the name (a string) of the
     principal module for this                        system.
     :copyright-header - string with a header for inclusion into all
     translated                         files produced by Stella.
     :lisp-only-files  - Like the :files keyword, but these are only
     included    :cpp-only-files      in the translation for the
     specific language, namely    :java-only-files     Common Lisp, C++
     or Java

 - Method on OBJECT: deleted? (self) : BOOLEAN
     Default `deleted?' method which always returns FALSE.  Objects
     that inherit DYNAMIC-SLOTS-MIXIN also inherit the
     dynamically-allocated slot `deleted-object?' which is
     read/writable with specializations of this method.

 - N-Command: describe ((name OBJECT) &rest (mode OBJECT)) :
     Print a description of an object in :verbose, :terse, or :source
     modes.

 - Method on OBJECT: describe-object (self (stream OUTPUT-STREAM)
          (mode KEYWORD)) :
     Prints a description of SELF to stream STREAM.  MODE can be
     :terse, :verbose, or :source.  The :terse mode is often equivalent
     to the standard print function.

 - Method on CLASS: destroy-class (self) :
     Destroy the Stella class SELF.  Unfinalize its subclasses (if it
     has any).

 - Function: destroy-class-and-subclasses ((self CLASS)) :
     Destroy the Stella class SELF and all its subclasses.

 - Function: destructure-defmethod-tree ((method-tree CONS)
          (options-table KEY-VALUE-LIST)) : OBJECT CONS CONS
     Return three parse trees representing the name, parameters, and
     code body of the parse tree METHOD-TREE.  Fill OPTIONS-TABLE with
     a dictionary of method options.  Storage note:  Options are
     treated specially because the other return values are subtrees of
     METHOD-TREE, while OPTIONS-TABLE is a newly-created cons tree.
     Note also, the parameter and body trees are destructively removed
     from METHOD-TREE.

 - Function: dictionary ((collectionType TYPE)
          &rest (alternatingkeysandvalues OBJECT)) :
          (ABSTRACT-DICTIONARY OF OBJECT OBJECT)
     Return a dictionary of COLLECTIONTYPE containing `values', in
     order.  Currently supported COLLECTIONTYPEs are @HASH-TABLE,
     @STELLA-HASH-TABLE, @KEY-VALUE-LIST, @KEY-VALUE-MAP and
     @PROPERTY-LIST.

 - Method on CLASS: direct-super-classes (self) : (ITERATOR OF CLASS)
     Returns an iterator that generates all direct super classes of
     SELF.

 - Command: disable-memoization () :
     Enable memoization and use of memoized expression results.

 - Function: disabled-stella-feature? ((feature KEYWORD)) : BOOLEAN
     Return true if the STELLA FEATURE is currently disabled.

 - Method on INTEGER: div (x (y INTEGER)) : INTEGER
     Return the integer quotient from dividing X by Y.

 - Method on LONG-INTEGER: div (x (y LONG-INTEGER)) : LONG-INTEGER
     Return the integer quotient from dividing X by Y.

 - Function: drop-hook ((hookList HOOK-LIST) (hookFunction SYMBOL)) :
     Remove the function named HOOKFUNCTION from HOOKLIST.

 - Command: drop-load-path ((path STRING)) : (CONS OF STRING-WRAPPER)
     Remove the directories listed in the |-separated PATH from the
     PowerLoom load path.

 - N-Command: drop-trace (&rest (keywords GENERALIZED-SYMBOL)) : LIST
     Disable trace messages identified by any of the listed KEYWORDS.
     After calling (`drop-trace' <keyword>) code guarded by (`trace-if'
     <keyword> ...)  will not be executed when it is encountered.

 - Macro: either ((value1 OBJECT) (value2 OBJECT)) : OBJECT
     If VALUE1 is defined, return that, else return VALUE2.

 - Method on STRING-WRAPPER: empty? (x) : BOOLEAN
     Return true if X is the wrapped empty string ""

 - Method on VECTOR-SEQUENCE: empty? (self) : BOOLEAN
     Return `true' if SELF has length 0.

 - Method on HEAP: empty? (self) : BOOLEAN
     Return TRUE if SELF is empty.

 - Command: enable-memoization () :
     Enable memoization and use of memoized expression results.

 - Function: enabled-stella-feature? ((feature KEYWORD)) : BOOLEAN
     Return true if the STELLA FEATURE is currently enabled.

 - Function: ends-with? ((string STRING) (suffix STRING) (end INTEGER))
          : BOOLEAN
     Return TRUE if the substring of STRING ending at END ends with
     SUFFIX.  If END is NULL it defaults to the length of STRING.

 - Function: ensure-file-does-not-exist ((filename STRING)
          (context STRING)) :
     Ensures that FILENAME does not exist.  If it does, an exception of
     type `FILE-ALREADY-EXISTS-EXCEPTION' is thrown with CONTEXT
     supplying context for the error message.

 - Function: ensure-file-exists ((filename STRING) (context STRING)) :
     Ensures that FILENAME exists.  If not, an exception of type
     `NO-SUCH-FILE-EXCEPTION' is thrown with CONTEXT supplying context
     for the error message.

 - Function: eql-except-in-whitespace? ((s1 STRING) (s2 STRING)) :
          BOOLEAN
     Return `true' if the strings S1 and S2 are the same except for the
     amounts of whitespace separating words.  Leading or trailing
     whitespace is also not considered.

 - Macro: error (&body (body CONS)) : OBJECT
     Signal error message, placing non-string arguments in quotes.

 - Function: eval-in-module-option-handler ((option CMD-LINE-OPTION)
          (value OBJECT)) :
     Interpret an -eval-in-module option.  VALUE is expected to be of
     the form `(<module-name> <s-expression>)'.

 - Function: eval-option-handler ((option CMD-LINE-OPTION)
          (value OBJECT)) :
     Interpret an -eval option by evaluating VALUE.

 - Command: evaluate ((expression OBJECT)) : OBJECT
     Evaluate the expression EXPRESSION and return the result.
     Currently, only the evaluation of (possibly nested) commands and
     global variables is supported.  The second return value indicates
     the actual type of the result (which might have been wrapped), and
     the third return value indicates whether an error occurred during
     the evaluation.  Expressions are simple to program in Common Lisp,
     since they are built into the language, and relatively awkward in
     Java and C++.  Users of either of those languages are more likely
     to want to call `evaluate-string'.

 - Function: evaluate-string ((expression STRING)) : OBJECT
     Evaluate the expression represented by EXPRESSION and return the
     result.  This is equivalent to `(evaluate (unstringify
     expression))'.

 - Method on INTEGER: even? (x) : BOOLEAN
     Return true if X is an even number.

 - Method on LONG-INTEGER: even? (x) : BOOLEAN
     Return true if X is an even number.

 - Function: exception-message ((e NATIVE-EXCEPTION)) : STRING
     Accesses the error message of the exception E.

 - Method on CLASS: extension (self) : CLASS-EXTENSION
     Return the nearest class extension that records instances of the
     class SELF.

 - Function: external-id-head? ((attribute OBJECT)) : BOOLEAN
     Checks to see if this ATTRIBUTE is the literal marking either a
     PUBLIC or SYSTEM literal for an XML Elternal ID.  (See 4.2.2)

 - Method on HEAP: fast-heap-root (self) : (LIKE (ANY-VALUE SELF))
     Return the root of SELF which is assumed to be non-empty.

 - Function: fill-in-date-substitution
          ((substitution-list (KEY-VALUE-LIST OF STRING-WRAPPER STRING-WRAPPER)))
          :
     Fill in SUBSTITUTION-LIST with template variable substitions for
     the names YEAR and DATE which correspond to the current year and
     date.  These substitutions can then be used with
     `substitute-template-variables-in-string' DEPRECATED.  Use
     `add-date-subsitution' or `add-current-date-substitution' instead.

 - Function: finalize-classes () :
     Finalize all currently unfinalized classes.

 - Function: finalize-classes-and-slots () :
     Finalize all currently unfinalized classes and slots.

 - Function: finalize-slots () :
     Finalize all currently unfinalized slots.

 - Function: find-file-in-load-path ((file STRING)
          (extensions (CONS OF STRING-WRAPPER))) : STRING
     Try to find FILE in the current load path and, if found, return
     its full name.  If FILE can't be found literally, try to find it
     with any of the listed EXTENSIONS added.  If EXTENSIONS is NULL it
     defaults to `*stella-file-extensions*', therefore, to not default
     to any extensions the value has to be supplied as NIL.

 - Function: find-matching-prefix-length ((string1 STRING)
          (start1 INTEGER) (end1 INTEGER) (string2 STRING)
          (start2 INTEGER) (end2 INTEGER)) : INTEGER
     Finds the length of the matching prefix strings of STRING1 and
     STRING2, starting at position START1 and START2 respectively.  The
     search will end when END1 or END2 is reached.  If either END1 or
     END2 is null, then they will be set to the length of their
     respective strings.

 - Function: find-mismatch ((string1 STRING) (start1 INTEGER)
          (end1 INTEGER) (string2 STRING) (start2 INTEGER)
          (end2 INTEGER)) : INTEGER INTEGER
     Finds the first position in each of STRING1 and STRING2 where they
     mismatch, starting at position START1 and START2 respectively.
     The search will end when END1 or END2 is reached.  If either END1
     or END2 is null, then they will be set to the length of their
     respective strings.  If there is no mismatch, then `null' values
     are returned.

 - Macro: first-defined (&body (forms CONS)) : OBJECT
     Return the result of the first form in FORMS whose value is defined
     or NULL otherwise.

 - Function: float-to-base60 ((x FLOAT) (all-integers? BOOLEAN)) :
          (CONS OF NUMBER-WRAPPER)
     Returns a cons of X in a base-60 form.  That means the first value
     will be the integer part of X, the next value the iteger value of
     the fraction part of X times 60 and the third value the fraction
     part of X time 3600.  If ALL-INTEGERS?  is `true', then the last
     value will be rounded to an integer.  This can be used to convert
     from decimal degree values to Degree-Minute-Second or from decimal
     hours to Hour-Minute-Second format.

 - Function: fmod ((x FLOAT) (modulus FLOAT)) : FLOAT
     True modulus for floats.  Return the result of X mod `modulo'.
     Note: In C++ and Java, `mod' has more overhead than the similar
     function `rem'.  The  answers returned by `mod' and `rem' are only
     different when the signs of X and `modulo' are different.

 - Function: format-with-padding ((input STRING) (length INTEGER)
          (padchar CHARACTER) (align KEYWORD) (truncate? BOOLEAN)) :
          STRING
     Formats INPUT to be (at least) LENGTH long, using PADCHAR to fill
     if necessary.  ALIGN must be one of :LEFT, :RIGHT, :CENTER and
     will control how INPUT will be justified in the resulting string.
     If TRUNCATE? is true, then then an overlength string will be
     truncated, using the opposite of ALIGN to pick the truncation
     direction.

 - Method on ACTIVE-OBJECT: free (self) :
     Remove all pointers between SELF and other objects, and then
     deallocate the storage for self.

 - Method on OBJECT: free (self) :
     Default method.  Deallocate storage for SELF.

 - Method on ABSTRACT-HASH-TABLE: free-hash-table-values (self) :
     Call free on each value in the hash table SELF.

 - Function: frem ((x FLOAT) (y FLOAT)) : FLOAT
     Return the floating point remainder from dividing X by Y.  The
     sign of the result is always the same as the sign of X.  This has
     slightly different behavior than the `mod' function, and has less
     overhead in C++ and Java, which don't have direct support for a
     true modulus function.

 - Function: generate-random-uuid () : STRING
     Generates a random UUID (Type 4), according to the guidelines of
     IETF RFC 4122 (see http://www.ietf.org/rfc/rfc4122.txt )

     Take 16 random bytes (octets), put them all behind each other, for
     the description the numbering starts with byte 1 (most
     significant, first) to byte 16    (least significant, last). Then
     put in the version and variant.  To put in the version, take the
     7th byte and perform an and operation using 0x0f,    followed by
     an or operation with 0x40.  To put in the variant, take the 9th
     byte and perform an and operation using 0x3f,    followed by an or
     operation with 0x80.  To make the string representation, take the
     hexadecimal presentation of bytes 1-4    (without 0x in front of
     it) let them follow by a -, then take bytes 5 and 6, - bytes 7 and
     8, - bytes 9 and 10, - then followed by bytes 11-16.

 - Function: generate-uuid ((uuid-type KEYWORD)) : STRING
     Generates a UUID of the specified type.  Legal types are a subset
     of the IETF RFC 4122 (see http://www.ietf.org/rfc/rfc4122.txt )
     UUID types.  Currently supported are:     :TYPE-4  :RANDOM       A
     type-4 (random) UUID.  These are synonyms.

 - Method on CALENDAR-DATE: get-calendar-date (date (timezone FLOAT)) :
          INTEGER INTEGER INTEGER KEYWORD
     Returns multiple values of year, month, day and day of week for
     DATE in TIMEZONE.  TIMEZONE is the number of hours added to UTC to
     get local time.  It is in the range -12.0 to +14.0 where UTC is
     zone 0.0

 - Function: get-global-value ((self SURROGATE)) : OBJECT
     Return the (possibly-wrapped) value of the global variable for the
     surrogate SELF.

 - Command: get-load-path () : (CONS OF STRING-WRAPPER)
     Return the current STELLA load path.

 - Function: get-local-standard-time-zone () : FLOAT
     Returns the standard time zone offset from UTC as a float, without
     considering the effects of daylight savings time.

 - Function: get-local-time-zone-for-date ((year INTEGER)
          (month INTEGER) (day INTEGER) (hour INTEGER) (minute INTEGER)
          (second INTEGER)) : FLOAT
     Returns the time zone offset from UTC (as a float) that is
     applicable to the given date.  Assumes that the date is one that
     is valid for the underlying programming language.  If not, then
     returns 0.0

 - Function: get-log-stream ((module STRING)) : OUTPUT-STREAM
     Return a valid log stream for MODULE.

 - Command: get-property ((property NAME) &rest (defaultValue OBJECT))
          : OBJECT
     Lookup PROPERTY (a string or symbol) in the configuration table
     and return its value.  If it is undefined, return the optional
     DEFAULTVALUE.  Note that PROPERTY is evaluated and will need to be
     quoted if supplied as a symbol.  Symbols will also be upcased if
     this command is run in a non-case- sensitive module.

 - Function: get-quoted-tree ((tree-name STRING) (modulename STRING)) :
          CONS
     Return the quoted tree with name TREE-NAME.

 - Function: get-slot ((self STANDARD-OBJECT) (slot-name SYMBOL)) : SLOT
     Return the slot named SLOT-NAME on the class representing the type
     of SELF.

 - Method on SURROGATE: get-stella-class (class-name (error? BOOLEAN))
          : CLASS
     Return a class with name CLASS-NAME.  If none exists, break if
     ERROR?, else return `null'.

 - Method on SYMBOL: get-stella-class (class-name (error? BOOLEAN)) :
          CLASS
     Return a class with name CLASS-NAME.  If non exists, break if
     ERROR?, else return `null'.

 - Method on STRING: get-stella-class (class-name (error? BOOLEAN)) :
          CLASS
     Return a class with name CLASS-NAME.  If none exists, break if
     ERROR?, else return `null'.

 - Method on CALENDAR-DATE: get-time (date (timezone FLOAT)) : INTEGER
          INTEGER INTEGER INTEGER
     Returns multiple values of hours, minutes, seconds, milliseconds
     for the calendar date DATE in TIMEZONE.  TIMEZONE is the number of
     hours added to UTC to get local time.  It is in the range -12.0 to
     +14.0 where UTC is zone 0.0

 - Macro: get-token-float () : OBJECT
     User-level macro to access the most recently parsed token as a
     float.  This assumes correct signed float syntax and only checks
     for overflows.  The main benefit for this is that it doesn't
     generate strings and wrappers.  Float parsing and conversion is
     generally hairy and we are probably not covering all special cases
     here; but we are fast :-)

 - Macro: get-token-integer () : OBJECT
     User-level macro to access the most recently parsed token as an
     integer.  This assumes correct signed integer syntax and only
     checks for overflows.

 - Macro: get-token-long-integer () : OBJECT
     User-level macro to access the most recently parsed token as a
     long integer.  This assumes correct signed long-integer syntax and
     only checks for overflows.

 - Function: get-xml-base-attribute-value ((expression CONS)) : STRING
     Return the last base url attribute in the attribute list of this
     element if it exists.  Otherwise NULL.

 - Function: global-variable-type-spec ((global GLOBAL-VARIABLE)) :
          TYPE-SPEC
     Return the type spec for the global variable GLOBAL.

 - Function: hash-string ((string STRING) (seedCode INTEGER)) : INTEGER
     Generate a hash-code for STRING and return it.  Two strings that
     are equal but not eq will generate the same code.  The hash-code
     is based on SEEDCODE which usually will be 0.  However, SEEDCODE
     can also be used to supply the result of a previous hash operation
     to achieve hashing on sequences of strings without actually having
     to concatenate them.

 - Method on HEAP: heap-root (self) : (LIKE (ANY-VALUE SELF))
     Return the root of SELF (NULL if SELF is empty).

 - Method on HEAP: heapify (self) :
     Restore the heap property of SELF according to its `predicate'.
     Normally, this is not needed, since insert operations preserve the
     heap property.  However, this can be useful after bulk insertion
     of values or if `predicate' has been changed.

 - Function: help-advance-past-whitespace ((source STRING)
          (start INTEGER) (end INTEGER)) : INTEGER
     Helper for `advance-past-whitespace' that requires END to be
     properly set.

 - Function: help-find-matching-prefix-length ((string1 STRING)
          (start1 INTEGER) (end1 INTEGER) (string2 STRING)
          (start2 INTEGER) (end2 INTEGER)) : INTEGER
     Helping function for `find-matching-prefix' that requires END1 and
     END2 to be properly set up.

 - Function: help-get-stella-module ((pathName STRING)
          (error? BOOLEAN)) : MODULE
     Return the module located at PATHNAME, or `null' if no such module
     exists.  The search looks at ancestors and top-most  (cardinal)
     modules.  If ERROR? is `true', throw an exception if no  module is
     found.

 - Function: help-option-handler ((option CMD-LINE-OPTION)
          (value OBJECT)) :
     Print documentation about all currently registered option handlers.

 - Method on CLASS: help-print-outline (top (stream OUTPUT-STREAM)
          (current-depth INTEGER) (depth INTEGER) (named? BOOLEAN)) :
     Helper method for `print-outline'

 - Method on MODULE: help-print-outline (top (stream OUTPUT-STREAM)
          (current-depth INTEGER) (depth INTEGER) (named? BOOLEAN)) :
     Helper method for `print-outline'

 - Method on OBJECT: help-print-outline (top (stream OUTPUT-STREAM)
          (current-depth INTEGER) (depth INTEGER) (named? BOOLEAN)) :
     Helper method for `print-outline'

 - Method on SLOT: help-print-outline (top (stream OUTPUT-STREAM)
          (current-depth INTEGER) (depth INTEGER) (named? BOOLEAN)) :
     Helper method for `print-outline'

 - Method on CONTEXT: help-print-outline (top (stream OUTPUT-STREAM)
          (current-depth INTEGER) (depth INTEGER) (named? BOOLEAN)) :
     Helper method for `print-outline'

 - Method on OBJECT: home-module (self) : MODULE
     Return the home module of SELF.

 - Macro: if-output-language ((language KEYWORD) (thenForm OBJECT)
          (elseForm OBJECT)) : OBJECT
     Expand to THENFORM if the current translator output language
     equals LANGUAGE.  Otherwise, expand to ELSEFORM.  This can be used
     to conditionally translate Stella code.

 - Macro: if-stella-feature ((feature KEYWORD) (thenForm OBJECT)
          (elseForm OBJECT)) : OBJECT
     Expand to THENFORM if FEATURE is a currently enabled STELLA
     environment feature.  Otherwise, expand to ELSEFORM.  This can be
     used to conditionally translate Stella code.

 - Macro: ignore (&body (variables CONS)) : OBJECT
     Ignore unused VARIABLES with NoOp `setq' statements.

 - Function: incrementally-translate ((tree OBJECT)) : OBJECT
     Translate a single Stella expression TREE and return the result.
     For C++ and Java print the translation to standard output and
     return NIL instead.

 - Function: indent-outline ((current-depth INTEGER)
          (stream OUTPUT-STREAM)) :
     Helper function that indents outline printings for level
     CURRENT-DEPTH on STREAM using the value of the global variable
     `*OUTLINE-INDENT-STRING*'

 - Macro: inform (&body (body CONS)) : OBJECT
     Print informative message, placing non-string arguments in quotes,
     and terminating with a newline.

 - Method on CLASS: initial-value (self) : OBJECT
     Return an initial value for the class SELF.

 - Method on STORAGE-SLOT: initial-value (self) : OBJECT
     Return an initial value for SELF, or `null'.  The initial value
     can be defined by the slot itself, inherited from an equivalent
     slot, or inherit from the :initial-value option for the class
     representing the type of SELF.

 - Method on DIMENSIONAL-ARRAY-MIXIN: initialize-array (self
          (initialValue (LIKE (ANY-VALUE SELF)))) :
     Initialize the elements of SELF with INITIALVALUE.

 - Method on STELLA-HASH-TABLE: initialize-hash-table (self) :
     Initialize the STELLA hash table SELF.  This is a no-op and
     primarily exists to shadow the standard initializer inherited from
     ABSTRACT-HASH-TABLE.  STELLA hash tables are initialized at the
     first insertion operation.

 - Method on STORAGE-SLOT: initially (self) : OBJECT
     Defines the value of a slot before it has been assigned a value.

 - Method on CUSTOM-VECTOR-SEQUENCE: insert (self
          (value (LIKE (ANY-VALUE SELF)))) :
     Append VALUE to the END of the sequence SELF.  Resize the array if
     necessary.

 - Method on HEAP: insert (self (value (LIKE (ANY-VALUE SELF)))) :
     Insert VALUE into SELF and restore the heap property.  Signal an
     error if there is no more room in SELF.  Maintains SELF as a
     Min-heap if SELFs `predicate' has `<' semantics; otherwise as a
     Max-heap.

 - Method on HEAP: insert-if-better (self
          (value (LIKE (ANY-VALUE SELF)))) :
     Insert VALUE into SELF and restore the heap property.  If SELF has
     available room, simply insert VALUE.  If the heap is full, only
     insert VALUE if it is better than the current root (i.e., the
     minimum of SELF if SELFs `predicate' has `<' semantics).  In that
     case, replace the root of SELF and restore the heap property.
     This is useful to build and maintain a heap with some top-N
     elements (relative to `predicate') where the root (or minimum) of
     SELF is the currently weakest element at the end of the list.

 - Function: integer-length ((x LONG-INTEGER)) : INTEGER
     Return the 1-based position of the left-most bit in X.  If X is
     negative, we only count the value bits, not the sign.

 - Function: integer-to-hex-string ((i LONG-INTEGER)) : STRING
     Convert I to a string representation in hexadecimal notation and
     return the result.

 - Function: integer-to-string-in-base ((i LONG-INTEGER)
          (base INTEGER)) : STRING
     Convert I to a string representation in BASE and return the
     result.  BASE must be positive and not more than 36.

     Note that in the C++ version, only 8, 10 and 16 will work as BASE
     arguments, since that is all the underlying implementation
     supports.  Other argument values will be treated as `10'.

 - Function: integer-valued? ((x FLOAT)) : BOOLEAN
     Returns `true' if X is the floating point representation of an
     integer.

 - Function: intern-stella-name ((name STRING)) : GENERALIZED-SYMBOL
     Parse NAME which is assumed to be the printed representation of a
     STELLA symbol, surrogate or keyword, intern it into the current or
     specified module and return the result.  This is identical to
     calling `unstringify' on NAME but 10-15 times faster.

 - Function: interpret-command-line-arguments ((count INTEGER)
          (arguments (ARRAY () OF STRING))) :
     Old name for `process-command-line-arguments' (which see).

 - Function: isa? ((object OBJECT) (type TYPE)) : BOOLEAN
     Return `true' iff OBJECT is an instance of the class named TYPE.

 - Function: java-translate-system ((systemName STRING)) :
     Translate the system SYSTEMNAME to Java.

 - N-Command: jptrans ((statement OBJECT)) :
     Translate STATEMENT to C++ and print the result.

 - Function: keyword-name? ((name STRING)) : BOOLEAN
     Return TRUE if name is prefixed by `:'.

 - Function: kvlist-to-plist ((self KEY-VALUE-LIST)) : (PROPERTY-LIST
          OF (LIKE (ANY-KEY SELF)) (LIKE (ANY-VALUE SELF)))
     Convert SELF into a property list with identical and identically
     ordered keys and values.

 - Method on VECTOR-SEQUENCE: last (self) : (LIKE (ANY-VALUE SELF))
     Return the last item in the vector SELF.

 - Method on CONS-ITERATOR: length (self) : INTEGER
     Iterate over SELF, and count how many items there are.

 - Method on HEAP: length (self) : INTEGER
     Return the length of the currently filled portion of SELF.

 - Method on DIMENSIONAL-ARRAY-MIXIN: length (self) : INTEGER
     Return the total number of elements in SELF.

 - Method on 2-DIMENSIONAL-ARRAY-MIXIN: length (self) : INTEGER
     Return the total number of elements in SELF.

 - Function: lispify ((thing UNKNOWN)) : LISP-CODE
     Convert a Stella THING as much as possible into a Common-Lisp
     analogue.  The currently supported THING types are CONS, LIST,
     KEY-VALUE-LIST, ITERATOR, SYMBOL, KEYWORD, and all wrapped and
     unwrapped literal types.  BOOLEANs are translated into Lisp's CL:T
     and CL:NIL logic.  Unsupported types are left unchanged.

 - Function: lispify-boolean ((thing UNKNOWN)) : LISP-CODE
     Lispify THING which is assumed to be a (possibly wrapped) Stella
     boolean.

 - Command: list-directory-files ((directory STRING)) : (CONS OF
          STRING-WRAPPER)
     Return all the files and sub-directories in DIRECTORY sorted by
     name.  Each returned file is file name that has a DIRECTORY
     component.  If a file is a directory, it will end with a directory
     separator.  This excludes . and .. dirs.  Handles logical
     pathnames but resulting files will always use physical pathname
     syntax.  This is mostly consistent across native languages, but
     some differences still exist - e.g., Lisp will convert . or ..
     into absolute pathnames.

 - Command: list-modules ((kb-only? BOOLEAN)) : (CONS OF MODULE)
     Returns a cons of all modules defined in PowerLoom.  If KB-ONLY?
     is `true', then any modules which are code only or just namespaces
     are not returned.

 - Method on CONS: listify (self) : (LIST OF (LIKE (ANY-VALUE SELF)))
     Return a list of elements in SELF.

 - Method on LIST: listify (self) : (LIST OF (LIKE (ANY-VALUE SELF)))
     Return SELF.

 - Method on KEY-VALUE-LIST: listify (self) : (LIST OF (LIKE (ANY-VALUE
          SELF)))
     Return a list of key-value pairs in SELF.

 - Method on VECTOR: listify (self) : (LIST OF (LIKE (ANY-VALUE SELF)))
     Return a list of elements in SELF.

 - Method on ITERATOR: listify (self) : (LIST OF (LIKE (ANY-VALUE
          SELF)))
     Return a list of elements generated by SELF.

 - Command: load-configuration-file ((file FILE-NAME)) :
          CONFIGURATION-TABLE
     Read a configuration FILE and return its content as a
     configuration table.  Also enter each property read into the
     global system configuration table.  Assumes Java-style property
     file syntax.  Each property name is represented as a wrapped
     string and each value as a wrapped string/integer/float or boolean.

 - Command: load-file ((file STRING)) :
     Read STELLA commands from FILE and evaluate them.  The file should
     begin with an `in-module' declaration that specifies the module
     within which all remaining commands are to be evaluated The
     remaining commands are evaluated one-by-one, applying the function
     `evaluate' to each of them.

 - Function: load-file-option-handler ((option CMD-LINE-OPTION)
          (value OBJECT)) :
     Load the file VALUE using the STELLA `load-file' command.

 - Function: load-path-option-handler ((option CMD-LINE-OPTION)
          (value OBJECT)) :
     Modify the current file load path according to OPTION and VALUE.

 - Command: load-system ((systemName STRING)
          &rest (language&options OBJECT)) : BOOLEAN
     Natively `language'-compile out-of-date translated files of system
     SYSTEMNAME (only supported for Lisp at the moment) and then load
     them into the running system.  Return true if at least one file
     was compiled.  The following keyword/value `options' are
     recognized:

     `:language': can be used as an alternative to the optional
     language argument.  If not specified, the language of the running
     implementation is assumed.

     `:force-recompilation?' (default false): if true, files will be
     compiled whether or not their compilations are up-to-date.

     `:startup?' (default true): if true, the system startup function
     will be called once all files have been loaded.

 - Function: log-level<= ((level OBJECT) (module STRING)) : BOOLEAN
     Return TRUE if LEVEL is lower than or equal to the current log
     level of MODULE.  Return FALSE if any of them are undefined.

 - Function: log-message ((module STRING) (logLevel OBJECT)
          (message CONS)) :
     Log all elements of MESSAGE to MODULEs log stream if LOGLEVEL is
     the same or lower than the MODULEs log level.  Interprets `EOL' or
     :EOL to print a line terminator.

 - Function: logmsg ((module STRING) (logLevel OBJECT)
          &rest (message OBJECT)) :
     Log all elements of MESSAGE to MODULEs log stream if LOGLEVEL is
     the same or lower than the MODULEs log level.  Interprets `EOL' or
     :EOL to print a line terminator.

 - Method on SYMBOL: lookup-class (name) : CLASS
     Return a class with name NAME.  Scan all visible surrogates
     looking for one that has a class defined for it.

 - Method on STRING: lookup-class (name) : CLASS
     Return a class with name NAME.  Scan all visible surrogates
     looking for one that has a class defined for it.

 - Function: lookup-command ((name SYMBOL)) : METHOD-SLOT
     If NAME names an evaluable command return its associated command
     object;  otherwise, return `null'.  Currently, commands are not
     polymorphic, i.e., they can only be implemented by functions.

 - Function: lookup-configuration-property ((property STRING)
          (defaultValue WRAPPER) (configuration CONFIGURATION-TABLE)) :
          OBJECT
     Lookup PROPERTY in CONFIGURATION and return its value.  Use the
     global system configuration table if CONFIGURATION is NULL.  Return
     DEFAULTVALUE if PROPERTY is not defined.

 - Function: lookup-configuration-property-values ((property STRING)
          (defaultValue OBJECT) (configuration CONFIGURATION-TABLE)) :
          CONS
     Lookup PROPERTY in CONFIGURATION, assume it is a multi-valued
     property and return its value(s) as a list.  Use the global system
     configuration table if CONFIGURATION is NULL.  Return DEFAULTVALUE
     if PROPERTY is not defined or NIL is no default value is specified.

 - Function: lookup-demon ((name STRING)) : DEMON
     Return the demon named NAME.

 - Function: lookup-function ((functionSymbol SYMBOL)) : FUNCTION
     Return the function defined for FUNCTIONSYMBOL, if it exists.

 - Function: lookup-function-by-name ((name STRING)) : FUNCTION
     Return a function with name NAME visible from the current module.
     Scan all visible symbols looking for one that has a function
     defined for it.

 - Method on SURROGATE: lookup-global-variable (self) : GLOBAL-VARIABLE
     Return a global variable with name SELF.

 - Method on GENERALIZED-SYMBOL: lookup-global-variable (self) :
          GLOBAL-VARIABLE
     Return a global variable with name SELF.

 - Method on STRING: lookup-global-variable (self) : GLOBAL-VARIABLE
     Return a global variable with name SELF.

 - Function: lookup-local-slot ((class CLASS) (slot-name SYMBOL)) : SLOT
     Lookup a local slot with SLOT-NAME on CLASS.

 - Function: lookup-logging-parameter ((module STRING)
          (parameter KEYWORD) (default OBJECT)) : OBJECT
     Lookup logging PARAMETER for MODULE.  Use DEFAULT if no value is
     defined.

 - Function: lookup-macro ((name SYMBOL)) : METHOD-SLOT
     If NAME has a macro definition, return the method object holding
     its expander function.

 - Function: lookup-slot ((class CLASS) (slot-name SYMBOL)) : SLOT
     Return a slot owned by the class CLASS with name SLOT-NAME.
     Multiply inherited slots are disambiguated by a left-to-right class
     precedence order for classes with multiple parents (similar to
     CLOS).

 - Method on PROPERTY-LIST: lookup-with-default (self
          (key (LIKE (ANY-KEY SELF)))
          (default (LIKE (ANY-VALUE SELF)))) : (LIKE (ANY-VALUE SELF))
     Lookup KEY in SELF and return the result.  Return DEFAULT if no
     value was found.

 - Method on KEY-VALUE-LIST: lookup-with-default (self
          (key (LIKE (ANY-KEY SELF)))
          (default (LIKE (ANY-VALUE SELF)))) : (LIKE (ANY-VALUE SELF))
     Lookup KEY in SELF and return the result.  Return DEFAULT if no
     value was found.

 - N-Command: lptrans ((statement OBJECT)) :
     Translate STATEMENT to Common-Lisp and print the result.

 - Function: make-matching-name ((original STRING)
          &rest (options OBJECT)) : STRING
     Keyword options:   :break-on-cap    one of  :YES :NO :CLEVER
      default is :CLEVER   :break-on-number one of  :YES :NO :CLEVER
          default is :CLEVER   :break-on-separators string
              default is "-_ "   :remove-prefix   string
     :remove-suffix   string

     :case            one of  :UPCASE :TitleCase :titleCaseX :downcase
     :Capitalize :preserve
            default is :TitleCase   :separator       string
                    default is ""   :add-prefix      string
     :add-suffix      string

     MAKE-MATCHING-NAME returns a matching name (a string) for the
     input name (a string).  A matching name is constructed by breaking
     the input into `words' and then applying appropriate transforms.
     The arguments are used as follows:   ORIGINAL         is the input
     name.  It is a string.    :break-on-cap    is a keyword
     controlling whether changes in capitalization is used
          to indicate word boundaries.  If :YES, then all
     capitalization                    changes delineate words.  If
     :CLEVER, then unbroken runs of                    capitalized
     letters are treated as acronyms and remain grouped.
         If :NO or NULL, there is no breaking of words based on
     capitalization.    :break-on-number is a flag controlling whether
     encountering a number indicates                    a word
     boundary.  If :YES, then each run of numbers is treated as 		   a
     word separate from surrounding words.  If :CLEVER, then an
     attempt is made to recognize ordinal numbers (ie, 101st) and
     treat them as separate words.  If :NO or NULL, there is no breaking
                       of words when numbers are encountered.
     :break-on-separators   A string of characters which constitute
     word delimiters in                          the input word.  This
     is used to determine how to break                    the name into
     individual words.  Defaults are space, `-' and `_'.
     :remove-prefix   Specifies a prefix or suffix that is stripped
     from the input   :remove-suffix   name before any other
     processing.  This allows the removal of                    any
     naming convention dictated prefixes or suffixes.    :add-prefix
      Specifies a prefix or suffix that is added to the output name
     :add-suffix      after all other processing.  This allows the
     addition of any                    naming convention dictated
     prefixes or suffixes.    :case            The case of the
     resulting name.  This is applied to the name
     before adding prefixes or suffixes.  The two title case options
                    differ only in how the first word of the name is
     treated.                     :TitleCase capitalizes the first
     letter of the first word and                        also the first
     letter of all other words.                     :TitleCaseX does
     not capitalizes the first letter of the first 		       word but
     capitalizes the first letter of all subsequent words.
     :preserve results in no change in case.    :separator       This
     is a string specifying the word separator to use in the
            returned name.  An empty string (the default) means that
     the                    resulting words are concatenated without
     any separation.  This                    normally only makes sense
     when using one of the title case values                    for the
     case keyword.

 - Function: make-matching-name-full ((originalname STRING)
          (breakoncap KEYWORD) (breakonnumber KEYWORD)
          (breakonseparators STRING) (removeprefix STRING)
          (removesuffix STRING) (addprefix STRING) (addsuffix STRING)
          (outputcase KEYWORD) (outputseparator STRING)) : STRING
     Non-keyword version of `make-matching-name', which will probably be
     easier to use when called from non-Lisp languages.

 - Command: make-system ((systemName STRING)
          &rest (language&options OBJECT)) : BOOLEAN
     Translate all out-of-date files of system SYSTEMNAME into
     `language' (the first optional argument of LANGUAGE&OPTIONS) and
     then compile and load them (the latter is only possible for Lisp
     right now).  The following keyword/value `options' are recognized:

     `:language': can be used as an alternative to the optional
     language argument.  If not specified, the language of the running
     implementation is assumed.

     `:two-pass?': if true, all files will be scanned twice, once to
     load the signatures of objects defined in them, and once to
     actually translate the definitions.  Otherwise, the translator
     will make one pass in the case that the system is already loaded
     (and is being remade), and two passes otherwise.

     `:development-settings?' (default false): if true translation will
     favor safe, readable and debuggable code over efficiency
     (according to the value of `:development-settings' on the system
     definition).  If false, efficiency will be favored instead
     (according to the value of `:production-settings' on the system
     definition).

     `:production-settings?' (default true): inverse to
     `:development-settings?'.

     `:force-translation?' (default false): if true, files will be
     translated whether or not their translations are up-to-date.

     `:force-recompilation?' (default false): if true, translated files
     will be recompiled whether or not their compilations are
     up-to-date (only supported in Lisp right now).

     `:load-system?' (default true): if true, compiled files will be
     loaded into the current STELLA image (only supported in Lisp and
     Java right now).

     `:startup?' (default true): if true, the system startup function
     will be called once all files have been loaded.

 - Method on INTEGER: max (x (y INTEGER)) : INTEGER
     Return the maximum of X and Y.  If either is NULL, return the
     other.

 - Method on LONG-INTEGER: max (x (y LONG-INTEGER)) : LONG-INTEGER
     Return the maximum of X and Y.  If either is NULL, return the
     other.

 - Method on FLOAT: max (x (y FLOAT)) : FLOAT
     Return the maximum of X and Y.  If either is NULL, return the
     other.

 - Method on NUMBER-WRAPPER: max (x (y NUMBER-WRAPPER)) : NUMBER-WRAPPER
     Return the maximum of X and Y.  If Y is NULL, return X.

 - Method on CONS-ITERATOR: member? (self (value OBJECT)) : BOOLEAN
     Iterate over values of SELF and return TRUE if one of them is
     `eql?' to 'value.

 - Method on COLLECTION: member? (self (object OBJECT)) : BOOLEAN
     Return true iff OBJECT is a member of the collection SELF.

 - Method on SEQUENCE: member? (self (value OBJECT)) : BOOLEAN
     Return TRUE if VALUE is a member of the sequence SELF.

 - Macro: memoize ((inputArgs CONS) &body (body CONS)) : OBJECT
     Compute the value of an expression and memoize it relative to
     the values of INPUTARGS.  INPUTARGS should characterize the
     complete set of values upon which    the computation of the result
     depended.  Calls to `memoize' should be of the form

     (memoize (<arg>+) {:<option> <value>}* <expression>)

     and have the status of an expression.     The following options
     are supported:

     :timestamps   A single or list of keywords specifying the names of
                        timestamps which when bumped should invalidate
     all                     entries currently memoized in this table.
          :name         Names the memoization table so it can be
     shared by other                     memoization sites.  By
     default, a gensymed name is used.                      CAUTION: IT
     IS ASSUMED THAT ALL ENTRIES IN A MEMOZATION
     TABLE DEPEND ON THE SAME NUMBER OF ARGUMENTS!!        :max-values
     The maximum number of values to be memoized.  Only the
             `:max-values' most recently used values will be kept
                   in the memoization table, older values will be
     discarded                     and recomputed if needed.  Without a
     `:max-values'                     specification, the memoization
     table will grow                     indefinitely.

     PERFORMANCE NOTES: For most efficient lookup, input arguments that
     vary the most should be listed first.  Also, arguments of type
     STANDARD-OBJECT (and all its subtypes) can be memoized more
     efficiently than arguments of type OBJECT or wrapped literals
     (with the exception of BOOLEANs).

 - Function: merge-file-names ((baseFile FILE-NAME)
          (defaults FILE-NAME)) : FILE-NAME
     Parse BASEFILE, supply any missing components from DEFAULTS if
     supplied and return the result.

 - Method on DECODED-DATE-TIME: merge-null-fields (self
          (default DECODED-DATE-TIME)) :
     Replace any null valued fields in SELF with values from DEFAULT.
     The day of the week will be set consistently, if possible.

 - Method on DECODED-DATE-TIME: merge-superior-null-fields (self
          (default DECODED-DATE-TIME)) :
     Replace only null valued fields in SELF that represent larger time
     units than the smallest non-null in SELF with values from DEFAULT.
     The day of the week will be set consistently, if possible.
     Example: if SELF just has the month being non-null, then only the
     year will be filled in from DEFAULT.  If the day and minute were
     non-null, then hour, month and year will be filled.

     This can be useful when one doesn't want to extend the precision
     of the answer.

 - Method on INTEGER: min (x (y INTEGER)) : INTEGER
     Return the minimum of X and Y.  If either is NULL, return the
     other.

 - Method on LONG-INTEGER: min (x (y LONG-INTEGER)) : LONG-INTEGER
     Return the minimum of X and Y.  If either is NULL, return the
     other.

 - Method on FLOAT: min (x (y FLOAT)) : FLOAT
     Return the minimum of X and Y.  If either is NULL, return the
     other.

 - Method on NUMBER-WRAPPER: min (x (y NUMBER-WRAPPER)) : NUMBER-WRAPPER
     Return the minimum of X and Y.  If Y is NULL, return X.

 - Method on INTEGER: mod (x (modulus INTEGER)) : INTEGER
     True modulus.  Return the result of X mod `modulo'.  Note: In C++
     and Java, `mod' has more overhead than the similar function `rem'.
     The  answers returned by `mod' and `rem' are only different when
     the signs of X and `modulo' are different.

 - Method on LONG-INTEGER: mod (x (modulus LONG-INTEGER)) : LONG-INTEGER
     True modulus.  Return the result of X mod `modulo'.  Note: In C++
     and Java, `mod' has more overhead than the similar function `rem'.
     The  answers returned by `mod' and `rem' are only different when
     the signs of X and `modulo' are different.

 - Method on CLASS: multiple-parents? (class) : BOOLEAN
     Return `true' if CLASS has more than one direct superclass.

 - Method on MODULE: multiple-parents? (module) : BOOLEAN
     Return TRUE if MODULE has more than one parent.

 - Method on WORLD: multiple-parents? (world) : BOOLEAN
     Return FALSE always, since worlds never have more than one parent.

 - Function: name-to-string ((name OBJECT)) : STRING
     Return the string represented by NAME.  Return `null' if NAME is
     undefined or does not represent a string.

 - Function: native-delete-file ((fileName FILE-NAME)) :
     Delete the file FILENAME.  This does not handle any necessary
     pathname translations or error conditions.

 - Function: native-file-length ((fileName FILE-NAME)) : LONG-INTEGER
     Return the length of file FILENAME in bytes or NULL if that cannot
     be determined.  This does not handle any necessary pathname
     translations or error conditions.

 - Function: native-file-write-date ((fileName FILE-NAME)) :
          CALENDAR-DATE
     Return the time at which file FILENAME was last modified or NULL
     if that cannot be determined.  This does not handle any necessary
     pathname translations or error conditions.

 - Function: native-probe-file? ((fileName FILE-NAME)) : BOOLEAN
     Return true if file FILENAME exists.  Note that this does not
     necessarily mean that the file can also be read.  This does not
     handle any necessary pathname translations or error conditions.

 - Function: native-read-line ((inputStream INPUT-STREAM)) : STRING
     Read one line from INPUTSTREAM using the native language readline
     algorithm and return the result.  On EOF return `null'

 - Function: native-rename-file ((fromFile FILE-NAME)
          (toFile FILE-NAME)) :
     Rename the file FROMFILE to TOFILE.  This does not handle any
     necessary pathname translations or error conditions.

 - Method on MEMOIZABLE-ITERATOR: next? (self) : BOOLEAN
     Generate the next value of the memoized iterator SELF (or one of
     its clones) by either using one of the values generated so far or
     by generating and saving the next value of the `base-iterator'.

 - Method on COLLECTION: no-duplicates? (self) : BOOLEAN
     Return `true' if the collection SELF forbids duplicate values.

 - Method on STRING-WRAPPER: non-empty? (x) : BOOLEAN
     Return true if X is not the wrapped empty string ""

 - Method on VECTOR-SEQUENCE: non-empty? (self) : BOOLEAN
     Return `true' if SELF has length > 0.

 - Function: non-matching-position ((source STRING) (start INTEGER)
          (match STRING)) : INTEGER
     Returns the index into SOURCE, starting from START, of the first
     character that is not included in MATCH.

 - Function: non-matching-position-helper ((source STRING)
          (start INTEGER) (end INTEGER) (match STRING)) : INTEGER
     Helper for `non-matching-position' that requires END to not be
     `null'.

 - Method on NATIVE-VECTOR: nth (self (position INTEGER)) : (LIKE
          (ANY-VALUE SELF))
     Return the element in SELF at POSITION.

 - Method on LONG-INTEGER: null? (x) : BOOLEAN
     Return true if X is undefined (handled specially by all
     translators).

 - Method on ARRAY: null? (x) : BOOLEAN
     Return true if X is undefined (handled specially by all
     translators).

 - Function: number-less-than? ((x NUMBER-WRAPPER) (y NUMBER-WRAPPER))
          : BOOLEAN
     Generic number comparison that works with integers, longs and
     floats.

 - Method on VECTOR-SEQUENCE: object-equal? (x (y OBJECT)) : BOOLEAN
     Return TRUE iff the sequences X and Y are structurally equivalent.
     Uses `equal?' to test equality of elements.

 - Method on INTEGER: odd? (x) : BOOLEAN
     Return true if X is an odd number.

 - Method on LONG-INTEGER: odd? (x) : BOOLEAN
     Return true if X is an odd number.

 - Macro: only-if ((test OBJECT) (expression OBJECT)) : OBJECT
     If TEST is TRUE, return the result of evaluating EXPRESSION.

 - Function: open-network-stream ((host STRING) (port INTEGER)) :
          INPUT-STREAM OUTPUT-STREAM
     Open a TCP/IP network stream to HOST at PORT and return the result
     as an input/output stream pair.

 - Method on COLLECTION: ordered? (self) : BOOLEAN
     Return `true' if the collection SELF is ordered.

 - Function: outline-depth-exceeded? ((current-depth INTEGER)
          (depth-limit INTEGER)) : BOOLEAN
     Helper function that returns `true' if CURRENT-DEPTH exceeds
     DEPTH-LIMIT.  This functions uses the convention that a `null' or
     negative value of DEPTH-LIMIT means the depth is unlimited.  In
     those cases it always returns false.

 - Method on CLASS: parameters (self) : (LIST OF SYMBOL)
     Returns the list of parameters names of SELF.

 - Function: parse-date-time-in-time-zone ((date-time-string STRING)
          (time-zone FLOAT) (start INTEGER) (end INTEGER)
          (error-on-mismatch? BOOLEAN)) : DECODED-DATE-TIME
     Tries very hard to make sense out of the argument DATE-TIME-STRING
     and returns a time structure if successful.  If not, it returns
     `null'.  If ERROR-ON-MISMATCH? is true, parse-date-time will
     signal an error instead of returning `null'.  Default values are
     00:00:00 in the given timezone on the current date.  If the given
     TIME-ZONE value is `null', then the local time zone for the given
     date and time will be used as determined by the operating system.

 - Function: parse-date-time-relative-to-base
          ((date-time-string STRING) (base-date-time DECODED-DATE-TIME)
          (start INTEGER) (end INTEGER) (error-on-mismatch? BOOLEAN)
          (merge-null-fields? BOOLEAN)) : DECODED-DATE-TIME
     Tries very hard to make sense out of the argument DATE-TIME-STRING
     and returns a time structure if successful.  If not, it returns
     `null'.  If ERROR-ON-MISMATCH? is true, parse-date-time will
     signal an error instead of returning `null'.  Default values are
     passed in via BASE-DATE-TIME.  If the timezone field that is
     passed in is NULL, then the local time zone for the parsed
     date/time will be used.  If MERGE-NULL-FIELDS? is `true', then
     default values from `base-time-date' will be merged into missing
     components.  If `false', then they won't be merged in for null
     components but can still be used as a basis for interpreatation of
     relative time strings like "now" or "yesterday"

 - Function: parse-options ((options OBJECT) (legalOptions&Types CONS)
          (coercionError? BOOLEAN) (allowOtherKeys? BOOLEAN)) :
          PROPERTY-LIST
     Parse OPTIONS, check their validity according to
     LEGALOPTIONS&TYPES and return the result as a PROPERTY-LIST.
     LEGALOPTIONS&TYPES has to either be NULL or a flat list of legal
     <keyword> <coercionType> pairs.  A type specifcation of @IDENTITY
     means don't perform any coercion.  If COERCIONERROR? is TRUE,
     raise an error if a coercion failed.  If ALLOWOTHERKEYS? is TRUE
     options other than those specified in LEGALOPTIONS&TYPES are
     allowed but won't be coerced since we don't know their type.

 - Function: parse-stella-name ((name STRING)
          (enableCaseConversion? BOOLEAN)) : STRING STRING KEYWORD
     Parse the printed representation NAME of a STELLA symbol,
     surrogate or keyword and return its symbol name, module name and
     type (which is either :SYMBOL, :SURROGATE or :KEYWORD).  NAME can
     be qualified and must use the exact same syntax and escape
     characters that would be used if it were to be read by
     `read-s-expression-from-string' (or `unstringify').  If
     ENABLECASECONVERSION? is TRUE, the returned symbol name will be
     upcased if the current module is case-insensitive; otherwise, it
     will be returned as is.  Raises a read exception if NAME does not
     represent a symbol.  This function is available primarily for
     efficiency, since it is about 10-15 times faster than
     `unstringify'.

 - Function: pick-hash-table-size-prime ((minSize INTEGER)) : INTEGER
     Return a hash table prime of at least MINSIZE.

 - Function: plist-to-kvlist ((self PROPERTY-LIST)) : (KEY-VALUE-LIST
          OF (LIKE (ANY-KEY SELF)) (LIKE (ANY-VALUE SELF)))
     Convert SELF into a key-value list with identical and identically
     ordered keys and values.

 - Method on INTEGER: plus? (x) : BOOLEAN
     Return true if X is greater than 0.

 - Method on LONG-INTEGER: plus? (x) : BOOLEAN
     Return true if X is greater than 0.

 - Command: pop-load-path () : STRING
     Remove the first element from the STELLA load path and return the
     removed element.

 - Method on OBJECT: primary-type (self) : TYPE
     Returns the primary type of SELF.  Gets defined automatically for
     every non-abstract subclass of OBJECT.

 - Method on RELATION: primitive? (self) : BOOLEAN
     Return `true' if SELF is not a defined relation.

 - Macro: print (&body (body CONS)) : OBJECT
     Print arguments to the standard output stream.

 - Function: print-configuration-properties
          ((configuration CONFIGURATION-TABLE) (stream OUTPUT-STREAM)) :
     Print all properties defined in CONFIGURATION to STREAM.

 - Function: print-exception-context ((e NATIVE-EXCEPTION)
          (stream OUTPUT-STREAM)) :
     Prints a system dependent information about the context of the
     specified exception.  For example, in Java it prints a stack
     trace.  In Lisp, it is vendor dependent.

 - Command: print-outline ((thing OBJECT) (stream OUTPUT-STREAM)
          (depth INTEGER) (named? BOOLEAN)) :
     Print an outline of THING and its subparts on STREAM.  If DEPTH is
     non-negative, only DEPTH levels will be printed.  If NAMED? is
     `TRUE', then only named entities will be printed.

     This function is intended to be used on things like modules,
     contexts, concepts, etc. that have hierarchical structure.  If
     THING doesn't have a hierarchical structure, it will just be
     printed.

 - Command: print-properties () :
     Print all current configuration property information to standard
     output.

 - Function: print-recycle-lists () :
     Print the current state of all recycle lists.

 - Macro: print-spaces (&body (body CONS)) : OBJECT
     (print-spaces [stream] N) prints N spaces onto stream.  If no
     stream form is provided, then STANDARD-OUTPUT will be used.

 - Command: print-stella-features () :
     Print the list of enabled and disabled STELLA features.

 - N-Command: print-unbound-surrogates (&rest (args OBJECT)) :
     Print all unbound surrogates visible from the module named by the
     first argument (a symbol or string).  Look at all modules if no
     module name or `null' was supplied.  If the second argument is
     `true', only consider surrogates interned in the specified module.

 - Function: print-undefined-methods ((module MODULE) (local? BOOLEAN))
          :
     Print all declared but not yet defined functions and methods in
     MODULE.  If LOCAL? is true, do not consider any parent modules of
     MODULE.  If MODULE is NULL, look at all modules in the system.
     This is handy to pinpoint forward declarations that haven't been
     followed up by actual definitions.

 - N-Command: print-undefined-super-classes ((class NAME)) :
     Print all undefined or bad (indirect) super classes of CLASS.

 - Function: private-class-methods ((class CLASS)) : (ITERATOR OF
          METHOD-SLOT)
     Iterate over all private methods attached to CLASS.

 - Function: private-class-storage-slots ((class CLASS)) : (ITERATOR OF
          STORAGE-SLOT)
     Iterate over all private storage-slots attached to CLASS.

 - Method on RELATION: private? (self) : BOOLEAN
     Return `true' if SELF is not public.

 - Function: process-command-line-arguments ((count INTEGER)
          (arguments (ARRAY () OF STRING))
          (unhandledOptionAction KEYWORD)) :
     Interpret any command line ARGUMENTS for which handlers have been
     registered.  Leave any remaining unprocessed arguments in
     `*unprocessed-command-line-arguments*'.  If any unprocessed
     arguments use option syntax (that is they start with a `-'),
     proceed according to UNHANDLEDOPTIONACTION which can be one of
     :ignore, :warn or :error.  This ensures that at any point in the
     option processing, `*unprocessed-command-line-arguments*'
     accurately reflects the arguments which have been either skipped
     or not handled yet.

 - Function: process-doctype ((doctype-declaration CONS)) : XML-DOCTYPE
     Takes an S-Expression representing a doctype and processes into a
     DOCTYPE object.

 - N-Command: ptrans ((statement OBJECT)) :
     Translate STATEMENT to Common-Lisp and print the result.

 - Function: public-class-methods ((class CLASS)) : (ITERATOR OF
          METHOD-SLOT)
     Iterate over all private methods attached to CLASS.

 - Function: public-class-storage-slots ((class CLASS)) : (ITERATOR OF
          STORAGE-SLOT)
     Iterate over all public storage-slots attached to CLASS.

 - Method on CLASS: public-slots (self) : (ITERATOR OF SLOT)
     Return an iterator over public slots of SELF.

 - Method on OBJECT: public-slots (self) : (ITERATOR OF SLOT)
     Return an iterator over public slots of SELF.

 - Method on SLOT: public? (self) : BOOLEAN
     True if SELF or one it its ancestors is marked public.

 - Command: push-load-path ((path STRING)) : (CONS OF STRING-WRAPPER)
     Add the directories listed in the |-separated PATH to the front of
     the STELLA load path.  Return the resulting load path.

 - Macro: pushf ((place CONS) (value OBJECT)) : OBJECT
     Push VALUE onto the cons list PLACE.

 - Function: qualified-stella-name? ((name STRING)) : BOOLEAN
     Return TRUE if NAME is a symbol or surrogate qualified with a
     module pathname or a module pathname ending with a `/'.  Assumes
     that NAME is the printed representation of a STELLA symbol
     (potentially containing escape characters).

 - Function: read-line2 ((stream INPUT-STREAM)) : STRING KEYWORD
     Read one line from STREAM and return the result and a keyword that
     indicates the terminator for that line ending: `:CR' `:LF' `:CRLF'
     or `:EOF'.   This is not platform-dependent and differs from
     `read-line' by returning a second value.  It may hang when used on
     interactive streams such as terminal or network streams with only
     CR line endings.  It should only be used on file or string input
     streams.

 - Function: read-xml-expressions ((filename STRING)) : CONS
     Read all of the top-level XML expressions from FILENAME and return
     them in a list.

 - Method on STORAGE-SLOT: reader (self) : SYMBOL
     Name of a method called to read the value of the slot SELF.

 - Function: register-cmd-line-option (&rest (options OBJECT)) :
     Register a command line option.  :key identifies the name of the
     option which will usually start with a dash such as `-e' or
     `--eval'.  :key2 and :key3 can be used to supply additional
     options (e.g., long option formats).  To supply even more keys, a
     list can be supplied with the :keys option.  If a :property is
     supplied, this option simply sets or adds to the values of the
     specified system configuration property.  If a :handler name is
     specified, its function will be used to interpret the values of
     the option.  :documentation can be used to supply a documentation
     string which will be printed by the `help-option-handler' (usually
     bound to `-?').  :value-type describes what type an option value
     should be coerced to before assigning it to the specified
     configuration :property.  :n-arguments describes how many
     arguments this option takes.  This will be 0 for simple switches
     and can be 1 or greater than one for option handlers that need one
     or more arguments.  :default-value defines the value to use for
     zero-argument :property options.  If :multi-valued? is true,
     values of multiple occurrences of the option will be added to the
     specified configuration :property.  :error-action can be one of
     :ignore, :warn or :error to specify what to do in case an error is
     encountered during option processing.

 - Function: regular-integer-valued? ((x LONG-INTEGER)) : BOOLEAN
     Return `true' if X can be represented by a regular integer.

 - Method on INTEGER: rem (x (y INTEGER)) : INTEGER
     Return the remainder from dividing X by Y.  The sign of the result
     is always the same as the sign of X.  This has slightly different
     behavior than the `mod' function, and has less overhead in C++ and
     Java, which don't have direct support for a true modulus function.

 - Method on LONG-INTEGER: rem (x (y LONG-INTEGER)) : LONG-INTEGER
     Return the remainder from dividing X by Y.  The sign of the result
     is always the same as the sign of X.  This has slightly different
     behavior than the `mod' function, and has less overhead in C++ and
     Java, which don't have direct support for a true modulus function.

 - Function: remove-configuration-property ((property STRING)
          (value OBJECT) (configuration CONFIGURATION-TABLE)) : OBJECT
     Remove VALUE from PROPERTY in CONFIGURATION and return it.  Use
     the global system configuration table if CONFIGURATION is NULL.

 - Method on COLLECTION: remove-duplicates (self) : (LIKE SELF)
     Return SELF with duplicates removed.  Preserves the original order
     of the remaining members.

 - Method on CONS: remove-duplicates-equal (self) : (LIKE SELF)
     `remove-duplicates' (which see) using an `equal?' test.

 - Method on LIST: remove-duplicates-equal (self) : (LIKE SELF)
     `remove-duplicates' (which see) using an `equal?' test.

 - Method on HEAP: replace-heap-root (self
          (value (LIKE (ANY-VALUE SELF)))) :
     Replace the current root of SELF with VALUE and restore the heap
     property.  Signal an error if SELF is empty.  Maintains SELF as a
     Min-heap if SELFs `predicate' has `<' semantics; otherwise as a
     Max-heap.

 - Method on CLASS: required-slots (self) : (LIST OF SYMBOL)
     Returns a list of names of required slots for SELF.

 - Method on STORAGE-SLOT: required? (self) : BOOLEAN
     True if a value must be assigned to this slot at creation time.

 - Command: reset-stella-features () :
     Reset STELLA features to their default settings.

 - Method on VECTOR-SEQUENCE: reverse (self) : (LIKE SELF)
     Reverse the order of elements in the active portion of SELF.

 - Function: reverse-interval ((lowerbound INTEGER)
          (upperbound INTEGER)) : REVERSE-INTEGER-INTERVAL-ITERATOR
     Create a reverse interval object.

 - Function: run-hooks ((hooklist HOOK-LIST) (argument OBJECT)) :
     Run all hook functions in HOOKLIST, applying each one to ARGUMENT.

 - Function: running-as-lisp? () : BOOLEAN
     Return true if the executable code is a Common Lisp application.

 - Function: running-in-language () : KEYWORD
     Returns the keyword for the language the current implementation is
     running in.

 - Function: running-system-information () : STRING
     Returns an information string about the current running system
     environment.

 - Function: safe-equal-hash-code ((self OBJECT)) : INTEGER
     Return a hash code for SELF.  Just like `equal-hash-code' - which
     see, but also works for NULL.  `equal-hash-code' methods that
     expect to handle NULL components should use this function for
     recursive calls.

 - Function: safe-hash-code ((self OBJECT)) : INTEGER
     Return a hash code for SELF.  Just like `hash-code' - which see,
     but also works for NULL.

 - Function: safe-lookup-slot ((class CLASS) (slot-name SYMBOL)) : SLOT
     Alias for `lookup-slot'.  Kept for backwards compatibility.

 - Macro: safety ((level INTEGER-WRAPPER) (test OBJECT)
          &body (body CONS)) : OBJECT
     Signal warning message, placing non-string arguments in quotes.

 - Function: save-configuration-file ((table CONFIGURATION-TABLE)
          (file FILE-NAME) (title STRING)) :
     Save TABLE as a configuration file.  Uses a Java-style property
     file syntax.

 - Function: save-configuration-value ((stream OUTPUT-STREAM)
          (value OBJECT)) :
     Save VALUE to STREAM as a properly formatted configuration value.

 - Function: search-cons-tree-with-filter? ((tree OBJECT)
          (value OBJECT) (filter CONS)) : BOOLEAN
     Return `true' iff the value VALUE is embedded within the cons tree
     TREE.  Uses an `eql?' test.  Does not descend into any cons whose
     first element matches an element of FILTER.

 - Function: search-for-object ((self OBJECT) (typeref OBJECT)) : OBJECT
     If SELF is a string or a symbol, search for an object named SELF
     of type `type'.  Otherwise, if SELF is an object, return it.

 - Function: seed-random-number-generator () :
     Seeds the random number generator with the current time.

 - Function: sequence ((collectiontype TYPE) &rest (values OBJECT)) :
          (SEQUENCE OF OBJECT)
     Return a sequence containing VALUES, in order.

 - Command: set-call-log-break-point ((count INTEGER)) :
     Set a call log break point to COUNT.  Execution will be
     interrupted right at the entry of the COUNTth logged function call.

 - Function: set-configuration-property ((property STRING)
          (value OBJECT) (configuration CONFIGURATION-TABLE)) : OBJECT
     Set PROPERTY in CONFIGURATION to VALUE and return it.  Use the
     global system configuration table if CONFIGURATION is NULL.

 - Method on DECODED-DATE-TIME: set-current-date (values-structure) :
     Sets the current date into VALUES-STRUCTURE

 - Method on DECODED-DATE-TIME: set-current-date-time
          (values-structure) :
     Sets the current date and time into VALUES-STRUCTURE

 - Method on DECODED-DATE-TIME: set-current-time (values-structure) :
     Sets the current time into VALUES-STRUCTURE

 - Function: set-global-value ((self SURROGATE) (value OBJECT)) : OBJECT
     Set the value of the global variable for the surrogate SELF to
     VALUE.

 - Command: set-load-path ((path STRING)) : (CONS OF STRING-WRAPPER)
     Set the STELLA load path to the |-separated directories listed in
     PATH.  Return the resulting load path.

 - Command: set-log-level ((module STRING) (level OBJECT)) :
     Set the log-level for MODULE to LEVEL.  This is a convenience
     function for this common operation.

 - Command: set-logging-parameters ((module STRING)
          &rest (params&values OBJECT)) :
     Set logging parameters for MODULE.  The supported parameters are:
     :LOG-LEVELS - a cons list of legal levels in ascending log level
     order;                 for example, (:NONE :LOW :MEDIUM :HIGH) or
     (0 1 2 3).    :LEVEL      - the current log level for MODULE
     :STREAM     - the stream or file to log to (defaults to
     STANDARD-OUTPUT)   :PREFIX     - the prefix to use to identify the
     module (defaults to MODULE)   :MAX-WIDTH  - logging output lines
     will be kept to approximately this width                 (defaults
     to 10000, minimum width of about 30 is used to
     print line header information).

 - Function: set-optimization-levels ((safety INTEGER) (debug INTEGER)
          (speed INTEGER) (space INTEGER)) :
     Set optimization levels for the qualities SAFETY, DEBUG, SPEED,
     and SPACE.

 - Command: set-property ((property NAME) (value OBJECT)) :
     Set PROPERTY (a string or symbol) in the configuration table to
     VALUE.  Note that PROPERTY is evaluated and will need to be quoted
     if supplied as a symbol.  Symbols will also be upcased if this
     command is run in a non-case-sensitive module.

 - Command: set-stella-feature (&rest (features KEYWORD)) :
     Enable all listed STELLA FEATURES.

 - Command: set-translator-output-language ((new-language KEYWORD)) :
          KEYWORD
     Set output language to NEW-LANGUAGE.  Return previous language.

 - Macro: setq? ((variable SYMBOL) (expression CONS)) : OBJECT
     Assign VARIABLE the result of evaluating EXPRESSION, and return
     TRUE if EXPRESSION is not NULL else return FALSE.

 - Function: shadowed-symbol? ((symbol GENERALIZED-SYMBOL)) : BOOLEAN
     Return `true' if SYMBOL is shadowed in its home module.

 - Method on INTEGER: shift-right (arg (count INTEGER)) : INTEGER
     Shift ARG to the right by COUNT positions and 0-extend from the
     left if ARG is positive or 1-extend if it is negative.  This is an
     arithmetic shift that preserve the sign of ARG and is equivalent
     to dividing ARG by 2** COUNT.

 - Method on LONG-INTEGER: shift-right (arg (count INTEGER)) :
          LONG-INTEGER
     Shift ARG to the right by COUNT positions and 0-extend from the
     left if ARG is positive or 1-extend if it is negative.  This is an
     arithmetic shift that preserve the sign of ARG and is equivalent
     to dividing ARG by 2** COUNT.

 - Macro: signal ((type SYMBOL) &body (body CONS)) : OBJECT
     Signal error message, placing non-string arguments in quotes.

 - Macro: signal-read-error (&body (body CONS)) : OBJECT
     Specialized version of `signal' that throws a READ-EXCEPTION.

 - Method on VECTOR: sort (self (predicate FUNCTION-CODE)) : (VECTOR OF
          (LIKE (ANY-VALUE SELF)))
     Perform a destructive sort of SELF according to PREDICATE, and
     return the result.  If PREDICATE has a `<' semantics, the result
     will be in ascending order.  If PREDICATE is `null', a suitable
     `<' predicate is chosen depending on the first element of SELF,
     and it is assumed that all elements of SELF have the same type
     (supported element types are GENERALIZED-SYMBOL, STRING, INTEGER,
     and FLOAT).

 - Method on HEAP: sort (self (predicate FUNCTION-CODE)) : (HEAP OF
          (LIKE (ANY-VALUE SELF)))
     Sort the heap SELF according to PREDICATE (in ascending order if
     PREDICATE has `<' semantics).  If PREDICATE is NULL simply use
     SELFs internal predicate (the normal case).  If it is different
     from SELFs internal predicate, heapify SELF first according to the
     new predicate, store the new predicate in SELF and then sort the
     heap.  Note that a sorted array automatically satisfies the heap
     property.  This is slightly different than a regular heap sort due
     to the way HEAP's are maintained; however, the complexity is the
     same.

 - Function: split-string ((input STRING) (separator CHARACTER)) :
          (CONS OF STRING-WRAPPER)
     Split INPUT into separate strings based on the SEPARATOR character.

 - Command: start-function-call-logging ((fileName STRING)) :
     Start function call logging to FILENAME.

 - Function: starts-with? ((string STRING) (prefix STRING)
          (start INTEGER)) : BOOLEAN
     Return TRUE if STRING starts with PREFIX starting from START
     (which defaults to 0 if it is supplied as NULL).

 - Function: stella-collection? ((self OBJECT)) : BOOLEAN
     Return `true' if SELF is a native collection.

 - Command: stella-information () : STRING
     Returns information about the current Stella implementation.
     Useful when reporting problems.

 - Function: stella-object? ((self OBJECT)) : BOOLEAN
     Return true if SELF is a member of the STELLA class `OBJECT'.

 - Function: stella-version-string () : STRING
     Return a string identifying the current version of STELLA.

 - Function: stellafy ((thing LISP-CODE) (targetType TYPE)) : OBJECT
     Partial inverse to `lispify'.  Convert the Lisp object THING into
     a Stella analogue of type TARGETTYPE.  Note: See also `stellify'.
     it is similar, but guesses TARGETTYPE on its own, and makes
     somewhat different translations.

 - Function: stellify ((self OBJECT)) : OBJECT
     Convert a Lisp object into a STELLA object.

 - Command: stop-function-call-logging () :
     Stop function call logging and close the current log file.

 - Method on OUTPUT-FILE-STREAM: stream-position (self) : LONG-INTEGER
     Return the current position of the file input cursor in SELF.

 - Method on INPUT-FILE-STREAM: stream-position (self) : LONG-INTEGER
     Return the current position of the file input cursor in SELF.

 - Method on OUTPUT-FILE-STREAM: stream-position-setter (self
          (newpos LONG-INTEGER)) : LONG-INTEGER
     Set the current position of the file input cursor in SELF to
     NEWPOS.

 - Method on INPUT-FILE-STREAM: stream-position-setter (self
          (newpos LONG-INTEGER)) : LONG-INTEGER
     Set the current position of the file input cursor in SELF to
     NEWPOS.  If SELF has any tokenizer state associated with it, this
     will also reset to the start state of the tokenizer table;
     otherwise, behavior would be unpredictable unless the character
     class of the new position is exactly the same as the one following
     the most recent token.

 - Method on INPUT-STREAM: stream-to-string (from) : STRING
     Read all of the input from `stream' and return it as a string.

 - Function: string-search-ignore-case ((string STRING)
          (substring STRING) (start INTEGER)) : INTEGER
     Return start position of the left-most occurrence of SUBSTRING in
     STRING, beginning from START.  Return NULL if it is not a
     substring.  The comparison ignores differences in letter case.

 - Function: string-to-calendar-date-with-default ((input-date STRING)
          (default-date DECODED-DATE-TIME)) : CALENDAR-DATE
     Returns a calendar date object representing the date and time
     parsed from the INPUT-DATE string.  Default values for missing
     fields and the interpretation of relative references come from
     DEFAULT-DATE.  If the DEFAULT-DATE is `null', the current date
     will be used.  If a null set of defaults is desired, use
     `*NULL-DECODED-DATE-TIME*'.  If no valid parse is found, `null' is
     returned.

 - Function: string-to-decoded-date-time ((input STRING)) :
          DECODED-DATE-TIME
     Returns a decoded date-time object representing the date and time
     parsed from the INPUT string.  If no valid parse is found, `null'
     is returned.

 - Function: string-to-surrogate ((self STRING)) : SURROGATE
     Return a surrogate with the name SELF visible in the current
     module.  Very tricky: The logic is designed to avoid returning an
     inherited surrogate that has no value.  In that case, a new local
     surrogate is created that shadows the inherited surrogate.

 - Function: string-to-time-duration ((duration STRING)) : TIME-DURATION
     Parses and returns an time-duration object corresponding to
     DURATION.  The syntax for time duration strings is "{plus|minus} N
     days[; M ms]" where N and M are integer values for days and
     milliseconds.  If no valid parse is found, `null' is returned.

 - Function: string-trim ((string STRING)) : STRING
     Remove any leading and trailing white space from STRING and return
     a copy of the trimmed substring (which might be empty if we had
     all white space).  If no white space was removed, STRING is
     returned unmodified and uncopied.

 - Function: subclass-of? ((subClass CLASS) (superClass CLASS)) :
          BOOLEAN
     Return `true' if SUBCLASS is a subclass of SUPERCLASS.

 - Method on MUTABLE-STRING: subsequence (string (start INTEGER)
          (end INTEGER)) : STRING
     Return a substring of STRING beginning at position START and
     ending up to but not including position END, counting from zero.
     An END value of NULL stands for the rest of the string.

 - Method on STRING: substitute-characters (self (new-chars STRING)
          (old-chars STRING)) : STRING
     Substitute all occurences of of a member of OLD-CHARS with the
     corresponding member of NEW-CHARS in the string SELF.  Returns a
     new string.

 - Method on MUTABLE-STRING: substitute-characters (self
          (new-chars STRING) (old-chars STRING)) : MUTABLE-STRING
     Substitute all occurences of of a member of OLD-CHARS with the
     corresponding member of NEW-CHARS in the string SELF.  IMPORTANT:
     The return value should be used instead of relying on destructive
     substitution, since the substitution will not be destructive in
     all translated languages.

 - Function: subtype-of? ((sub-type TYPE) (super-type TYPE)) : BOOLEAN
     Return `true' iff the class named SUB-TYPE is a subclass of the
     class named SUPER-TYPE.

 - Method on CLASS: super-classes (self) : (ITERATOR OF CLASS)
     Returns an iterator that generates all super classes of SELF.
     Non-reflexive.

 - Function: surrogate-name? ((name STRING)) : BOOLEAN
     Return TRUE if name is prefixed by `SURROGATE-PREFIX-CHARACTER'.

 - Method on SURROGATE: surrogatify (self) : SURROGATE
     Converts SELF into a surrogate.

 - Method on SYMBOL: surrogatify (self) : SURROGATE
     Converts SELF into a surrogate (same semantics as
     `symbol-to-surrogate' which see).

 - Method on STRING: surrogatify (self) : SURROGATE
     Converts SELF into a surrogate.

 - Method on OBJECT: sweep (self) :
     Default method.  Sweep up all SELF-type objects.

 - Function: symbol-to-surrogate ((self SYMBOL)) : SURROGATE
     Return a surrogate with the same name as SELF.  Very tricky: The
     logic is designed to avoid returning an inherited surrogate that
     has no value.  In that case, a new local surrogate is created that
     shadows the inherited surrogate.  Unlike `string-to-surrogate',
     the search starts first from the home context of SELF, and if that
     fails, then it restarts in *module*.

 - Function: symbol-to-type ((self SYMBOL)) : SURROGATE
     Convert SELF into a surrogate with the same name and module.

 - Method on STORAGE-SLOT: system-default-value (self) : OBJECT
     Return a default value expression, or if SELF has dynamic storage,
     an initial value expression.

 - Method on SLOT: system-default-value (self) : OBJECT
     Return a default value expression, or if SELF has dynamic storage,
     an initial value expression.

 - Function: system-loaded-or-started-up? ((name STRING)) : BOOLEAN
     Return `true' if system NAME has either been loaded or initialized
     with its startup function.

 - Function: system-loaded? ((name STRING)) : BOOLEAN
     Return `true' if system NAME has been loaded.

 - Function: terminate-program () :
     Terminate and exit the program with normal exit code.

 - Method on TIME-DURATION: time-duration-to-string (date) : STRING
     Returns a string representation of DATE

 - Function: time-zone-format60 ((timezone FLOAT)
          (include-colon? BOOLEAN)) : STRING
     Format `zone' as an hh:mm or hhmm string depending on
     INCLUDE-COLON?

 - Function: toggle-output-language () : KEYWORD
     Switch between Common Lisp and C++ as output languages.

 - Function: tokenize-string ((string STRING) (punctuationchars STRING)
          (quotechars STRING) (escapechars STRING)) : (CONS OF CONS)
     Simple tokenizer that is somewhere between Java's StringTokenizer
     and StreamTokenizer in functionality.  It doens't specially
     support number tokens nor comment strings/sequences even though
     this could be added at the expense of some extra complexity.
     Returns a list of (<token-string> <token-type>) pairs, where the
     token type is one of :TEXT, :PUNCTUATION or :QUOTE, i.e., all
     white space is ignored and escape characters are handled and
     removed.  For example:

            (tokenize-string "for(i='fo^'o'; i>0; i++)" "()=<>+-;" "'" "^")
            =>
            (("for" :TEXT) ("(" :PUNCTUATION) ("i" :TEXT)
             ("=" :PUNCTUATION) ("'" :QUOTE) ("fo'o" :TEXT)
             ("'" :QUOTE) (";" :PUNCTUATION) ("i" :TEXT)
             (">" :PUNCTUATION) ("0" :TEXT) (";" :PUNCTUATION)
             ("i" :TEXT) ("++)" :PUNCTUATION))

     NOTE: this aggregates multiple punctuation characters that
     immediately follow each other into a single token which is
     (generally) useful to pickup multi-character operators such as ++,
     >=, etc.  It's still easy to pick them apart in a post-processing
     step if necessary (e.g., for the `++)' case above), so we leave
     this for now as a feature.

 - Macro: trace-if ((keyword OBJECT) &body (body CONS)) : OBJECT
     If KEYWORD is a trace keyword that has been enabled with
     `add-trace' print all the elements in BODY to standard output.
     Otherwise, do nothing.  KEYWORD can also be a list of keywords in
     which case printing is done if one or more of them are trace
     enabled.

 - Command: translate-system ((systemName STRING)
          &rest (language&options OBJECT)) : BOOLEAN
     Translate all of the STELLA source files in system SYSTEMNAME into
     `language' (the optional first argument).  The following
     keyword/value `options' are recognized:

     `:language': can be used as an alternative to the optional
     language argument.  If not specified, the language of the running
     implementation is assumed.

     `:two-pass?' (default false): if true, all files will be scanned
     twice, once to load the signatures of objects defined in them, and
     once to actually translate the definitions.

     `:force-translation?' (default false): if true, files will be
     translated whether or not their translations are up-to-date.

     `:development-settings?' (default false): if true translation will
     favor safe, readable and debuggable code over efficiency
     (according to the value of `:development-settings' on the system
     definition).  If false, efficiency will be favored instead
     (according to the value of `:production-settings' on the system
     definition).

     `:production-settings?' (default true): inverse to
     `:development-settings?'.

 - Function: translate-to-common-lisp? () : BOOLEAN
     Return `true' if current output language is Common-Lisp.

 - Function: translate-to-cpp? () : BOOLEAN
     Return `true' if current output language is C++

 - Function: translate-to-java? () : BOOLEAN
     Return `true' if current output language is Java

 - Function: truncate ((n NUMBER)) : INTEGER
     Truncate N toward zero and return the result.

 - Function: try-to-evaluate ((tree OBJECT)) : OBJECT
     Variant of `evaluate' that only evaluates TREE if it represents an
     evaluable expression.  If it does not, TREE is returned
     unmodified.  This can be used to implement commands with mixed
     argument evaluation strategies.

 - Function: two-argument-least-common-superclass ((class1 CLASS)
          (class2 CLASS)) : CLASS
     Return the most specific class that is a superclass of both CLASS1
     and CLASS2.  If there is more than one, arbitrarily pick one.  If
     there is none, return `null'.

 - Function: two-argument-least-common-supertype ((type1 TYPE-SPEC)
          (type2 TYPE-SPEC)) : TYPE-SPEC
     Return the most specific type that is a supertype of both TYPE1
     and TYPE2.  If there is more than one, arbitrarily pick one.  If
     there is none, return @VOID.  If one or both types are parametric,
     also try to generalize parameter types if necessary.

 - Method on SLOT: type (self) : TYPE
     The type of a storage slot is its base type.

 - Method on SLOT: type-specifier (self) : TYPE-SPEC
     If SELF has a complex type return its type specifier, otherwise,
     return `type' of SELF.

 - Function: type-to-symbol ((type TYPE)) : SYMBOL
     Convert TYPE into a symbol with the same name and module.

 - Method on SURROGATE: type-to-wrapped-type (self) : TYPE
     Return the wrapped type for the type SELF, or SELF if it is not a
     bare literal type.

 - Function: unbound-surrogates ((module MODULE) (local? BOOLEAN)) :
          (ITERATOR OF SURROGATE)
     Iterate over all unbound surrogates visible from MODULE.  Look at
     all modules if MODULE is `null'.  If LOCAL?, only consider
     surrogates interned in MODULE.

 - Command: unbump-log-indent () :
     Decrease the indentation level for subsequent log messages.

 - Function: unescape-html-string ((input STRING)) : STRING
     Replaces HTML escape sequences such as &amp; with their associated
     characters.

 - Function: unescape-url-string ((input STRING)) : STRING
     Takes a string and replaces %-format URL escape sequences with
     their real character equivalent according to RFC 2396.

 - Command: unprocessed-command-line-arguments () : (CONS OF
          STRING-WRAPPER)
     Return all command line arguments which have not yet been processed
     by (or been ignored by) `process-command-line-arguments'.  If
     arguments have not yet been processed, this will return NULL.

 - Function: unregister-all-cmd-line-options () :
     Unregister all currently registered command line options.

 - Function: unregister-cmd-line-option ((key STRING)) :
     Unregister the command line option identified by KEY under all its
     keys.

 - Command: unset-stella-feature (&rest (features KEYWORD)) :
     Disable all listed STELLA FEATURES.

 - Method on INTEGER: unsigned-shift-right-by-1 (arg) : INTEGER
     Shift ARG to the right by 1 position and 0-extend from the left.
     This does not preserve the sign of ARG and shifts the sign-bit
     just like a regular bit.  In Common-Lisp we can't do that directly
     and need to do some extra masking.

 - Method on LONG-INTEGER: unsigned-shift-right-by-1 (arg) :
          LONG-INTEGER
     Shift ARG to the right by 1 position and 0-extend from the left.
     This does not preserve the sign of ARG and shifts the sign-bit
     just like a regular bit.  In Common-Lisp we can't do that directly
     and need to do some extra masking.

 - Function: unstringify-stella-source ((source STRING)
          (module MODULE)) : OBJECT
     Unstringify a STELLA SOURCE string relative to MODULE, or
     `*MODULE*' if no module is specified.  This function allocates
     transient objects as opposed to `unstringify-in-module' or the
     regular `unstringify'.

 - Function: unwrap-boolean ((wrapper BOOLEAN-WRAPPER)) : BOOLEAN
     Unwrap WRAPPER and return its values as a regular BOOLEAN.  Map
     NULL onto FALSE.

 - Function: unwrap-function-code ((wrapper FUNCTION-CODE-WRAPPER)) :
          FUNCTION-CODE
     Unwrap WRAPPER and return the result.  Return NULL if WRAPPER is
     NULL.

 - Function: unwrap-long-integer ((wrapper LONG-INTEGER-WRAPPER)) :
          LONG-INTEGER
     Unwrap WRAPPER and return the result.  Return NULL if WRAPPER is
     NULL.

 - Function: unwrap-method-code ((wrapper METHOD-CODE-WRAPPER)) :
          METHOD-CODE
     Unwrap WRAPPER and return the result.  Return NULL if WRAPPER is
     NULL.

 - Method on ABSTRACT-DICTIONARY-ITERATOR: value-setter (self
          (value (LIKE (ANY-VALUE SELF)))) : (LIKE (ANY-VALUE SELF))
     Abstract method needed to allow application of this method on
     abstract iterator classes that do not implement it.  By having
     this here all `next?' methods of dictionary iterators MUST use the
     `slot-value' paradigm to set the iterator value.

 - Macro: warn (&body (body CONS)) : OBJECT
     Signal warning message, placing non-string arguments in quotes.

 - Macro: with-network-stream ((binding CONS) &body (body CONS)) :
          OBJECT
     Sets up an unwind-protected form which opens a network socket
     stream to a host and port for input and output and closes it
     afterwards.  Separate variables as provided in the call are bound
     to the input and output streams. Syntax is (WITH-NETWORK-STREAM
     (varIn varOut hostname port) body+)

 - Macro: with-permanent-objects (&body (body CONS)) : OBJECT
     Allocate `permanent' (as opposed to `transient') objects within
     the scope of this declaration.

 - Macro: with-system-definition ((systemnameexpression OBJECT)
          &body (body CONS)) : OBJECT
     Set *currentSystemDefinition* to the system definition named
     `system'.  Set *currentSystemDefinitionSubdirectory* to match.
     Execute BODY within that scope.

 - Macro: with-transient-objects (&body (body CONS)) : OBJECT
     Allocate `transient' (as opposed to `permanent') objects within
     the scope of this declaration.  CAUTION: The default assumption is
     the allocation of permanent objects.  The scope of
     `with-transient-objects' should be as small as possible, and the
     user has to make sure that code that wasn't explicitly written to
     account for transient objects will continue to work correctly.

 - Function: wrap-boolean ((value BOOLEAN)) : BOOLEAN-WRAPPER
     Return a literal object whose value is the BOOLEAN VALUE.

 - Function: wrap-function-code ((value FUNCTION-CODE)) :
          FUNCTION-CODE-WRAPPER
     Return a literal object whose value is the FUNCTION-CODE VALUE.

 - Function: wrap-integer-value ((value LONG-INTEGER)) : NUMBER-WRAPPER
     Return a literal object whose value is VALUE.  Choose a regular
     integer wrapper unless VALUE is too large and needs to be stored
     in a long wrapper.

 - Function: wrap-long-integer ((value LONG-INTEGER)) :
          LONG-INTEGER-WRAPPER
     Return a literal object whose value is the LONG-INTEGER VALUE.

 - Function: wrap-method-code ((value METHOD-CODE)) :
          METHOD-CODE-WRAPPER
     Return a literal object whose value is the METHOD-CODE VALUE.

 - Function: wrapped-type-to-type ((self TYPE)) : TYPE
     Return the unwrapped type for the wrapped type SELF, or SELF if it
     is not a wrapped type.

 - Function: wrapper-value-type ((self WRAPPER)) : TYPE
     Return the type of the value stored in the wrapper SELF.

 - Function: write-html-escaping-url-special-characters
          ((stream NATIVE-OUTPUT-STREAM) (input STRING)) :
     Writes a string and replaces unallowed URL characters according to
     RFC 2396 with %-format URL escape sequences.

 - Method on STORAGE-SLOT: writer (self) : SYMBOL
     Name of a method called to write the value of the slot SELF.

 - Function: xml-base-attribute? ((item OBJECT)) : BOOLEAN
     Return `true' if ITEM is an XML attribute object

 - Function: xml-declaration-form? ((form OBJECT)) : BOOLEAN
     Return `true' if FORM is a CONS headed by an XML DECLARATION tag

 - Function: xml-doctype-form? ((form OBJECT)) : BOOLEAN
     Return `true' if FORM is a CONS headed by a DOCTYPE tag

 - Function: xml-element-form? ((form OBJECT)) : BOOLEAN
     Return `true' if FORM is a CONS headed by an XML ELEMENT tag

 - Function: xml-global-attribute? ((item OBJECT)) : BOOLEAN
     Return `true' if ITEM is an XML attribute object

 - Function: xml-local-attribute? ((item OBJECT)) : BOOLEAN
     Return `true' if ITEM is an XML attribute object

 - Function: xml-processing-instruction-form? ((form OBJECT)) : BOOLEAN
     Return `true' if FORM is a CONS headed by an XML PROCESSING
     INSTRUCTION tag

 - Function: xml-processing-instruction? ((item OBJECT)) : BOOLEAN
     Return `true' if ITEM is an XML processing instruction object

 - Function: xml-token-list-to-s-expression
          ((tokenList TOKENIZER-TOKEN) (doctype XML-DOCTYPE)
          (doctype-definition? BOOLEAN)) : OBJECT
     Convert the XML TOKENLIST (using DOCTYPE for guidance) into a
     representative s-expression and return the result.    The DOCTYPE
     argument is currently only used for expansion of entity
     references.  It can be `null'.  The flag DOCTYPE-DEFINITION?
     should be true only when processing the DTD definition of a
     DOCTYPE tag, since it enables substitution of parameter entity
     values.

     Every XML tag is represented as a cons-list starting with the tag
     as its header, followed by a possibly empty list of keyword value
     pairs representing tag attributes, followed by a possibly empty
     list of content expressions which might themselves be XML
     expressions.  For example, the expression

     <a a1=v1 a2='v2'> foo <b a3=v3/> bar </a>

     becomes

     (<a> (<a1> "v1" <a2> "v2") "foo" (<b> (<a3> "v3")) "bar")

     when represented as an s-expression.  The tag names are subtypes
     of XML-OBJECT such as XML-ELEMENT, XML-LOCAL-ATTRIBUTE,
     XML-GLOBAL-ATTRIBUTE, etc.  ?, ! and [ prefixed tags are encoded
     as their own subtypes of XML-OBJECT, namely
     XML-PROCESSING-INSTRUCTION, XML-DECLARATION, XML-SPECIAL,
     XML-COMMENT, etc.  CDATA is an XML-SPECIAL tag with a name of
     CDATA.

     The name is available using class accessors.

 - Function: yield-define-stella-class ((class CLASS)) : CONS
     Return a cons tree that (when evaluated) constructs a Stella class
     object.

 - Function: zero-pad-integer ((value INTEGER) (size INTEGER)) : STRING
     Returns a string representing VALUE of at least length SIZE,
     padded if necessary with 0 characters.

 - Method on INTEGER: zero? (x) : BOOLEAN
     Return true if X is 0.

 - Method on LONG-INTEGER: zero? (x) : BOOLEAN
     Return true if X is 0.


@deffn Function add-taxonomy-node (@w{(graph @sc{taxonomy-graph})} @w{(node @sc{taxonomy-node})} @w{(root? @sc{boolean})}) : 
Add @var{node} to @var{graph}.  Mark it as a root node if @var{root?}
is @code{true}.  Even though this is part of the API, it should rarely be needed,
since @code{create-taxonomy-node} does everything that's necessary.
@end deffn

@deffn Function add-taxonomy-root (@w{(graph @sc{taxonomy-graph})} @w{(root @sc{taxonomy-node})}) : 
Add @var{root} as a root node to @var{graph}.  Only do this if
@var{root} does not have any parents and is not a @var{graph} root already.
@end deffn

@deffn Function all-taxonomy-nodes (@w{(graph @sc{taxonomy-graph})}) : @sc{(iterator of taxonomy-node)} 
Given a taxonomy @var{graph} that has been finalized,
return an iterator that generates all the graph's nodes.
@end deffn

@deffn Function clear-taxonomy-graph (@w{(graph @sc{taxonomy-graph})}) : 
Clear all taxonomy-graph-specific information of @var{graph},
but retain information about the native network and associated links.
@end deffn

@deffn Function clear-taxonomy-node (@w{(node @sc{taxonomy-node})}) : 
Clear all taxonomy-graph-specific information of @var{node},
but retain information about the native object and associated links.
@end deffn

@deffn Function create-taxonomy-node (@w{(graph @sc{taxonomy-graph})} @w{(node @sc{taxonomy-node})} @w{(nativeObject @sc{object})} @w{(root? @sc{boolean})}) : @sc{taxonomy-node} 
Link the taxonomy node @var{node} to @var{nativeObject} and add it
to @var{graph}.  If it is @code{null}, a new node will be created.  Mark it as a root
node if @var{root?} is @code{true}.  Return the node.
@end deffn

@deffn Function downcase-character (@w{(char @sc{character})}) : @sc{character} 
If @var{char} is uppercase, return its lowercase version,
otherwise, return @var{char} unmodified.
@end deffn

@deffn Function finalize-taxonomy-graph (@w{(graph @sc{taxonomy-graph})}) : 
Finalize the taxonomy graph @var{graph}.
@end deffn

@deffn Function find-taxonomy-node (@w{(graph @sc{taxonomy-graph})} @w{(label @sc{integer})}) : @sc{taxonomy-node} 
Return some node in @var{graph} with label @var{label}.
@end deffn

@deffn Function initialize-parsing-tables () : 
Create indices for recording transient symbols and
Common Lisp symbols while parsing.
@end deffn

@deffn Function initialize-taxonomy-graph (@w{(graph @sc{taxonomy-graph})}) : 
Completely clear the taxonomy graph @var{graph}.
NOTE: Any nodes associated with @var{graph} will not be cleared.  If they are
to be reused, they have to be cleared with @code{initialize-taxonomy-node}.
@end deffn

@deffn Function initialize-taxonomy-node (@w{(node @sc{taxonomy-node})}) : 
Completely clear and initialize @var{node}.
@end deffn

@deffn Function intern-bootstrap-symbol-at (@w{(name @sc{string})} @w{(offset @sc{integer})} @w{(kindofsym @sc{integer})}) : @sc{generalized-symbol} 
Interns a symbol, or keyword with
@var{name} and symbol-id @var{offset}.
If a symbol with that ID already existed, an error is signaled.  This
function is used to recreate the symbol table in a way where symbol IDs
which got hardwired into translated code will refer to the correct objects.
@end deffn

@deffn Function intern-permanent-symbol (@w{(name @sc{string})}) : @sc{symbol} 
Return a newly-created or existing permanent symbol with
name @var{name}.
@end deffn

@deffn Function intern-rigid-symbol-locally (@w{(name @sc{string})} @w{(module @sc{module})} @w{(kindofsym @sc{integer})}) : @sc{generalized-symbol} 
Return a newly-created or existing rigid symbol
interned into the module @var{module} with name @var{name}.
@end deffn

@deffn Function intern-rigid-symbol-wrt-module (@w{(name @sc{string})} @w{(module @sc{module})} @w{(kindofsym @sc{integer})}) : @sc{generalized-symbol} 
Return a newly-created or existing rigid symbol with
name @var{name}.
@end deffn

@deffn Function link-taxonomy-nodes (@w{(graph @sc{taxonomy-graph})} @w{(parent @sc{taxonomy-node})} @w{(child @sc{taxonomy-node})}) : 
Cross-link @var{parent} and @var{child} in @var{graph}.
IMPORTANT: This will automatically insert a backlink from @var{child} to
@var{parent}, so, for maximum efficiency it should not be called a second time
with the arguments reversed.
@end deffn

@deffn Function lookup-rigid-symbol (@w{(name @sc{string})} @w{(kindOfSym @sc{integer})}) : @sc{generalized-symbol} 
Return the permanent symbol with name @var{name} and type
@var{kindOfSym} visible from the current module (case-sensitive).
@end deffn

@deffn Macro phase-to-integer (@w{(startupTimePhase @sc{keyword})}) : @sc{object} 
Expands into the integer representing @var{startupTimePhase}.
@end deffn

@deffn Function register-slot-name (@w{(slot @sc{slot})}) : 
Register the name symbol of @var{slot} as a slot name, and
initialize its @code{symbol-slot-offset} so that it can be used by @code{lookup-slot}.
@end deffn

@deffn Function registered-slot-name? (@w{(slot-name @sc{symbol})}) : @sc{boolean} 
Return @code{true} if @var{slot-name} is the name of some registered;
slot in the system.
@end deffn

@deffn Function remove-taxonomy-node (@w{(graph @sc{taxonomy-graph})} @w{(node @sc{taxonomy-node})}) : 
Remove @var{node} from @var{graph} and disconnect incident links.
@end deffn

@deffn Function remove-taxonomy-root (@w{(graph @sc{taxonomy-graph})} @w{(root @sc{taxonomy-node})}) : 
Remove @var{root} from @var{graph}s root nodes.
@end deffn

@deffn Function resize-slot-caches (@w{(size @sc{integer})}) : 
Reset all slot caches to have size @var{size}.
@end deffn

@deffn Function string-concatenate (@w{(string1 @sc{string})} @w{(string2 @sc{string})}) : @sc{string} 
Return a new string representing the concatenation of
@var{string1} and @var{string2}.
@end deffn

@deffn Function taxonomy-root? (@w{(node @sc{taxonomy-node})}) : @sc{boolean} 
Return @code{true} if @var{node} is a taxonomy root node.
@end deffn

@deffn Function taxonomy-subnode-of? (@w{(sub-node @sc{taxonomy-node})} @w{(super-node @sc{taxonomy-node})}) : @sc{boolean} 
Return TRUE if @var{sub-node} is a descendant of @var{super-node}.
@end deffn

@deffn Function unlink-taxonomy-nodes (@w{(graph @sc{taxonomy-graph})} @w{(parent @sc{taxonomy-node})} @w{(child @sc{taxonomy-node})}) : 
Remove link between @var{parent} and @var{child}.
@end deffn

@deffn Function unregister-slot-name (@w{(slot @sc{slot})}) : 
Unregister the name symbol of @var{slot} as a slot name,
so that it can no longer be used by @code{lookup-slot}.
@end deffn

@deffn Function upcase-character (@w{(char @sc{character})}) : @sc{character} 
If @var{char} is lowercase, return its uppercase version,
otherwise, return @var{char} unmodified.
@end deffn

@deffn Function update-taxonomy-roots (@w{(graph @sc{taxonomy-graph})} @w{(node @sc{taxonomy-node})}) : 
Update @var{graph}s roots according to @var{node}s current state.
@end deffn

@defmethod @sc{abstract-hash-table} initialize-hash-table (self) : 
Insert a newly-created native hash table into @var{self}.
@end defmethod

@defmethod @sc{destructive-list-iterator} insert (self @w{(value @sc{(like (any-value self))})}) : 
Add @var{value} to the front of the list @var{self}.
@end defmethod

@defmethod @sc{float-hash-table} initialize-hash-table (self) : 
Insert a newly-created native hash table into @var{self}.
@end defmethod

@defmethod @sc{integer-hash-table} initialize-hash-table (self) : 
Insert a newly-created native hash table into @var{self}.
@end defmethod

@defmethod @sc{mutable-string} fifth-setter (self @w{(ch @sc{character})}) : @sc{character} 
Set the fifth character of @var{self} to @var{ch} and return @var{ch}.
@end defmethod

@defmethod @sc{mutable-string} first-setter (self @w{(ch @sc{character})}) : @sc{character} 
Set the first character of @var{self} to @var{ch} and return @var{ch}.
@end defmethod

@defmethod @sc{mutable-string} fourth-setter (self @w{(ch @sc{character})}) : @sc{character} 
Set the fourth character of @var{self} to @var{ch} and return @var{ch}.
@end defmethod

@defmethod @sc{mutable-string} nth-setter (self @w{(ch @sc{character})} @w{(position @sc{integer})}) : @sc{character} 
Set the character in @var{self} at @var{position} to @var{ch}.
@end defmethod

@defmethod @sc{mutable-string} second-setter (self @w{(ch @sc{character})}) : @sc{character} 
Set the second character of @var{self} to @var{ch} and return @var{ch}.
@end defmethod

@defmethod @sc{mutable-string} third-setter (self @w{(ch @sc{character})}) : @sc{character} 
Set the third character of @var{self} to @var{ch} and return @var{ch}.
@end defmethod

@defmethod @sc{native-vector} nth-setter (self @w{(value @sc{(like (any-value self))})} @w{(position @sc{integer})}) : @sc{(like (any-value self))} 
Set the element in @var{self} at @var{position} to @var{value}.
@end defmethod

@defmethod @sc{string-hash-table} initialize-hash-table (self) : 
Insert a newly-created native hash table into @var{self}.
@end defmethod

@defmethod @sc{string-to-integer-hash-table} initialize-hash-table (self) : 
Insert a newly-created native hash table into @var{self}.
@end defmethod

@defmethod @sc{unknown} defined? (x) : @sc{boolean} 
Return true if @var{x} is defined (handled specially by all translators).
@end defmethod

@defmethod @sc{unknown} null? (x) : @sc{boolean} 
Return true if @var{x} is undefined (handled specially by all translators).
@end defmethod


;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;; BEGIN LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
; Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          ;
;                                                                            ;
; The contents of this file are subject to the Mozilla Public License        ;
; Version 1.1 (the "License"); you may not use this file except in           ;
; compliance with the License. You may obtain a copy of the License at       ;
; http://www.mozilla.org/MPL/                                                ;
;                                                                            ;
; Software distributed under the License is distributed on an "AS IS" basis, ;
; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   ;
; for the specific language governing rights and limitations under the       ;
; License.                                                                   ;
;                                                                            ;
; The Original Code is the STELLA Programming Language.                      ;
;                                                                            ;
; The Initial Developer of the Original Code is                              ;
; UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          ;
; 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               ;
;                                                                            ;
; Portions created by the Initial Developer are Copyright (C) 1996-2006      ;
; the Initial Developer. All Rights Reserved.                                ;
;                                                                            ;
; Contributor(s):                                                            ;
;                                                                            ;
; Alternatively, the contents of this file may be used under the terms of    ;
; either the GNU General Public License Version 2 or later (the "GPL"), or   ;
; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   ;
; in which case the provisions of the GPL or the LGPL are applicable instead ;
; of those above. If you wish to allow use of your version of this file only ;
; under the terms of either the GPL or the LGPL, and not to allow others to  ;
; use your version of this file under the terms of the MPL, indicate your    ;
; decision by deleting the provisions above and replace them with the notice ;
; and other provisions required by the GPL or the LGPL. If you do not delete ;
; the provisions above, a recipient may use your version of this file under  ;
; the terms of any one of the MPL, the GPL or the LGPL.                      ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Version: dynamic-slots.ste,v 1.26 2006/05/11 07:06:01 hans Exp

;;; Support for accessing dynamic slots.

(in-package "STELLA")

(in-module "/STELLA")


;; Example translations for read access:
;;
;;   (slot-allocation this-slot) =>
;;
;;   (cast (dynamic-slot-value this-slot (quote slot-allocation) NULL)
;;         KEYWORD)
;;
;;   (class-documentation this-class) =>
;;
;;   (wrapper-value
;;     (cast (dynamic-slot-value this-class (quote class-documentation)
;;                               NULL-STRING-WRAPPER)
;;           STRING-WRAPPER))
;;
;; Example translations for write access:
;;
;;   (setf (slot-allocation this-slot) newalloc) =>
;;
;;   (cast (set-dynamic-slot-value this-slot (quote slot-allocation)
;;                                 newalloc NULL)
;;         KEYWORD)
;;
;;   (setf (class-documentation this-class) "newdoc") => 
;;
;;   (wrapper-value
;;    (cast (set-dynamic-slot-value this-class (quote class-documentation)
;;                                  (wrap-string "newdoc") NULL-STRING-WRAPPER)
;;          STRING-WRAPPER))


;; Access support:

(defun (dynamic-slot-value OBJECT) ((dynamicSlots KEY-VALUE-LIST)
                                    (slotName SYMBOL)
                                    (nullValue OBJECT))
  :public? TRUE
  ;; Read the value of slot 'slotName' in 'dynamicSlots'.
  ;;    If the slot is undefined, return 'nullValue'.
  (foreach (key value) in dynamicSlots
      where (eq? key slotName)
      do (if (null? value)
             (return nullValue)
           (return value)))
  (return nullValue))

(defun (set-dynamic-slot-value OBJECT)
    ((dynamicSlots KEY-VALUE-LIST) (slotName SYMBOL)
     (value OBJECT) (nullWrapper WRAPPER))
  :public? TRUE
  ;; Set the value of slot 'slotName' in 'dynamicSlots' to 'value'
  ;;    and return 'value'.
  ;; If slot has a literal type, 'nullWrapper' has to be its associated
  ;;    null-wrapper.
  (let ((deleteValue?
         (and (eq? value nullWrapper)
              ;; Special-case BOOLEAN slots which don't have a NULL value,
              ;;    otherwise, we couldn't override a :default TRUE value
              ;;    (see `wrap-with-default-value-and-return-code'):
              (not (eq? nullWrapper FALSE-WRAPPER))))
        (cursor (the-kv-list dynamicSlots)))
    (while (defined? cursor)
      (when (eql? (key cursor) slotName)
        (if deleteValue?
            ;; If the new value is NULL free the entry (since this is somewhat
            ;;    of a special case, we don't optimize it nor slow every other
            ;;    access down by using a trailing pointer):
            (remove-at dynamicSlots slotName)
          (setf (value cursor) value))
        (return value))
      (setq cursor (rest cursor)))
    (when (not deleteValue?)
      (setf (the-kv-list dynamicSlots)
        (kv-cons slotName value (the-kv-list dynamicSlots))))
    (return value)))

;; Translation support:

(defun (standard-dynamic-slot-access? BOOLEAN) ((slot STORAGE-SLOT))
  ;; Return TRUE if 'slot' can be accessed with a standard dynamic
  ;;    slot access function.
  (return (and (not (active? slot))
               (eq? (allocation slot) :dynamic)
               (or (not (slot-value-is-bare-literal? slot))
                   (defined? (lookup-literal-type-info
                              (slot-base-type slot) :null-wrapper))))))

(defun (yield-down-cast-tree CONS) ((tree CONS) (returnType TYPE-SPEC))
  ;; Wrap 'tree' such that a proper cast from OBJECT to 'returnType'
  ;;   gets generated if 'tree' is used in an expression.
  (let ((oTree (sys-tree tree returnType)))
    (unless (eql? (translator-output-language) :common-lisp)
      (set-target-language-type oTree @OBJECT))
    (return oTree)))

(defun (yield-standard-dynamic-slot-value-tree CONS)
    ((slot STORAGE-SLOT) (objectRef OBJECT) (returnType TYPE-SPEC))
  ;; Return a parse tree to read 'slot' on 'objectRef' with help of
  ;;    'dynamic-slot-value'.
  ;; A most specific 'returnType' has to be supplied so that an
  ;;    appropriate cast can be generated in case the 'slot'
  ;;    had a parameterized type.
  (let (;; resolve renaming chains:
        (slotName (slot-name (canonical-slot slot))))
    (if (slot-value-is-bare-literal? slot)
        (return
          (bquote
           (wrapper-value
            (safe-cast
             (dynamic-slot-value
              (dynamic-slots & objectRef) (quote & slotName)
              & (lookup-literal-type-info (type slot) :null-wrapper))
             & (type-to-symbol
                (type-to-wrapped-type (type slot)))))))
      (return
        (yield-down-cast-tree
         (walk-a-cons-tree
          (bquote (dynamic-slot-value
                   (dynamic-slots & objectRef) (quote & slotName) NULL)))
         returnType)))))

(defun (yield-standard-dynamic-slot-value-setter-tree CONS)
    ((slot STORAGE-SLOT) (objectRef OBJECT)
     (valueRef OBJECT) (returnType TYPE-SPEC))
  ;; Return a parse tree to set a slot with 'set-dynamic-slot-value'.
  (let (;; resolve renaming chains:
        (slotName (slot-name (canonical-slot slot)))
        (literalSlot? (slot-value-is-bare-literal? slot))
        (setterTree CONS NULL))
    (if literalSlot?
        (setq setterTree
          (bquote
           (set-dynamic-slot-value
            (dynamic-slots & objectRef)
            (bquote & slotName)
            (& (lookup-literal-type-info (type slot) :wrap-function)
               & valueRef)
            & (lookup-literal-type-info (type slot) :null-wrapper))))
      (setq setterTree
        (bquote
         (set-dynamic-slot-value
          (dynamic-slots & objectRef) (bquote & slotName) & valueRef NULL))))
    (when (walking-expression?)
      ;; Make sure we properly access and cast the returned slot value:
      (if literalSlot?
          (setq setterTree
            (bquote
             (wrapper-value
              (safe-cast
               & setterTree
               & (type-to-symbol (type-to-wrapped-type (type slot)))))))
        (setq setterTree
          (yield-down-cast-tree
           (walk-a-cons-tree setterTree)
           returnType))))
    (return setterTree)))

;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;; BEGIN LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
; Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          ;
;                                                                            ;
; The contents of this file are subject to the Mozilla Public License        ;
; Version 1.1 (the "License"); you may not use this file except in           ;
; compliance with the License. You may obtain a copy of the License at       ;
; http://www.mozilla.org/MPL/                                                ;
;                                                                            ;
; Software distributed under the License is distributed on an "AS IS" basis, ;
; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   ;
; for the specific language governing rights and limitations under the       ;
; License.                                                                   ;
;                                                                            ;
; The Original Code is the PowerLoom KR&R System.                            ;
;                                                                            ;
; The Initial Developer of the Original Code is                              ;
; UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          ;
; 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               ;
;                                                                            ;
; Portions created by the Initial Developer are Copyright (C) 2000-2010      ;
; the Initial Developer. All Rights Reserved.                                ;
;                                                                            ;
; Contributor(s):                                                            ;
;                                                                            ;
; Alternatively, the contents of this file may be used under the terms of    ;
; either the GNU General Public License Version 2 or later (the "GPL"), or   ;
; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   ;
; in which case the provisions of the GPL or the LGPL are applicable instead ;
; of those above. If you wish to allow use of your version of this file only ;
; under the terms of either the GPL or the LGPL, and not to allow others to  ;
; use your version of this file under the terms of the MPL, indicate your    ;
; decision by deleting the provisions above and replace them with the notice ;
; and other provisions required by the GPL or the LGPL. If you do not delete ;
; the provisions above, a recipient may use your version of this file under  ;
; the terms of any one of the MPL, the GPL or the LGPL.                      ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Version: html-pprint.ste,v 1.11 2010/02/12 20:20:17 hans Exp

(in-package "STELLA")

(in-module "ONTOSAURUS")


#|
(pprint-object prop cl:*standard-output*)
  =>
(forall (?X1)
    (<= (HAPPY ?X1)
        (MARRIED ?X1)))
"))"

(eval (setq *pprint-atomic-object-renderer*
	(function-code (cast (get "PPRINT-ATOMIC-OBJECT-FOR-HTML") METHOD-SLOT))))
 =>
#<Interpreted Function PPRINT-ATOMIC-OBJECT-FOR-HTML>
(pprint-object prop cl:*standard-output*)
 =>
(forall (?X1)
    (<= (<A HREF='/ploom/ontosaurus/do-action?show+object+PL-USER+HAPPY'>HAPPY</A> ?X1)
        (<A HREF='/ploom/ontosaurus/do-action?show+object+PL-USER+MARRIED'>MARRIED</A> ?X1)))
"))"

(eval (setq *pprint-atomic-object-renderer* null))
 => NULL
(pprint-object prop cl:*standard-output*)
 =>
(forall (?X1)
    (<= (HAPPY ?X1)
        (MARRIED ?X1)))
"))"
|#

(defun pprint-atomic-object-for-html-definition ((self OBJECT) (stream NATIVE-OUTPUT-STREAM))
  :PUBLIC? TRUE
  (unless (null? self)
    (typecase self
      (SYMBOL (let ((object (get-instance self)))
		(if (defined? object)
		    (pprint-atomic-object-for-html object stream)
		  (pprint-atomic-object-for-html self stream))))
      (otherwise
       (pprint-atomic-object-for-html self stream)))))

(defun pprint-atomic-object-for-html ((self OBJECT) (stream NATIVE-OUTPUT-STREAM))
  :PUBLIC? TRUE
  (unless (null? self)
    (typecase self
      (LITERAL-WRAPPER
       (pprint-literal-wrapper-for-html self stream))
      (PATTERN-VARIABLE 
       (pprint-atomic-object self stream))
      (SKOLEM   ;; Revisit
       (cond ((defined? (native-value-of self))
	      ;(pprint-atomic-object (native-value-of self) stream)
              (pprint-atomic-object-for-html (native-value-of self) stream))
	     ((defined? (innermost-of self))
	      (if (eq? (innermost-of self) self)
                (if (defined? (defining-proposition self))
                  ;; Should this also have the VALUE-OF-SEPARATOR?
                  (pprint-function-term (defining-proposition self) stream)
		  (with-html-tag ("FONT COLOR='#666666'" stream)
		    (print-stream stream (string-downcase (get-skolem-print-name self)))))
		(progn 
		  (with-html-tag ("FONT COLOR='#996633'" stream)
		    (print-stream stream (string-downcase (get-skolem-print-name self)))
		    (print-stream stream VALUE-OF-SEPARATOR))
		  (pprint-object (innermost-of self) stream))))
	     (otherwise 
	      (print-stream stream (generate-skolem self)))))
      (LOGIC-OBJECT
       (if (defined? (surrogate-value-inverse self))
	 (print-ontosaurus-url self stream)
	 (print-stream stream "Unamed_Object")))
      (SURROGATE 
       (if (defined? (surrogate-value self))
	 (pprint-object (surrogate-value self) stream)
	 (print-stream stream (operator-to-string self))))
      (GENERALIZED-SYMBOL
       (write-html-quoting-special-characters stream (symbol-name self)))
      (MODULE
       (html-write-href stream *ontosaurus-url-action* "context" self))
      (LOGIC-THING
       ;; If there is no term generator, an exception is thrown.  So we
       ;;   will catch it here and just print it using native printing.
       (exception-case (pprint-object (generate-term self) stream)
         (TERM-GENERATION-EXCEPTION ()
           (print-stream stream self))))
      (THING
       (if (defined? (surrogate-value-inverse self))
	 (print-stream stream (symbol-name (surrogate-value-inverse self)))
	 (print-stream stream self))
       )
      (otherwise
       (print-stream stream self)))) )

(defun pprint-literal-wrapper-for-html ((self LITERAL-WRAPPER) (stream NATIVE-OUTPUT-STREAM))
  (typecase self
    (BOOLEAN-WRAPPER (print-stream stream (wrapper-value self)))
    (INTEGER-WRAPPER (print-stream stream (wrapper-value self)))
    (FLOAT-WRAPPER   (print-stream stream (wrapper-value self)))
    ;; TO DO: Maybe print this differently?
    (CHARACTER-WRAPPER 
     (write-html-character-quoting-special-characters stream (wrapper-value self)))
    ((STRING-WRAPPER MUTABLE-STRING-WRAPPER)
     (when *printReadably?*
       (print-stream stream "\""))
     (write-html-quoting-special-characters stream (wrapper-value self))
     (when *printReadably?*
       (print-stream stream "\"")))))


(defspecial *ontosaurus-url-action* STRING "show"
  :documentation "The action parameter for URL printing"
  :PUBLIC? TRUE)

(defun (logic-object-display-type STRING) ((obj LOGIC-OBJECT))
  ;; Returns one of "instance", "relation", "concept", "context", "object".
  (typecase obj
    (DESCRIPTION (return "relation"))  ;; TO DO: differentiate btwn concept/relation
    (otherwise (return "object"))) )

(defun print-ontosaurus-url
    ((the-object LOGIC-OBJECT) (nativeStream NATIVE-OUTPUT-STREAM))
  :PUBLIC? TRUE
  :documentation "Prints a URL following PowerLoom Ontosaurus conventions."
 (html-write-href nativeStream
		  *ontosaurus-url-action* 
		  (logic-object-display-type the-object)
		  the-object))

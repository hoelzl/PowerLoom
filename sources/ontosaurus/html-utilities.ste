;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;; BEGIN LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
; Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          ;
;                                                                            ;
; The contents of this file are subject to the Mozilla Public License        ;
; Version 1.1 (the "License"); you may not use this file except in           ;
; compliance with the License. You may obtain a copy of the License at       ;
; http://www.mozilla.org/MPL/                                                ;
;                                                                            ;
; Software distributed under the License is distributed on an "AS IS" basis, ;
; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   ;
; for the specific language governing rights and limitations under the       ;
; License.                                                                   ;
;                                                                            ;
; The Original Code is the PowerLoom KR&R System.                            ;
;                                                                            ;
; The Initial Developer of the Original Code is                              ;
; UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          ;
; 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               ;
;                                                                            ;
; Portions created by the Initial Developer are Copyright (C) 2000-2010      ;
; the Initial Developer. All Rights Reserved.                                ;
;                                                                            ;
; Contributor(s):                                                            ;
;                                                                            ;
; Alternatively, the contents of this file may be used under the terms of    ;
; either the GNU General Public License Version 2 or later (the "GPL"), or   ;
; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   ;
; in which case the provisions of the GPL or the LGPL are applicable instead ;
; of those above. If you wish to allow use of your version of this file only ;
; under the terms of either the GPL or the LGPL, and not to allow others to  ;
; use your version of this file under the terms of the MPL, indicate your    ;
; decision by deleting the provisions above and replace them with the notice ;
; and other provisions required by the GPL or the LGPL. If you do not delete ;
; the provisions above, a recipient may use your version of this file under  ;
; the terms of any one of the MPL, the GPL or the LGPL.                      ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Version: html-utilities.ste,v 1.17 2010/02/12 20:22:25 hans Exp

(in-package "STELLA")

(in-module "ONTOSAURUS")


(defglobal *error-background-color* STRING "FF9999")
(defglobal *standard-background-color* STRING "99CCFF")
(defglobal *module-background-color* STRING "9999CC")
(defglobal *control-background-color* STRING "6699CC")  ;; 999999
(defglobal *answer-background-color* STRING "99FFFF")
(defglobal *form-background-color* STRING "6699CC")
(defglobal *href-prefix-tag* STRING "FONT COLOR='#666666' SIZE=-1"
  :documentation "Tag used for prefix part of HREF generation in
`html-write-3part-href-in-detail'.")
(defglobal *href-suffix-tag* STRING "FONT COLOR='#666666' SIZE=-1"
  :documentation "Tag used for suffix part of HREF generation in
`html-write-3part-href-in-detail'.")


(defun (make-html-body-tag STRING) ((backgroundColor STRING))
  ;; Return a BODY tag for use in `with-html-tag' whose background color
  ;; is set to `backgroundColor' (defaults to `*standard-background-color*').
  (when (null? backgroundColor)
    (setq backgroundColor *standard-background-color*))
  (return (concatenate "BODY BGCOLOR='" backgroundColor "'")))


(defun html-line-break ((stream NATIVE-OUTPUT-STREAM))
  (print-stream stream "<BR>" EOL))


(defun html-write-url-in-detail ((stream NATIVE-OUTPUT-STREAM) 
				 (action STRING)
				 (objectType STRING)
				 (contextName STRING)
				 (objectName STRING))
  (print-stream stream "/ploom/ontosaurus/do-action?" action "+" objectType "+")
  (write-html-escaping-url-special-characters stream contextName)
  (print-stream stream "+")
  (write-html-escaping-url-special-characters stream objectName))

(defun html-write-3part-href-in-detail ((stream NATIVE-OUTPUT-STREAM) 
				        (target STRING)
				        (action STRING)
				        (object-type STRING)
				        (context-name STRING)
				        (object-name STRING)
                                        (object-title-prefix STRING)
				        (object-title STRING)
                                        (object-title-suffix STRING)
				        (rawTitle? BOOLEAN))
  (print-stream stream "<A ")
  (when (defined? target)
    (print-stream stream "TARGET='" target "' "))
  (print-stream stream "HREF='")
  (html-write-url-in-detail stream action object-type context-name object-name)
  (print-stream stream "'>")
  (if rawTitle?
      (print-stream stream object-title-prefix object-title object-title-suffix)
      (progn
	(when (and (defined? object-title-prefix)
		   (not (empty? object-title-prefix)))
	  (with-html-tag (*href-prefix-tag* stream)
	    (write-html-quoting-special-characters stream object-title-prefix)))
        (write-html-quoting-special-characters stream object-title)
	(when (and (defined? object-title-suffix)
		   (not (empty? object-title-suffix)))
	  (with-html-tag (*href-suffix-tag* stream)
	    (write-html-quoting-special-characters stream object-title-suffix)))))
  (print-stream stream "</A>")
  (return))

(defun html-write-href-in-detail ((stream NATIVE-OUTPUT-STREAM) 
				 (target STRING)
				 (action STRING)
				 (objectType STRING)
				 (contextName STRING)
				 (objectName STRING)
				 (objectTitle STRING)
				 (rawTitle? BOOLEAN))
  (html-write-3part-href-in-detail
   stream target action objectType contextName objectName "" objectTitle "" rawTitle?))

(defun html-write-href ((stream NATIVE-OUTPUT-STREAM) 
		       (action STRING)
		       (objectType STRING)
		       (object STANDARD-OBJECT))
  (typecase object
    (LOGIC-OBJECT
     (let ((writeModule (home-module object))
           (name (object-name object))
           (write-name (local-print-name name FALSE))
           (module-prefix (choose (visible-symbol? name) 
                                  "" 
                                  (concatenate (module-full-name (interned-in name))
                                               MODULE-SEPARATOR-STRING))))
       (when (and (isa? *module* @MODULE)
		  (member? (all-super-contexts *module*) writeModule))
	 (setq writeModule *module*))
       (html-write-3part-href-in-detail stream 
				        NULL
				        action
				        objectType
				        (name writeModule)
				        (visible-name name TRUE)
                                        module-prefix
				        write-name
                                        ""
				        FALSE) ))
    (MODULE
     (html-write-href-in-detail stream 
			       NULL
			       action
			       objectType
			       (name object)
			       (name object)
			       (name object)
			       FALSE) )
    (otherwise
     (print STANDARD-ERROR "Don't know how to write HREF for object" object)
     (print-stream stream object)))
  (return))

(defun html-write-url ((stream NATIVE-OUTPUT-STREAM) 
		       (action STRING)
		       (object STANDARD-OBJECT))
  (let ((objectType STRING NULL))
    (typecase object
      (LOGIC-OBJECT
       (let ((writeModule (home-module object)))
	 (when (and (isa? *module* @MODULE)
		    (member? (all-super-contexts *module*) writeModule))
	   (setq writeModule *module*))
	 (cond ((class? object)
		(setq objectType "concept"))
	       ((relation? object)
		(setq objectType "relation"))
	       (otherwise
		(setq objectType "object")))
	 (html-write-url-in-detail stream 
				   action
				   objectType
				   (name writeModule)
				   (visible-name (object-name object) TRUE)) ))
      (MODULE
       (html-write-url-in-detail stream 
				 action
				 "context"
				 (name object)
				 (name object)) )
      (otherwise
       (print-stream STANDARD-ERROR "Don't know how to write URL for object " object EOL)))
    (return)))

(defun html-write-javascript ((stream NATIVE-OUTPUT-STREAM) (js STRING))
  (print-stream stream 
		"<SCRIPT LANGUAGE=\"JAVASCRIPT\"><!-- Hide from old browsers" 
		EOL js EOL "// end hiding from old browsers -->" EOL "</SCRIPT>"
		EOL)
  (return))

(defun html-write-header-with-table 
    ((stream NATIVE-OUTPUT-STREAM) (title STRING) (head STRING))
  (with-html-tag ("TABLE WIDTH='100%'" stream true)
    (print-stream stream EOL)
    (with-html-tag ("TR" stream true)
      (with-html-tag ("TD ALIGN='LEFT'" stream true)
	(with-html-tag ("B" stream)
	  (write-html-quoting-special-characters stream title)))
      (with-html-tag ("TD ALIGN='RIGHT'" stream)
	(with-html-tag ("FONT SIZE=3 COLOR='#663333'" stream) ; Indian Red: 4E2F2F
	  (write-html-quoting-special-characters stream head)))))
  (return))

(defun write-bookmark-icon ((instance LOGIC-OBJECT) (stream NATIVE-OUTPUT-STREAM))
  (html-write-href-in-detail 
   stream
   "bookmark"
   "bookmark"
   "object"
   (name (home-module instance))
   (visible-name (object-name instance) TRUE)
   "<IMG SRC='/ploom/icons/bookmark.gif' ALT='&lt;mark&gt;' BORDER='0' WIDTH='14' HEIGHT='15' />&nbsp;Bookmark</A>"
   TRUE) )

(defun html-emit-image ((stream NATIVE-OUTPUT-STREAM)
			(imageURL STRING)
			(alternateText STRING)
			(width INTEGER)
			(height INTEGER)
			(alignment STRING)
			(border INTEGER))
  (print-stream stream "<IMG SRC='" imageURL "'")
  (when (defined? alternateText)
    (print-stream stream " ALT='" alternateText "'"))
  (when (defined? width)
    (print-stream stream " WIDTH=" width))
  (when (defined? height)
    (print-stream stream " HEIGHT=" height))
  (when (defined? alignment)
    (print-stream stream " ALIGN='" alignment "'"))
  (if (defined? border)
    (print-stream stream " BORDER='" border "'/>")
    (print-stream stream " BORDER='0'/>"))
  (return))

(defun html-display-string-in-paragraphs ((s STRING) (stream NATIVE-OUTPUT-STREAM))
  ;; Display "s", separating into paragraphs where two EOLs appear together
  (let ((start 0)
	(pos 0))
    (while (defined? pos)
      (setq pos (string-search s "

" start))
      (with-html-tag ("P" stream true)
	(write-html-quoting-special-characters stream (subsequence s start pos)))
      (unless (null? pos)
	(setq start (+ pos 2)))) ))

       
;;;;; TRAILER

(defglobal *powerloom-copyright-trailer* STRING
           (concatenate
             *powerloom-version-string*
             "<BR>"             
             "Copyright 2000-"
             (integer-to-string (get-calendar-date (make-current-date-time) (get-local-time-zone)))
             " University of Southern California Information Sciences Institute"))
  
(defun write-powerloom-trailer ((stream NATIVE-OUTPUT-STREAM))
  ;; Writes the last line attribution information.
  (print-stream stream *powerloom-copyright-trailer*))

;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;; BEGIN LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
; Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          ;
;                                                                            ;
; The contents of this file are subject to the Mozilla Public License        ;
; Version 1.1 (the "License"); you may not use this file except in           ;
; compliance with the License. You may obtain a copy of the License at       ;
; http://www.mozilla.org/MPL/                                                ;
;                                                                            ;
; Software distributed under the License is distributed on an "AS IS" basis, ;
; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   ;
; for the specific language governing rights and limitations under the       ;
; License.                                                                   ;
;                                                                            ;
; The Original Code is the PowerLoom KR&R System.                            ;
;                                                                            ;
; The Initial Developer of the Original Code is                              ;
; UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          ;
; 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               ;
;                                                                            ;
; Portions created by the Initial Developer are Copyright (C) 2000-2010      ;
; the Initial Developer. All Rights Reserved.                                ;
;                                                                            ;
; Contributor(s):                                                            ;
;                                                                            ;
; Alternatively, the contents of this file may be used under the terms of    ;
; either the GNU General Public License Version 2 or later (the "GPL"), or   ;
; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   ;
; in which case the provisions of the GPL or the LGPL are applicable instead ;
; of those above. If you wish to allow use of your version of this file only ;
; under the terms of either the GPL or the LGPL, and not to allow others to  ;
; use your version of this file under the terms of the MPL, indicate your    ;
; decision by deleting the provisions above and replace them with the notice ;
; and other provisions required by the GPL or the LGPL. If you do not delete ;
; the provisions above, a recipient may use your version of this file under  ;
; the terms of any one of the MPL, the GPL or the LGPL.                      ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Version: html-print.ste,v 1.3 2010/01/12 01:28:54 hans Exp

;;; Routines that print logic objects with URLs as needed by Ontosaurus.

(in-package "STELLA")

(in-module "ONTOSAURUS")


  ;;
;;;;;; Print functions called for HTML printing
  ;;

(defun html-print-top-level-object 
       ((self OBJECT) (nativeStream NATIVE-OUTPUT-STREAM))
  ;; Print 'self' to a native stream.  Used by :print-form.
  (let ((stream (wrap-native-output-stream nativeStream)))
    (when (deleted? self)
      (print-stream stream "#DELETED#"))
    (typecase self
      (DESCRIPTION (html-print-description self stream TRUE))
      (PATTERN-VARIABLE 
       (print-stream stream "|V|")
       (html-print-variable self stream))
      (SKOLEM (html-print-skolem self stream TRUE))
      (LOGIC-OBJECT (html-print-logic-object self stream TRUE))
      (PROPOSITION (html-print-proposition self stream TRUE))
      (otherwise (print-stream stream self))) ))
  

  ;;
;;;;;; Printing skolems and propositions
  ;;

(defun html-print-object-name ((self OBJECT) (stream OUTPUT-STREAM))
  ;; Print the name of 'self' to 'stream'.
  ;; Exists to avoid calling the default print-form, so that
  ;;    we have more control of the final output.
  (typecase self
    (SKOLEM
     (print-stream stream (string-downcase (get-skolem-print-name self))))
    (LOGIC-OBJECT (print-logic-object self stream FALSE))
    (INTEGER-WRAPPER (print-stream stream (wrapper-value self)))
    (FLOAT-WRAPPER (print-stream stream (wrapper-value self)))
    (STRING-WRAPPER (print-stream stream (wrapper-value self)))
    (otherwise (print-stream stream self))) )


(defun html-print-logic-object 
       ((self LOGIC-OBJECT) (stream OUTPUT-STREAM) (topLevel? BOOLEAN))
  ;; Print a logic object.
  (let ((prefix (choose topLevel? "|i|" ""))
	(sv-inverse (surrogate-value-inverse self)))
    (cond
     ((defined? sv-inverse)
      (cond ((not (eql? (surrogate-value sv-inverse) self))
	     (with-html-tag ("FONT COLOR='#CC0000" stream)
	       (print-stream stream "|BAD surrogate|"
			     (symbol-name (surrogate-value-inverse self)))))
	    ((class? self)
	     (html-write-href stream "show" "concept" self))
	    ((relation? self)
	     (html-write-href stream "show" "relation" self))
	    (otherwise
	     (html-write-href stream "show" "object" self))))
     ((eql? self TRUE-TRUTH-VALUE) (print-stream stream "TRUE-TV"))
     ((eql? self FALSE-TRUTH-VALUE) (print-stream stream "FALSE-TV"))
     ((eql? self DEFAULT-TRUE-TRUTH-VALUE)
      (print-stream stream "DEFAULT-TRUE-TV"))
     ((eql? self DEFAULT-FALSE-TRUTH-VALUE)
      (print-stream stream "DEFAULT-FALSE-TV"))
     (otherwise
      (if (defined? (root-type self))
        (print-stream stream prefix "_" (symbol-name (root-type self)))
        (print-stream stream prefix "_" (symbol-name @THING))))) ))

(defun html-print-value-of-chain 
       ((self SKOLEM) (stream OUTPUT-STREAM) (chainEnd OBJECT))
  ;; Help 'html-print-variable' and 'html-print-skolem' by printing out members
  ;;    of value-of chains, separated by '/'s.
  (when (null? chainEnd)
    (setq chainEnd self))
  (case *printMode*
    ((:REALISTIC :ORIGINAL) 
     ;; EXPERIMENT:
     (typecase self
       (PATTERN-VARIABLE
        (special ((*printMode* :FLAT))
          (print-value-of-chain self stream chainEnd)))
       (otherwise
        (print-object-name chainEnd stream))))
    ((:FLAT :DEBUG-LOW)
     (print-stream stream (string-downcase (get-skolem-print-name self)))
     (when (eql? self chainEnd)
       (return))
     (print-stream stream VALUE-OF-SEPARATOR)
     (print-object-name chainEnd stream))
    (:DEBUG-HIGH
     (print-stream stream (get-skolem-print-name self))
     (when (eql? self chainEnd)
       (return))
     (let ((cursor OBJECT self)
           (nextValue OBJECT NULL))
       (loop
         (typecase cursor
           (SKOLEM (setq nextValue (variable-value cursor)))
           (LOGIC-OBJECT (setq nextValue cursor))
           (SURROGATE (setq nextValue (surrogate-value cursor)))
           (RELATION (setq nextValue (description cursor))))
         (print-stream stream VALUE-OF-SEPARATOR)
         (print-object-name nextValue stream)
         (when (eql? nextValue chainEnd)
           (break))
         (setq cursor nextValue))))) )

(defun html-print-value ((self OBJECT) (stream OUTPUT-STREAM))
  ;; Print out a skolem's value
  (typecase self
    ((INTEGER-WRAPPER FLOAT-WRAPPER STRING-WRAPPER CHARACTER-WRAPPER)
     (print-stream stream (wrapper-value self)))
    (otherwise (print-stream stream self))))

(defun html-print-skolem ((self SKOLEM) (stream OUTPUT-STREAM) (topLevel? BOOLEAN))
  ;; Print a skolem.
  (let ((prefix "|SK|"))
    (case *printMode*
      ((:ORIGINAL :REALISTIC)
       (setq prefix "")
       (when (defined? (native-value-of self))
         (html-print-value (native-value-of self) stream)
         (return)))
      (otherwise NULL))
    ;; EXPERIMENT:
    (when (and (defined? (defining-proposition self))
               (null? (variable-value self)))
      (print-stream stream prefix)
      (special ((*printLogicalFormStream* stream)
                (*indentCounter* 20))
        (html-print-kif-FUNCTION-expression (defining-proposition self)))
      (return))
    (html-print-value-of-chain self stream (innermost-of self))))

(defun html-print-variable ((self PATTERN-VARIABLE) (stream OUTPUT-STREAM))
  ;; Print a variable.
  (when (printing-proposition-record?)
    (pretty-print-logical-form (proposition-record-value-of self) stream)
    (return))
  (when (and (defined? (bound-to-offset self))
             (defined? *queryIterator*)
             (defined? 
               (variable-bindings (current-pattern-record *queryIterator*)))
             (< (bound-to-offset self) 
                (length 
                 (variable-bindings (current-pattern-record *queryIterator*)))))
    (let ((value (choose (defined? *printInFrame*)
                         (bound-to-in-frame self *printInFrame*)
                         (bound-to self))))
      (when (defined? value)
        (print-stream stream (string-downcase (get-skolem-print-name self))
                      VARIABLE-BINDING-SEPARATOR)
        (if (isa? value @PATTERN-VARIABLE)
          ;; tricky: if 'value' is itself a pattern value, print it
          ;;    as an instance, not as a variable (this happens inside
          ;;    of the subsumption test):
          (print-stream stream (get-skolem-print-name value))
          (html-print-top-level-object value (native-stream stream)))
        (return))))
  (html-print-value-of-chain self stream (innermost-of self)) )

(defun html-print-quantified-variable 
       ((self PATTERN-VARIABLE) (stream OUTPUT-STREAM))
  ;; Print the 'name' of the variable 'self'.  In some debug modes,
  ;;    also print its binding.
  (html-print-variable self stream) )

(defun html-print-proposition
    ((self PROPOSITION) (stream OUTPUT-STREAM) (topLevel? BOOLEAN))
  ;; Print a top-level proposition.
  (let ((prefix STRING NULL)
	(color STRING "'#000000'"))
    (when (deleted? self)
      (with-html-tag ("FONT COLOR='#FF0000'" stream)
	(print-stream stream "|dElEtEd-proposition|"))
      (return))
    (when topLevel?
      (cond
       ((default-true? self) 
	(setq prefix "|p|")
	(setq color "'#339933'"))
       ((true? self) 
	(setq prefix "|P|")
	(setq color "'#00CC33'"))
       ((default-false? self) 
	(setq prefix "|p~|")
	(setq color "'#CC9900'"))
       ((false? self) 
	(setq prefix "|P~|")
	(setq color "'#FF9900'"))
       (otherwise 
	(setq prefix "|P?|")
	(setq color "'#999999'"))))
    (when (unfastened? self)
      (setq prefix "|uP|")
      (setq color "'#993399'"))
    (when (and (defined? (surrogate-value-inverse self))
               (not (eql? (surrogate-value (surrogate-value-inverse self))
                          self)))
      (setq prefix "|BAD surrogate|")
      (setq color "'#FF0000'"))
    (with-html-tag ((concatenate "FONT COLOR=" color) stream)
      (when (defined? prefix)
	(print-stream stream prefix))
      (html-print-logical-form self stream)) ))

(defun html-print-description
       ((self DESCRIPTION) (stream OUTPUT-STREAM) (topLevel? BOOLEAN))
  ;; Print a description.  Either print the 'proposition' of 'self',
  ;;    or, if that is undefined, the description type, or, if that is
  ;;    undefined the primary type of 'self'.
  (when (deleted? self)
    (with-html-tag ("FONT COLOR='#00FF00'" stream)
      (print-stream stream "|dElEtEd-description|")
      (when (defined? (surrogate-value-inverse self))
        (print-stream stream (surrogate-value-inverse self))))
    (return))
  (when topLevel?
    (cond
     ((class? self) (print-stream stream "|c|"))
     ((function? self) (print-stream stream "|f|"))
     ((relation? self) (print-stream stream "|r|"))
     (otherwise (print-stream stream "|d|"))))
  (html-print-logical-form self stream) )

;(defun print-enumeration ((self SKOLEM) 
;                          (stream NATIVE-OUTPUT-STREAM))
;  (print-native-stream
;   stream "(" (choose (no-duplicates? self) "SETOF" "LISTOF"))
;  (let ((enumeration (enumeration self)))
;    (when (defined? enumeration)
;      (when (> (length enumeration) 0)
;        (print-native-stream stream " "))
;      (typecase enumeration
;        (LIST (pprint-cons (the-cons-list enumeration) stream "" ""))
;        (otherwise (print-native-stream stream "...")))))
;  (print-native-stream stream ")"))

;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;; BEGIN LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
; Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          ;
;                                                                            ;
; The contents of this file are subject to the Mozilla Public License        ;
; Version 1.1 (the "License"); you may not use this file except in           ;
; compliance with the License. You may obtain a copy of the License at       ;
; http://www.mozilla.org/MPL/                                                ;
;                                                                            ;
; Software distributed under the License is distributed on an "AS IS" basis, ;
; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   ;
; for the specific language governing rights and limitations under the       ;
; License.                                                                   ;
;                                                                            ;
; The Original Code is the PowerLoom KR&R System.                            ;
;                                                                            ;
; The Initial Developer of the Original Code is                              ;
; UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          ;
; 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               ;
;                                                                            ;
; Portions created by the Initial Developer are Copyright (C) 1997-2010      ;
; the Initial Developer. All Rights Reserved.                                ;
;                                                                            ;
; Contributor(s):                                                            ;
;                                                                            ;
; Alternatively, the contents of this file may be used under the terms of    ;
; either the GNU General Public License Version 2 or later (the "GPL"), or   ;
; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   ;
; in which case the provisions of the GPL or the LGPL are applicable instead ;
; of those above. If you wish to allow use of your version of this file only ;
; under the terms of either the GPL or the LGPL, and not to allow others to  ;
; use your version of this file under the terms of the MPL, indicate your    ;
; decision by deleting the provisions above and replace them with the notice ;
; and other provisions required by the GPL or the LGPL. If you do not delete ;
; the provisions above, a recipient may use your version of this file under  ;
; the terms of any one of the MPL, the GPL or the LGPL.                      ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Version: make-manual.ste,v 1.11 2010/10/12 00:52:24 hans Exp

;;; PowerLoom manual specification

;;; USAGE: simply CL:load this file into a Lisp version of PowerLoom
;;;    (don't translate it first) and then call `(make-powerloom-manual)'.
;;;    Once that is done, run the Unix `make' in the `.../doc' directory.

(in-package "STELLA")

(in-module "POWERLOOM-CODE")


(startup-time-progn
  (when (not (system-loaded? "utilities"))
    (make-system "utilities" :common-lisp)))

(defglobal *powerloom-manual-excluded-objects* CONS
  (bquote (("PL:sources;powerloom;doc;excluded.texi"
            )
           )))

(defun UTIL/texinfo-describe-named-description
    ((relation NAMED-DESCRIPTION) (stream OUTPUT-STREAM))
  ;; Texinfo documentation handler/generator for NAMED-DESCRIPTION's.
  ;; See `utilities/manual-describe-object' for handler syntax.
  (within-module (home-context relation)
    (let ((type "Relation "))
      (cond
       ((class? relation) (setq type "Concept "))
       ((function? relation) (setq type "Function ")))
      (print-stream
       stream 
       "@deffn " type
       (yield-texinfo-bare-name (relation-name relation))
       " "))
    ;; List arguments:
    (print-stream stream "(")
    (let ((parameter-names (io-variable-names relation))
          (parameter-types (io-variable-types relation)))
      (cond
       ((class? relation)
        (let ((super (first (all-direct-superrelations relation TRUE))))
          (when (defined? super)
            (setq parameter-types (list (surrogate-value-inverse super))))))
       ((function? relation)
        (setq parameter-names (listify (but-last parameter-names)))
        (setq parameter-types (listify (but-last parameter-types)))))
      (let ((n-of-arguments (length parameter-names)))
        (foreach p-name in parameter-names
            as p-type in parameter-types
            as i in (interval 1 NULL)
            do (texinfo-describe-type-declaration
                p-name p-type NULL stream)
               (when (< i n-of-arguments)
                 (print-stream stream " ")))
        (print-stream stream ")")
        (when (function? relation)
          (print-stream stream " :-> ")
          (texinfo-describe-type-declaration
           (last (io-variable-names relation)) 
           (last (io-variable-types relation))
           NULL
           stream))
        (print-stream stream EOL)
        (texinfo-describe-documentation-string
         relation
         (access-binary-value relation pl-kernel/@documentation)
         stream parameter-names)
        (print-stream stream "@end deffn" EOL)))))

(defun make-powerloom-manual ()
  ;; We are running this in the LOGIC module for the sole purpose of getting the
  ;; same sort order as before for uncategorized objects which relies on `visible-name'.
  (within-module *logic-module*
    ;; Hack, by generating a manual for the excluded objects, we register
    ;;    all those functions as documented and hence exclude them in
    ;;    the template generation phase.
    (generate-manual *powerloom-manual-excluded-objects*)
    (generate-manual-from-template
     ;; hack: logical pathnames eat the second extension as a version number:
     (concatenate
       (translate-logical-pathname "PL:sources;powerloom;doc;manual.texi") ".in")
     "PL:sources;powerloom;doc;manual.texi")))

;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;; BEGIN LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
; Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          ;
;                                                                            ;
; The contents of this file are subject to the Mozilla Public License        ;
; Version 1.1 (the "License"); you may not use this file except in           ;
; compliance with the License. You may obtain a copy of the License at       ;
; http://www.mozilla.org/MPL/                                                ;
;                                                                            ;
; Software distributed under the License is distributed on an "AS IS" basis, ;
; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   ;
; for the specific language governing rights and limitations under the       ;
; License.                                                                   ;
;                                                                            ;
; The Original Code is the PowerLoom KR&R System.                            ;
;                                                                            ;
; The Initial Developer of the Original Code is                              ;
; UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          ;
; 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               ;
;                                                                            ;
; Portions created by the Initial Developer are Copyright (C) 1997-2010      ;
; the Initial Developer. All Rights Reserved.                                ;
;                                                                            ;
; Contributor(s):                                                            ;
;                                                                            ;
; Alternatively, the contents of this file may be used under the terms of    ;
; either the GNU General Public License Version 2 or later (the "GPL"), or   ;
; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   ;
; in which case the provisions of the GPL or the LGPL are applicable instead ;
; of those above. If you wish to allow use of your version of this file only ;
; under the terms of either the GPL or the LGPL, and not to allow others to  ;
; use your version of this file under the terms of the MPL, indicate your    ;
; decision by deleting the provisions above and replace them with the notice ;
; and other provisions required by the GPL or the LGPL. If you do not delete ;
; the provisions above, a recipient may use your version of this file under  ;
; the terms of any one of the MPL, the GPL or the LGPL.                      ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Version: powerloom.ste,v 1.7 2010/09/11 00:36:25 hans Exp

;;; Top level shell to run PowerLoom and various extension systems.
;;; Eventually, most of the stuff in PL:sources;logic;powerloom.ste
;;; should migrate into this file.

(in-package "STELLA")

(in-module "POWERLOOM-CODE")


  ;;
;;;;;; Top-level loop and extension loader
  ;;

(defglobal *powerloom-extension-systems* (CONS OF STRING-WRAPPER)
           ;; once we support dynamic loading in C++ also, we can add
           ;; the PowerLoom extensions and utilities systems here as well.
           (cons-list "SDBC" "RDBMS")
  :documentation "List of extension systems that can be loaded
dynamically (not yet in C++)."
  :public? TRUE)

(defun load-all-extension-systems ()
  :documentation "Load and initialize all installed extension systems."
  :public? TRUE :command? TRUE
  (foreach system in *powerloom-extension-systems*
      where (not (system-loaded-or-started-up? (string-downcase system)))
      do (print "Initializing " (unwrap-string system) "...")
         ;; we catch and ignore errors here, since not all of the
         ;; available extension systems might actually be installed:
         (exception-case
             (load-system (string-downcase system))
           (NATIVE-EXCEPTION ()
             (print "FAILED")))
         (print EOL)))

(defun load-all-extensions-option-handler ((option CMD-LINE-OPTION) (value OBJECT))
  :documentation "Load and initialize all installed extension systems."
  :public? TRUE
  (ignore option value)
  (load-all-extension-systems))

(defun start-powerloom-gui-option-handler ((option CMD-LINE-OPTION) (value OBJECT))
  :documentation "Start the PowerLoom GUI."
  :public? TRUE
  (ignore option value)
  (set-configuration-property "powerloom.runInteractively" TRUE NULL)
  (start-powerloom-gui))


(startup-time-progn
  (register-cmd-line-option
   :key "--load-all-extensions"
   :documentation "
  Load all available PowerLoom extension systems."
   :n-arguments 0
   :handler (quote load-all-extensions-option-handler)
   :error-action :error)
  
  (register-cmd-line-option
   :key "--gui"
   :documentation "
  Launch the PowerLoom GUI in addition to the read/eval/print loop."
   :n-arguments 0
   :handler (quote start-powerloom-gui-option-handler)
   :error-action :warn)
   
  (register-cmd-line-option
   :key "-i" :key2 "--interactive"
   :documentation "
  Launch an interactive read/eval/print loop after all startup code and
  command line arguments have been processed."
   :n-arguments 0
   :property "powerloom.runInteractively"
   :value-type @BOOLEAN
   :default-value TRUE)
  
  (register-cmd-line-option
   :key "--batch"
   :documentation "
  Do not start an interactive read/eval/print loop.  Just evaluate all
  command line arguments and main function code and then exit."
   :n-arguments 0
   :property "powerloom.runInteractively"
   :value-type @BOOLEAN
   :default-value FALSE)
  
  ;; this just updates the documentation, since we are running it in PL-USER:
  (register-cmd-line-option
   :key "-e" :key2 "--eval" :key3 "-eval"
   :documentation "<s-expression>
  Evaluate the STELLA <s-expression> in the PL-USER module."
   :n-arguments 1
   :handler (quote eval-option-handler)
   :error-action :warn))


(defmain (count arguments)
  :documentation "Main PowerLoom entry point."
  :public? TRUE :startup-system? FALSE
  (print "Initializing STELLA..." EOL)
  (startup-stella-system)
  (print "Initializing PowerLoom..." EOL)
  (startup-logic-system)
  (startup-powerloom-extensions-system)
  (startup-powerloom-system)
  (change-module "PL-USER") ;; do this before we run any -e commands
  (process-command-line-arguments count arguments :warn)
  (when (and (not (eql? (get-property "powerloom.runInteractively") FALSE-WRAPPER))
             (not (eql? (get-property "stella.showInfoOnly") TRUE-WRAPPER)))
    (/logic/powerloom))
  (run-hooks *stella-exit-hooks* NULL))

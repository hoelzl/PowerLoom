This is manual.info, produced by makeinfo version 4.2 from manual.texi.

   This file documents the knowledge representation and reasoning
system.


File: manual.info,  Node: Glossary,  Next: PowerLoom Grammar,  Prev: Miscellaneous,  Up: Top

Glossary
********

   This glossary contains brief definitions for terms used in the
PowerLoom User's Manual and/or used by the knowledge representation
community.  It is impractical to give a logically precise definition
for many of these terms, because their interpretation varies quite a
bit.  In this case, the glossary attempts to indicate a range of
interpretations consistent with their use in PowerLoom.

*Assertion:* An assertion states that a particular proposition is
`True' or `False'.

*Backward and Forward Inference:* *???*

*BACKWARD RULE:* *???*

*Binary Relation:* A relation having two arguments (arity equals two),
often as a mapping from one concept domain to another.  This is by far
the most common form of relation.

*Classifier:* A classifier is a type of an inference engine that
implements efficient strategies for computing subsumption relations
between pairs of concepts, or for computing instance-of relations
between a concept an a set of instances.  PowerLoom implements a
classifier that can be explicitly invoked by an application program.

*Clipping:* If a function or single-valued binary relation maps an
instance to two or more other instances, a logical contradiction (a
clash) exists.  If clipping is enabled, PowerLoom will automatically
retract all assertions but the last that lead to a clash.  Clipping can
be toggled on or off; it is enabled by default.

*Closed-World Semantics:* Under closed-world semantics it is assumed
that "if proposition `P' cannot be proved `True', then assume that `P'
is `False'."  PowerLoom gives programmers the option to explicitly
declare that concept or a relation operates under the assumption of
closed-world semantics (See also Open-World Semantics).

*Concept:* A concept defines a category or class of individuals.
PowerLoom categorizes a concept as a special kind of relation.  The
distinction between a concept and a unary relation is subtle (some
logicians do not believe that there is any distinction(1)).  In
linguistics, the distinction is that between a noun and an adjective.
In logic, the test we favor is whether or not the relation has a domain
-- a unary relation has a domain, while a concept does not.  For
example, the relation `married' has domain `person', while the concept
`married-person' does not have a domain (or is its own domain).

*Constraint:* "Constraint" at its most general is a synonym for "rule".
Often a constraint is conceptualized as a rule that restricts the
types of the arguments that can appear within a tuple.

*Context:* *???*

*Default Rule:* A default rule expresses an conditional implication
that applies only when its consequent is consistent with current state
of the knowledge base.  In other words, the rule applies only when it
will not lead to a contradition.

*Definition:* A definition binds a name to a logical expression.
PowerLoom syntax defines several operators with names of the form
`defxxx' (e.g., `defconcept' and `defrule') that declare definitions
for various types of entities.

*Description:* A "description" is an expression that defines a
particular logical relation (e.g., the class of all three-legged black
cats).  In PowerLoom, the terms "concept" and "relation" generally
refer to `named' relations, while a description may or may not have a
name.  The KIF operators `kappa' and `setofall' are used to define
unnamed descriptions.

*Description Logic:* The term "description logic" refers to a logic
that focuses on descriptions as its principal means for expressing
logical expressions.  A description logic system emphasises the use of
classification and subsumption reasoning as its primary mode of
inference.  Loom and Classic were two early examples of knowledge
representation systems that implement description logics.

*Domain Model:* A collection of definitions, rules, and facts that
characterizes the possible states of some real or imagined world.  The
domain model specifies a terminology (of concepts and relations) that
is useful for describing objects in that world.  Often "domain model"
refers to that portion of a world's representation that does not change
over time.

*Extension:* Given a relation `R' with arity `N', the extension of `R'
is the set of ground propositions of the form `(R x1 ... xN)' whose
truth value is true.  If R is a concept, then its extension of often
considered to be, not a set of unary tuples, but the set of argument
fillers of those tuples, i.e., the set of instances that belong to the
concept.

*Fact:* A fact is a proposition that has been asserted to be either
`True' or `False'.  The term "fact" usually refers to a "ground
proposition", i.e., a proposition that can be represented as a
predicate applied to a sequence of instances or literals.

*Filler:* The second argument to a binary tuple is often refered to as
its "filler".  When a multiple-valued binary relation maps an instance
to a set of values, these values are also called "fillers".

*Forward Rule:* *???*

*Function:* Formally, a function is a relation such that the   value of
the last (nth) argument of a relational tuple is a function of the
values of the first n-1 arguments.  This definition coincides with the
notion of a "single-valued relation".  PowerLoom (and KIF) support
specialized syntax that allows functions that have been defined using
the operator `deffunction' to appear in term expressions (e.g., `(= (f
?x) 42))').

*Instance:* An instance denotes an entity within a domain model, a
member of the concept _Thing_.  Depending on ones interpretation, this
could include almost everything.  Often the term "instance" is used
more narrowly, to exclude literals and other objects whose properties
do not change over time.  PowerLoom assumes that concepts and relations
are instances.

*KIF:* Short for "Knowledge Interchange Format",  KIF is a language
that defines a Lisp-like syntax for the predicate calculus.  There is
an ANSII-standard that defines the KIF syntax and semantics.  PowerLoom
adopts KIF as its representation language, and adds a few extensions.

*Knowledge Base:* A knowledge base attempts to capture in abstract
(machine interpretable) form a useful representation of a physical or
virtual world. The entities in that world are modeled in the knowledge
base by objects we call _ terms_. Examples of terms are "Georgia"
(denoting the U.S., state), "BenjaminFranklin" (denoting the historical
person by that name), the number three, the string "abc", and the
concept "Person".

*Literal:* A logically static constant.  Examples are numbers, strings,
quantities, and truth values.

*Module:* *???*

*Open-World Semantics:* PowerLoom assumes an open-world semantics,
unless a user explicitly specifies that it use closed-world semantics.
Under this assumption, if PowerLoom cannot prove or disprove a
proposition, then it assigns that proposition the value `Unknown' (See
also Closed-World Semantics).

*Predicate:*.  The term _predicate_ is a syntactic notion that refers
to the zeroth arguments of a proposition.  Predicates denote relations
and properties, i.e., sets.

*Proposition:*.  A logical sentence whose truth value can be evaluated
with respect to some context.  Each PowerLoom assertion assigns the
value `True' or `False' to some proposition.

*Primitive Relation:* `P' is a primitive concept or relation if and
only if a proof that `(P x1 ... xn)' is true exists only for the case
that there exists an explicit assertion of a proposition `(Q x1 ...
xn)' and either `Q' equals `P' or `Q' is a proper subrelation of `P'.
In otherwords, the only rules that imply membership in `P' are those
that relate `P' to one of its (proper) subconcepts or subrelations.

*Query:* A query probes the informational state of a knowledge base.
An `ask' query test the truth of its propositional argument.  A
`retrieve' asks for sets of constants (bindings) that make its
propositional argument true when the constants are substituted in place
of its variables.  The propositional argument to `ask' and `retrieve'
arbitrary expression in the first-order predicate calculus.  Because of
constraints imposed either by resource limitations or inherent
undecidability, PowerLoom cannot guarantee the completeness of its
inferences.

*Relation:* *???*

*Retraction:* A retraction changes the truth value of a proposition
from either `True' or `False' to the value `Unknown'.  Retraction is a
procedural (non-declarative) operation.

*Rule:* A "rule" is any universally-quantified proposition, i.e., a
proposition of the form `(forall (?x1 ... ?xn) <logical sentence with
free variables ?x1 ... ?xn)'.  PowerLoom supports several different
syntactic constructs for defining rules.  (See also Forward Rule and
Backward Rule).

*Subsumption:* A subsumption relation specifies the relative generality
of two concepts.  A concept `A' subsumes a concept `B' if the
definitions of `A' and `B' logically imply that members of `B' must
also be members of `A'.

*Truth-Maintenance:* *???*

*Type:* Often used a synonym for the term _concept_.  The phrase "a
type of an instance" generally refers to (one of) the concepts that the
instance belongs to.  The phrase "nth domain type" refers to a concept
that contains all instances of the nth column of a relation.

*World:* *???*

   ---------- Footnotes ----------

   (1) but they are mistaken :).


File: manual.info,  Node: PowerLoom Grammar,  Next: Function Index,  Prev: Glossary,  Up: Top

PowerLoom Grammar
*****************

   The syntax of PowerLoom is described below using a modified BNF
notation adapted from the KIF specification.

* Menu:

* Alphabet::
* Grammar::


File: manual.info,  Node: Alphabet,  Next: Grammar,  Prev: PowerLoom Grammar,  Up: PowerLoom Grammar

Alphabet
========

   We distinguish between terminals, which are part of the language, and
nonterminals. All nonterminals are bracketed as follows
`<nonterminal>'. Squared brackets means zero or one instances of the
enclosed expression; `<nonterminal>*' means zero or more occurrences
and `<nonterminal>+' means one or more occurrences of `<nonterminal>'.
The notation `<nonterminal1> - <nonterminal2>' refers to all of the
members of `<nonterminal1>' except for those in `<nonterminal2>'.

   A word is a contiguous sequence of characters, which include all
upper case letters, lower case letters, digits and alpha characters
(ASCII character set from 93 to 128) excluding some special characters
like white spaces, single and double quotes and brackets.

   `<word> ::=' A PRIMITIVE SYNTACTIC OBJECT

   Special words are those who refer to a variable. All variables are
preceded by a question mark.

   `<indvar> ::=' A WORD BEGINNING WITH THE CHARACTER `?'

   A string `<string>' is a character sequence including words plus all
special charcters (except double quotes) enclosed in double quotes.  A
double quote can be included in a string if it is preceeded by the
escape character '`\''.


File: manual.info,  Node: Grammar,  Prev: Alphabet,  Up: PowerLoom Grammar

Grammar
=======

   Legal expressions in PowerLoom are forms, which are either a
statement or a definition, described in more detail below.

   `<form> ::= <statement> | <definition>'

* Menu:

* Constants and Typed Variables::
* Terms::
* Sentences::
* Definitions::


File: manual.info,  Node: Constants and Typed Variables,  Next: Terms,  Prev: Grammar,  Up: Grammar

Constants and Typed Variables
-----------------------------

   The language consists of several groups of operators, defined as
follows:

   `<termop> ::= listof | setof | the | setofall | kappa'

   ` <sentop> ::= = | /= | not | and | or | forall | exists
| <= | => | <=> |<<= | =>> | <~ | ~> | <<~ | ~>> '

   ` <defop> ::= defconcept | deffunction | defrelation | defrule |
:documentation | :-> |
:<= | :=> | :<<= | :=>> |
:<=> | :<=>> :<<=> | :<<=>> | := |
:axioms '

   `<operator> ::= <termop> | <sentop> | <defop>'

   All other words are constants (words which are not operators or
variables):

   `<constant> ::= <word> - <indvar> - <operator>'

   Semantically, there are different categories of constants --
_Concept_ constants `<conceptconst>', _Function_ constants
`<funconst>', _Relation_ constants `<relconst>', _Rule_ constants
`<ruleconst>' and _Logical_ constants `<logconst>'. The differences
between these categories are entirely semantic. However, some operators
will only accept specific constants.

   In contrast to the specification of KIF3.0, PowerLoom supports a
typed syntax. Therefore, variables in quantified terms and sentences
can appear either typed or untyped, as follows:

   `<vardecl> ::= (<indvar> <constant>) | <indvar>'


File: manual.info,  Node: Terms,  Next: Sentences,  Prev: Constants and Typed Variables,  Up: Grammar

Terms
-----

   Terms are used to denote objects in the world being described:

   ` <term> ::= <indvar> | <constant> | <funterm> | <listterm> |
<setterm> |
<quanterm>'

   `<listterm> ::= (listof <term>*)'

   `<setterm> ::= (setof <term>*)'

   `<funterm> ::= (<funconst> <term>+)'

   Note: Zero arguments are allowed for `<funterm>' in KIF3.0: `<term>*'

   ` <quanterm> ::= (the <vardecl> <sentence>) |
(setofall <vardecl> <sentence>) |
(kappa {<vardecl> | (<vardecl>+)} <sentence>) |
(lambda {<vardecl> | (<vardecl>+)} <term>) '

   Note: KIF3.0 allows `<term>' instead of `<vardecl>' for `setofall'.
No `<quanterm>' as well as no `<setterm>' in core of KIF as a result of
descision 95-3 (March 1995).


File: manual.info,  Node: Sentences,  Next: Definitions,  Prev: Terms,  Up: Grammar

Sentences
---------

   Sentences are used to express propositions about the world:

   ` <sentence> ::= <constant> | <equation> | <inequality> |
<relsent> | <logsent> | <quantsent> '

   `<equation> ::= (= <term> <term>)'

   `<inequality> ::= (/= <term> <term>)'

   `<relsent> ::= (<constant> <term>+)'

   Note: Zero arguments allowed in KIF3.0 for `<relsent>' (`<term>*').
`<funconst>' is currently not allowed in PowerLoom (use `(= <funterm>
<term>)' instead).

   ` <logsent> ::= (not <sentence>) |
(and <sentence>*) |
(or <sentence>*) |
(=> <sentence>* <sentence>) | (=>> <sentence>* <sentence>) |
(<= <sentence> <sentence>*) | (<<= <sentence> <sentence>*) |
(~> <sentence>* <sentence>) | (~>> <sentence>* <sentence>) |
(<~ <sentence> <sentence>*) | (<<~ <sentence> <sentence>*) '

   ` <quantsent> ::= (forall {<vardecl> | (<vardecl>+)} <sentence>) |
(forall {<vardecl> | (<vardecl>+)} <sentence> <sentence>) |
(exists {<vardecl> | (<vardecl>+)} <sentence>) '


File: manual.info,  Node: Definitions,  Prev: Sentences,  Up: Grammar

Definitions
-----------

   PowerLoom supports two distinct categories of definitions -- relation
definitions (including concept and function definitions) and rule
definitions.  A relation definition introduces a new logical constant,
and states some facts about that constant (e.g., who its parents are in
a subsumption taxonomy).  A rule definitions binds a new constant to a
proposition (so that the constant _denotes_ the proposition) and
asserts the truth of that proposition.  Usually, the proposition
asserted by a `defrule' is an implication.  The assertional truth of a
proposition defined by a rule can be altered by asserting or retracting
the constant that denotes the proposition.

     <keyword-option> ::= <keyword> <word>
     <definition> ::= <reldefinition> | <objdefinition> | <ruledefinition>
     
     <reldefinition> ::=
      (defconcept <conceptconst> <vardecl>
         [:documentation <string>]
         [:<= <sentence>] | [:=> <sentence>] |
         [:<<= <sentence>] | [:=>> <sentence>] |
         [:<=> <sentence>] | [:<=>> <sentence>] | [:<<=> <sentence>] |
         [:<<=>> <sentence>] |
         [:axioms {<sentence> | (<sentence>+)}] |
         [<keyword-option>*])
      |
      (deffunction <funconst> (<vardecl>+)
         [:documentation <string>]
         [:-> <vardecl>]
         [:<= <sentence>] | [:=> <sentence>] |
         [:<<= <sentence>] | [:=>> <sentence>] |
         [:<=> <sentence>] | [:<=>> <sentence>] | [:<<=> <sentence>] |
         [:<<=>> <sentence>] |
         [:axioms {<sentence> | (<sentence>+)}]
         [<keyword-option>*])
      |
      (defrelation <relconst> (<vardecl>+)
         [:documentation <string>]
         [:<= <sentence>] | [:=> <sentence>] |
         [:<<= <sentence>] | [:=>> <sentence>] |
         [:<=> <sentence>] | [:<=>> <sentence>] | [:<<=> <sentence>] |
         [:<<=>> <sentence>] |
         [:axioms {<sentence> | (<sentence>+)}]
         [<keyword-option>*])
     
     <objdefinition> ::= (defobject <constant>
                            [:documentation <string>]
                            [<keyword-option>*])
     
     <ruledefinition> ::= (defrule <constant> <sentence>
                            [:documentation <string>]
                            [<keyword-option>*])

   `<ruledefinition> ::= (defrule <ruleconst> <sentence>)'


File: manual.info,  Node: Function Index,  Next: Variable Index,  Prev: PowerLoom Grammar,  Up: Top

Function Index
**************

* Menu:

* *:                                     Built-In Relations.
* +:                                     Built-In Relations.
* -:                                     Built-In Relations.
* /:                                     Built-In Relations.
* 2-d-element:                           Miscellaneous.
* 2-d-element-setter:                    Miscellaneous.
* <:                                     Built-In Relations.
* =<:                                    Built-In Relations.
* >:                                     Built-In Relations.
* >=:                                    Built-In Relations.
* ABSTRACT:                              Built-In Relations.
* add-testing-example:                   Miscellaneous.
* add-training-example:                  Miscellaneous.
* AGGREGATE:                             Built-In Relations.
* all-asserted-types:                    Miscellaneous.
* all-class-instances:                   Miscellaneous.
* all-cycles:                            Miscellaneous.
* all-direct-subrelations:               Miscellaneous.
* all-direct-superrelations:             Miscellaneous.
* all-direct-types:                      Miscellaneous.
* all-equivalent-relations:              Miscellaneous.
* all-facts-of:                          Commands.
* all-facts-of-instance:                 Miscellaneous.
* all-facts-of-n:                        Miscellaneous.
* all-instances:                         Miscellaneous.
* all-named-descriptions:                Miscellaneous.
* all-named-instances:                   Miscellaneous.
* all-named-terms:                       Miscellaneous.
* all-propositions:                      Miscellaneous.
* all-relation-values:                   Miscellaneous.
* all-sentences-of:                      Miscellaneous.
* all-slot-value-types:                  Miscellaneous.
* all-slot-values:                       Miscellaneous.
* all-subrelations:                      Miscellaneous.
* all-superrelations:                    Miscellaneous.
* all-terms:                             Miscellaneous.
* all-types:                             Miscellaneous.
* all-unnamed-terms:                     Miscellaneous.
* allocate-supported-closure-iterator:   Miscellaneous.
* allocate-transitive-closure-iterator:  Miscellaneous.
* ANTISYMMETRIC:                         Built-In Relations.
* apply-ask:                             Miscellaneous.
* apply-kappa?:                          Miscellaneous.
* apply-retrieve:                        Miscellaneous.
* ARITY:                                 Built-In Relations.
* ask <1>:                               API Functions.
* ask:                                   Commands.
* ask-partial:                           Miscellaneous.
* assert:                                Commands.
* assert-binary-proposition:             API Functions.
* assert-from-query:                     Commands.
* assert-nary-proposition:               API Functions.
* assert-proposition:                    API Functions.
* assert-rule:                           Commands.
* assert-unary-proposition:              API Functions.
* BINARY-RELATION:                       Built-In Relations.
* bottom?:                               Miscellaneous.
* BOUND-VARIABLES:                       Built-In Relations.
* call-all-facts-of:                     Miscellaneous.
* call-ask:                              Miscellaneous.
* call-defconcept:                       Miscellaneous.
* call-deffunction:                      Miscellaneous.
* call-defobject:                        Miscellaneous.
* call-defproposition:                   Miscellaneous.
* call-defrelation:                      Miscellaneous.
* call-list-undefined-relations:         Miscellaneous.
* call-propagate-constraints:            Miscellaneous.
* call-retrieve:                         Miscellaneous.
* call-retrieve-partial:                 Miscellaneous.
* call-run-forward-rules:                Miscellaneous.
* call-set-inference-level:              Miscellaneous.
* CARDINALITY:                           Built-In Relations.
* cc:                                    Commands.
* change-module:                         API Functions.
* class?:                                Miscellaneous.
* classify-instances:                    Commands.
* classify-relations:                    Commands.
* clear-instances:                       Commands.
* clear-module <1>:                      API Functions.
* clear-module:                          Commands.
* CLOSED:                                Built-In Relations.
* coerce-to-instance:                    Miscellaneous.
* coerce-to-instance-or-literal:         Miscellaneous.
* coerce-to-vector:                      Miscellaneous.
* COLLECT-INTO-SET:                      Built-In Relations.
* COLLECTION:                            Built-In Relations.
* collection?:                           Miscellaneous.
* COLLECTIONOF:                          Built-In Relations.
* COMMENT:                               Built-In Relations.
* COMMUTATIVE:                           Built-In Relations.
* conceive <1>:                          API Functions.
* conceive:                              Commands.
* conceive-term:                         Miscellaneous.
* CONCEPT:                               Built-In Relations.
* CONCEPT-PROTOTYPE:                     Built-In Relations.
* conjoin-truth-values:                  Miscellaneous.
* cons-to-pl-iterator:                   API Functions.
* consify:                               Miscellaneous.
* consify-current-solutions:             Miscellaneous.
* consify-justification:                 Miscellaneous.
* constant?:                             Miscellaneous.
* copy:                                  Miscellaneous.
* copyright:                             Commands.
* COVERING:                              Built-In Relations.
* create:                                Miscellaneous.
* create-2-d-array:                      Miscellaneous.
* create-2-d-float-array:                Miscellaneous.
* create-concept:                        API Functions.
* create-enumerated-list:                API Functions.
* create-enumerated-set:                 API Functions.
* create-float-vector:                   Miscellaneous.
* create-function:                       API Functions.
* create-marker-storage:                 Miscellaneous.
* create-object:                         API Functions.
* create-relation:                       API Functions.
* create-vector:                         Miscellaneous.
* current-inference-level:               Miscellaneous.
* CUT:                                   Built-In Relations.
* default-truth-value?:                  Miscellaneous.
* defconcept:                            Commands.
* deffunction:                           Commands.
* define-arithmetic-operation-on-wrappers: Miscellaneous.
* define-arithmetic-test-on-wrappers:    Miscellaneous.
* define-computed-constraint:            Miscellaneous.
* definstance:                           Commands.
* defmodule:                             Commands.
* defobject:                             Commands.
* defproposition:                        Commands.
* defrelation:                           Commands.
* defrule:                               Commands.
* delete-rules:                          Commands.
* demo:                                  Commands.
* deny:                                  Commands.
* deobjectify-tree:                      Miscellaneous.
* describe:                              Commands.
* describe-object:                       Miscellaneous.
* description-name:                      Miscellaneous.
* destroy:                               Commands.
* destroy-instance:                      Miscellaneous.
* destroy-object <1>:                    Miscellaneous.
* destroy-object:                        API Functions.
* destroy-proposition:                   Miscellaneous.
* destroy-term:                          Miscellaneous.
* DIRECT-SUBRELATION:                    Built-In Relations.
* DIRECT-SUPERRELATION:                  Built-In Relations.
* direct-superrelations:                 Miscellaneous.
* disabled-powerloom-feature?:           Miscellaneous.
* disjoin-truth-values:                  Miscellaneous.
* DISJOINT:                              Built-In Relations.
* DISJOINT-COVERING:                     Built-In Relations.
* disjoint-terms?:                       Miscellaneous.
* do-clear-instances:                    Miscellaneous.
* do-save-module:                        Miscellaneous.
* DOCUMENTATION:                         Built-In Relations.
* DOMAIN:                                Built-In Relations.
* DUPLICATE-FREE:                        Built-In Relations.
* DUPLICATE-FREE-COLLECTION:             Built-In Relations.
* EMPTY:                                 Built-In Relations.
* empty? <1>:                            Miscellaneous.
* empty?:                                API Functions.
* enabled-powerloom-feature?:            Miscellaneous.
* EQUIVALENT-RELATION:                   Built-In Relations.
* estimated-length:                      Miscellaneous.
* evaluate <1>:                          API Functions.
* evaluate:                              Command Interpreter.
* evaluate-string:                       Command Interpreter.
* EXAMPLE:                               Built-In Relations.
* explain-why:                           Miscellaneous.
* explain-whynot:                        Miscellaneous.
* false-truth-value?:                    Miscellaneous.
* fetch-instance:                        Miscellaneous.
* fetch-relation:                        Miscellaneous.
* fill-array:                            Miscellaneous.
* FILLERS:                               Built-In Relations.
* finalize-objects:                      Miscellaneous.
* find-direct-supers-and-subs:           Miscellaneous.
* find-direct-supers-of-instance:        Miscellaneous.
* find-instance:                         Miscellaneous.
* find-rule:                             Miscellaneous.
* FRAME-PREDICATE:                       Built-In Relations.
* FUNCTION:                              Built-In Relations.
* function?:                             Miscellaneous.
* generate-expression:                   Miscellaneous.
* generate-specialized-term:             Miscellaneous.
* generate-unique-name:                  API Functions.
* get-arity:                             API Functions.
* get-binary-proposition:                API Functions.
* get-binary-propositions:               API Functions.
* get-child-modules:                     API Functions.
* get-class:                             Miscellaneous.
* get-column-count:                      API Functions.
* get-concept:                           API Functions.
* get-concept-instance-matching-value:   API Functions.
* get-concept-instances:                 API Functions.
* get-concept-instances-matching-value:  API Functions.
* get-direct-concept-instances:          API Functions.
* get-direct-subrelations:               API Functions.
* get-direct-superrelations:             API Functions.
* get-direct-types:                      API Functions.
* get-domain:                            API Functions.
* get-enumerated-collection-members:     API Functions.
* get-home-module:                       API Functions.
* get-inferred-binary-proposition-values: API Functions.
* get-instance:                          Miscellaneous.
* get-module <1>:                        Miscellaneous.
* get-module:                            API Functions.
* get-modules:                           API Functions.
* get-name:                              API Functions.
* get-nth-domain:                        API Functions.
* get-nth-float:                         API Functions.
* get-nth-integer:                       API Functions.
* get-nth-logic-object:                  API Functions.
* get-nth-string:                        API Functions.
* get-nth-value:                         API Functions.
* get-object:                            API Functions.
* get-parent-modules:                    API Functions.
* get-predicate:                         API Functions.
* get-proper-subrelations:               API Functions.
* get-proper-superrelations:             API Functions.
* get-proposition:                       API Functions.
* get-propositions:                      API Functions.
* get-propositions-in-module:            API Functions.
* get-propositions-of:                   API Functions.
* get-range:                             API Functions.
* get-relation <1>:                      Miscellaneous.
* get-relation:                          API Functions.
* get-relation-extension:                API Functions.
* get-rules <1>:                         API Functions.
* get-rules:                             Commands.
* get-self-or-prototype:                 Miscellaneous.
* get-slot-maximum-cardinality:          Miscellaneous.
* get-slot-minimum-cardinality:          Miscellaneous.
* get-slot-value:                        Miscellaneous.
* get-slot-value-type:                   Miscellaneous.
* get-types:                             API Functions.
* get-why-justification:                 Miscellaneous.
* get-whynot-justifications:             Miscellaneous.
* GOES-FALSE-DEMON:                      Built-In Relations.
* GOES-TRUE-DEMON:                       Built-In Relations.
* GOES-UNKNOWN-DEMON:                    Built-In Relations.
* help:                                  Commands.
* HOLDS:                                 Built-In Relations.
* IMAGE-URL:                             Built-In Relations.
* in-dialect:                            Miscellaneous.
* in-module:                             Commands.
* INEQUALITY:                            Built-In Relations.
* initialize:                            API Functions.
* initialize-kernel-kb:                  Miscellaneous.
* insert-at:                             Miscellaneous.
* INSTANCE-OF:                           Built-In Relations.
* INVERSE:                               Built-In Relations.
* invert-truth-value:                    Miscellaneous.
* IRREFLEXIVE:                           Built-In Relations.
* is-a:                                  API Functions.
* is-default:                            API Functions.
* is-enumerated-collection:              API Functions.
* is-enumerated-list:                    API Functions.
* is-enumerated-set:                     API Functions.
* is-false:                              API Functions.
* is-float:                              API Functions.
* is-integer:                            API Functions.
* is-logic-object:                       API Functions.
* is-number:                             API Functions.
* is-strict:                             API Functions.
* is-string:                             API Functions.
* is-subrelation:                        API Functions.
* is-true:                               API Functions.
* is-true-binary-proposition:            API Functions.
* is-true-proposition:                   API Functions.
* is-true-proposition1:                  Miscellaneous.
* is-true-unary-proposition:             API Functions.
* is-unknown:                            API Functions.
* ISSUE:                                 Built-In Relations.
* IST:                                   Built-In Relations.
* iterator-to-pl-iterator:               API Functions.
* length:                                Miscellaneous.
* LENGTH:                                Built-In Relations.
* length:                                API Functions.
* LENGTH-OF-LIST:                        Built-In Relations.
* LEXEME:                                Built-In Relations.
* LIST:                                  Built-In Relations.
* list-features:                         Miscellaneous.
* list-to-pl-iterator:                   API Functions.
* list-unclassified-instances:           Miscellaneous.
* list-unclassified-relations:           Miscellaneous.
* list-undefined-relations:              Miscellaneous.
* listify:                               Miscellaneous.
* LISTOF:                                Built-In Relations.
* load <1>:                              API Functions.
* load:                                  Commands.
* load-file:                             Commands.
* load-stream:                           Miscellaneous.
* logic-class?:                          Miscellaneous.
* logic-form-less?:                      Miscellaneous.
* logic-module?:                         Miscellaneous.
* lookup:                                Miscellaneous.
* main:                                  Miscellaneous.
* MAXIMUM-VALUE:                         Built-In Relations.
* MEAN-VALUE:                            Built-In Relations.
* MEDIAN-VALUE:                          Built-In Relations.
* MEMBER-OF:                             Built-In Relations.
* MINIMUM-VALUE:                         Built-In Relations.
* MUTUALLY-DISJOINT-COLLECTION:          Built-In Relations.
* natural-deduction-mode?:               Miscellaneous.
* next?:                                 API Functions.
* non-empty?:                            Miscellaneous.
* nth:                                   Miscellaneous.
* NTH-DOMAIN:                            Built-In Relations.
* NUMERIC-MAXIMUM:                       Built-In Relations.
* NUMERIC-MINIMUM:                       Built-In Relations.
* NUMERIC-SET:                           Built-In Relations.
* object-name:                           Miscellaneous.
* object-name-string:                    Miscellaneous.
* object-surrogate:                      Miscellaneous.
* object-surrogate-setter:               Miscellaneous.
* object-to-float:                       API Functions.
* object-to-integer:                     API Functions.
* object-to-parsable-string:             API Functions.
* object-to-string:                      API Functions.
* ORDERED:                               Built-In Relations.
* PHRASE:                                Built-In Relations.
* pop:                                   Miscellaneous.
* powerloom:                             Miscellaneous.
* presume:                               Commands.
* pretty-print-logical-form:             Miscellaneous.
* print-array:                           Miscellaneous.
* print-extension-sizes:                 Miscellaneous.
* print-features:                        Commands.
* print-goal-stack:                      Miscellaneous.
* print-logical-form:                    Miscellaneous.
* print-logical-form-in-dialect:         Miscellaneous.
* print-rules <1>:                       API Functions.
* print-rules:                           Commands.
* print-unformatted-logical-form:        Miscellaneous.
* print-whynot-justification:            Miscellaneous.
* process-definitions:                   Commands.
* PROJECT-COLUMN:                        Built-In Relations.
* propagate-constraints:                 Commands.
* PROPER-SUBRELATION:                    Built-In Relations.
* PROPER-SUPERRELATION:                  Built-In Relations.
* random-float:                          Miscellaneous.
* RANGE:                                 Built-In Relations.
* RANGE-CARDINALITY:                     Built-In Relations.
* RANGE-CARDINALITY-LOWER-BOUND:         Built-In Relations.
* RANGE-CARDINALITY-UPPER-BOUND:         Built-In Relations.
* RANGE-MAX-CARDINALITY:                 Built-In Relations.
* RANGE-MIN-CARDINALITY:                 Built-In Relations.
* RANGE-TYPE:                            Built-In Relations.
* recall-marked-objects:                 Miscellaneous.
* record-justifications?:                Miscellaneous.
* REFLEXIVE:                             Built-In Relations.
* register-logic-dialect-print-function: Miscellaneous.
* RELATION:                              Built-In Relations.
* RELATION-COMPUTATION:                  Built-In Relations.
* RELATION-CONSTRAINT:                   Built-In Relations.
* RELATION-EVALUATOR:                    Built-In Relations.
* relation-name:                         Miscellaneous.
* RELATION-SPECIALIST:                   Built-In Relations.
* relation?:                             Miscellaneous.
* remove-at:                             Miscellaneous.
* remove-deleted-members:                Miscellaneous.
* repropagate-constraints:               Commands.
* reset-features:                        Commands.
* reset-query-caches:                    Miscellaneous.
* retract <1>:                           API Functions.
* retract:                               Commands.
* retract-binary-proposition:            API Functions.
* retract-facts-of:                      Commands.
* retract-facts-of-instance:             Miscellaneous.
* retract-from-query:                    Commands.
* retract-nary-proposition:              API Functions.
* retract-proposition:                   API Functions.
* retract-rule:                          Commands.
* retract-unary-proposition:             API Functions.
* retrieve <1>:                          API Functions.
* retrieve:                              Commands.
* retrieve-partial:                      Miscellaneous.
* run-forward-rules <1>:                 Miscellaneous.
* run-forward-rules:                     API Functions.
* run-powerloom-tests:                   Miscellaneous.
* s-ask:                                 API Functions.
* s-assert-proposition:                  API Functions.
* s-change-module:                       API Functions.
* s-clear-module:                        API Functions.
* s-conceive:                            API Functions.
* s-create-concept:                      API Functions.
* s-create-function:                     API Functions.
* s-create-object:                       API Functions.
* s-create-relation:                     API Functions.
* s-destroy-object:                      API Functions.
* s-evaluate:                            API Functions.
* s-get-arity:                           API Functions.
* s-get-child-modules:                   API Functions.
* s-get-concept:                         API Functions.
* s-get-concept-instances:               API Functions.
* s-get-direct-concept-instances:        API Functions.
* s-get-domain:                          API Functions.
* s-get-inferred-binary-proposition-values: API Functions.
* s-get-nth-domain:                      API Functions.
* s-get-object:                          API Functions.
* s-get-parent-modules:                  API Functions.
* s-get-proposition:                     API Functions.
* s-get-propositions:                    API Functions.
* s-get-propositions-of:                 API Functions.
* s-get-range:                           API Functions.
* s-get-relation:                        API Functions.
* s-get-relation-extension:              API Functions.
* s-get-rules:                           API Functions.
* s-is-true-proposition:                 API Functions.
* s-print-rules:                         API Functions.
* s-retract-proposition:                 API Functions.
* s-retrieve:                            API Functions.
* s-save-module:                         API Functions.
* satisfies?:                            Miscellaneous.
* save-all-neural-networks:              Miscellaneous.
* save-module <1>:                       API Functions.
* save-module:                           Commands.
* SCALAR:                                Built-In Relations.
* SCALAR-INTERVAL:                       Built-In Relations.
* SET:                                   Built-In Relations.
* set-error-print-cycle:                 Miscellaneous.
* set-feature:                           Commands.
* set-inference-level:                   Miscellaneous.
* set-marker:                            Miscellaneous.
* set-num-neighbors:                     Miscellaneous.
* set-num-training-per-case:             Miscellaneous.
* set-powerloom-feature:                 Miscellaneous.
* set-save-network-cycle:                Miscellaneous.
* SETOF:                                 Built-In Relations.
* SINGLE-VALUED:                         Built-In Relations.
* sort:                                  Miscellaneous.
* specializes?:                          Miscellaneous.
* SQUARE-ROOT:                           Built-In Relations.
* STANDARD-DEVIATION:                    Built-In Relations.
* strengthen-truth-value:                Miscellaneous.
* strict-truth-value?:                   Miscellaneous.
* STRING-CONCATENATE:                    Built-In Relations.
* string-to-object:                      API Functions.
* SUBRELATION:                           Built-In Relations.
* SUBSET-OF:                             Built-In Relations.
* SUBSTRING:                             Built-In Relations.
* SUM:                                   Built-In Relations.
* SUPERRELATION:                         Built-In Relations.
* SYMMETRIC:                             Built-In Relations.
* SYNONYM:                               Built-In Relations.
* termify:                               Miscellaneous.
* test-closed-slot?:                     Miscellaneous.
* test-function-slot?:                   Miscellaneous.
* test-marker?:                          Miscellaneous.
* test-relation-on-arguments?:           Miscellaneous.
* test-slot-value?:                      Miscellaneous.
* test-special-marker-table?:            Miscellaneous.
* test-subrelation?:                     Miscellaneous.
* test-type-on-instance?:                Miscellaneous.
* TOTAL:                                 Built-In Relations.
* TRANSITIVE:                            Built-In Relations.
* true-truth-value?:                     Miscellaneous.
* TYPE-OF:                               Built-In Relations.
* unassert:                              Miscellaneous.
* unassert-fact:                         Miscellaneous.
* unknown-truth-value?:                  Miscellaneous.
* unset-feature:                         Commands.
* unset-powerloom-feature:               Miscellaneous.
* upclassify-all-descriptions:           Miscellaneous.
* upclassify-all-instances:              Miscellaneous.
* upclassify-instances:                  Miscellaneous.
* upclassify-named-descriptions:         Miscellaneous.
* VALUE:                                 Built-In Relations.
* VARIABLE-ARITY:                        Built-In Relations.
* VARIANCE:                              Built-In Relations.
* weaken-truth-value:                    Miscellaneous.
* why:                                   Commands.
* with-logic-environment:                Miscellaneous.
* within-classification-session:         Miscellaneous.
* within-meta-cache:                     Miscellaneous.


File: manual.info,  Node: Variable Index,  Next: Concept Index,  Prev: Function Index,  Up: Top

Variable Index
**************

* Menu:

File: manual.info,  Node: Concept Index,  Prev: Variable Index,  Up: Top

Concept Index
*************

* Menu:


;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;; BEGIN LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
; Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          ;
;                                                                            ;
; The contents of this file are subject to the Mozilla Public License        ;
; Version 1.1 (the "License"); you may not use this file except in           ;
; compliance with the License. You may obtain a copy of the License at       ;
; http://www.mozilla.org/MPL/                                                ;
;                                                                            ;
; Software distributed under the License is distributed on an "AS IS" basis, ;
; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   ;
; for the specific language governing rights and limitations under the       ;
; License.                                                                   ;
;                                                                            ;
; The Original Code is the PowerLoom KR&R System.                            ;
;                                                                            ;
; The Initial Developer of the Original Code is                              ;
; UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          ;
; 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               ;
;                                                                            ;
; Portions created by the Initial Developer are Copyright (C) 1997-2006      ;
; the Initial Developer. All Rights Reserved.                                ;
;                                                                            ;
; Contributor(s):                                                            ;
;                                                                            ;
; Alternatively, the contents of this file may be used under the terms of    ;
; either the GNU General Public License Version 2 or later (the "GPL"), or   ;
; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   ;
; in which case the provisions of the GPL or the LGPL are applicable instead ;
; of those above. If you wish to allow use of your version of this file only ;
; under the terms of either the GPL or the LGPL, and not to allow others to  ;
; use your version of this file under the terms of the MPL, indicate your    ;
; decision by deleting the provisions above and replace them with the notice ;
; and other provisions required by the GPL or the LGPL. If you do not delete ;
; the provisions above, a recipient may use your version of this file under  ;
; the terms of any one of the MPL, the GPL or the LGPL.                      ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Version: timepoint-kb.ste,v 1.6 2006/05/11 07:05:42 hans Exp

(in-package "STELLA")

(in-module "TIMEPOINT-SUPPORT")


(startup-time-progn :final

(within-module (get-stella-module "PL-KERNEL-KB" true)


;;;;
;;;; TIMEPOINT ONTOLOGY
;;;;

(defconcept /timepoint-kb/timepoint)

(defconcept /timepoint-kb/day-of-week ()
  :axioms (and (/timepoint-kb/day-of-week /timepoint-kb/sunday)
	       (/timepoint-kb/day-of-week /timepoint-kb/saturday)
	       (/timepoint-kb/day-of-week /timepoint-kb/friday)
	       (/timepoint-kb/day-of-week /timepoint-kb/thursday)
	       (/timepoint-kb/day-of-week /timepoint-kb/wednesday)
	       (/timepoint-kb/day-of-week /timepoint-kb/tuesday)
	       (/timepoint-kb/day-of-week /timepoint-kb/monday)
	       (closed /timepoint-kb/day-of-week)))

(deffunction /timepoint-kb/timepoint-of ((?x STRING)) :-> ?tp ; DATE-TIME-LOGIC-WRAPPER
  :documentation "Connects a STRING representation of a timePoint to the actual
internal representation."
  :axioms (and 
	   (computed /timepoint-kb/timepoint-of)
	   (relation-evaluator /timepoint-kb/timepoint-of
			       /timepoint-support/timepoint-of-evaluator)
	   (relation-specialist /timepoint-kb/timepoint-of
				/timepoint-support/timepoint-of-specialist)
	   (GOES-TRUE-DEMON /timepoint-kb/timepoint-of
			    /timepoint-support/timepoint-of-evaluator)))

(deffunction /timepoint-kb/duration-of ((?x STRING)) :-> ?tp ;  DATE-TIME-LOGIC-WRAPPER
  :documentation "Connects a STRING representation of a time duration to the actual
internal representation."
  :axioms (and
	   (computed /timepoint-kb/duration-of)
	   (relation-evaluator /timepoint-kb/duration-of
			       /timepoint-support/duration-of-evaluator)
	   (relation-specialist /timepoint-kb/duration-of 
				/timepoint-support/duration-of-specialist)))

(deffunction /timepoint-kb/time- (?t1 ?t2 ?t3) 
  :documentation "Subtract ?t2 from ?t1."
  :axioms (and 
	   (computed /timepoint-kb/time-)
	   (relation-evaluator /timepoint-kb/time- 
			       /timepoint-support/time-minus-evaluator)
	   (relation-constraint /timepoint-kb/time- 
				/timepoint-support/time-minus-constraint)
	   (relation-specialist /timepoint-kb/time- 
				constraint-specialist)))

(deffunction /timepoint-kb/time+ (?t1 ?t2 ?t3) 
  :documentation "Add ?t2 to ?t1."
  :axioms (and 
	   (computed /timepoint-kb/time+)
	   (relation-evaluator /timepoint-kb/time+ 
			       /timepoint-support/time-add-evaluator)
	   (relation-constraint /timepoint-kb/time+ 
				/timepoint-support/time-add-constraint)
	   (relation-specialist /timepoint-kb/time+ 
				 constraint-specialist)))


(deffunction /timepoint-kb/timepoint-year (?tp ?zone ?year)
  :documentation "The year component of ?tp evaluated in time zone ?zone.
Variable ?zone is represented as a floating point offset from UTC in hours.
As an input value common strings are also recognized."
  :axioms (and 
           (computed /timepoint-kb/timepoint-year)
           (relation-specialist /timepoint-kb/timepoint-year 
				/timepoint-support/timepoint-accessor-specialist)))

(deffunction /timepoint-kb/timepoint-month (?tp ?zone (?month INTEGER))
  :documentation "The month component of ?tp evaluated in time zone ?zone.
Variable ?zone is represented as a floating point offset from UTC in hours.
As an input value common strings are also recognized."
  :axioms (and 
           (computed /timepoint-kb/timepoint-month)
           (relation-specialist /timepoint-kb/timepoint-month 
				/timepoint-support/timepoint-accessor-specialist)))

(deffunction /timepoint-kb/timepoint-day (?tp ?zone (?day INTEGER))
  :documentation "The day component of ?tp evaluated in time zone ?zone.
Variable ?zone is represented as a floating point offset from UTC in hours.
As an input value common strings are also recognized."
  :axioms (and 
           (computed /timepoint-kb/timepoint-day)
           (relation-specialist /timepoint-kb/timepoint-day 
				/timepoint-support/timepoint-accessor-specialist)))

(deffunction /timepoint-kb/timepoint-day-of-week (?tp ?zone (?dow /TIMEPOINT-KB/DAY-OF-WEEK))
  :documentation "The day-of-week component of ?tp evaluated in time zone ?zone.
Variable ?zone is represented as a floating point offset from UTC in hours.
As an input value common strings are also recognized."
  :axioms (and 
           (computed /timepoint-kb/timepoint-day-of-week)
           (relation-specialist /timepoint-kb/timepoint-day-of-week
				/timepoint-support/timepoint-accessor-specialist)))

(deffunction /timepoint-kb/timepoint-hour (?tp ?zone (?hour INTEGER))
  :documentation "The hour component of ?tp evaluated in time zone ?zone.
Variable ?zone is represented as a floating point offset from UTC in hours.
As an input value common strings are also recognized."
  :axioms (and 
           (computed /timepoint-kb/timepoint-hour)
           (relation-specialist /timepoint-kb/timepoint-hour 
				/timepoint-support/timepoint-accessor-specialist)))

(deffunction /timepoint-kb/timepoint-minute (?tp ?zone (?minute INTEGER))
  :documentation "The minute component of ?tp evaluated in time zone ?zone.
Variable ?zone is represented as a floating point offset from UTC in hours.
As an input value common strings are also recognized."
  :axioms (and 
           (computed /timepoint-kb/timepoint-minute)
           (relation-specialist /timepoint-kb/timepoint-minute 
				/timepoint-support/timepoint-accessor-specialist)))

(deffunction /timepoint-kb/timepoint-second (?tp ?zone (?second NUMBER))
  :documentation "The second component of ?tp evaluated in time zone ?zone.

Variable ?zone is represented as a floating point offset from UTC in hours.
As an input value common strings are also recognized."
  :axioms (and
           (computed /timepoint-kb/timepoint-second)
           (relation-specialist /timepoint-kb/timepoint-second 
				/timepoint-support/timepoint-accessor-specialist)))

(deffunction /timepoint-kb/timepoint-date (?tp ?zone (?date STRING))
  :documentation "The date component of ?tp evaluated in time zone ?zone.
Variable ?zone is represented as a floating point offset from UTC in hours.
As an input value common strings are also recognized."
  :axioms (and 
           (computed /timepoint-kb/timepoint-date)
           (relation-specialist /timepoint-kb/timepoint-date 
				/timepoint-support/timepoint-accessor-specialist)))

(deffunction /timepoint-kb/timepoint-time (?tp ?zone (?time STRING))
  :documentation "The time component of ?tp evaluated in time zone ?zone.
Variable ?zone is represented as a floating point offset from UTC in hours.
As an input value common strings are also recognized."
  :axioms (and 
           (computed /timepoint-kb/timepoint-time)
           (relation-specialist /timepoint-kb/timepoint-time 
				/timepoint-support/timepoint-accessor-specialist)))



(deffunction /timepoint-kb/timepoint-of* ((?year INTEGER)
                                           (?month INTEGER)
                                           (?day INTEGER)
                                           (?hour INTEGER)
                                           (?minute INTEGER)
                                           (?second NUMBER)
                                           ?zone
                                           ?timepoint)
  :documentation "Maps time components into a timepoint or vice-versa.
Variables ?year, ?month, ?day, ?hour and ?minute are integers.
Variable ?second is a number, either integer or float.  Resolution is 0.001
Variable ?zone is the time zone.  It is represented as a floating point offset
from UTC in hours.  As an input value common strings are also recognized.
Variable ?timepoint is the internal timepoint representation."
  :axioms (and 
           (computed /timepoint-kb/timepoint-of*)
           (relation-evaluator /timepoint-kb/timepoint-of* 
			       /timepoint-support/timepoint-of*-evaluator)
           (relation-specialist /timepoint-kb/timepoint-of* 
				/timepoint-support/timepoint-of*-specialist)))

;;
;; Or should these be defobject or definstance?
;; Nope.  They have to be like this for arcane reasons.
;; 

(assert (and (computed-procedure /timepoint-support/timepoint-of-evaluator)
             (computed-procedure /timepoint-support/timepoint-of*-evaluator)
             (computed-procedure /timepoint-support/duration-of-evaluator)
             (computed-procedure /timepoint-support/time-greater-evaluator)
             (computed-procedure /timepoint-support/time-less-evaluator)
             (computed-procedure /timepoint-support/time-plus-evaluator)
             (computed-procedure /timepoint-support/time-minus-evaluator)
             (computed-procedure /timepoint-support/timepoint-of-specialist)
             (computed-procedure /timepoint-support/timepoint-of*-specialist)
             (computed-procedure /timepoint-support/duration-of-specialist)
             (computed-procedure /timepoint-support/time-greater-specialist)
             (computed-procedure /timepoint-support/time-less-specialist)
             (computed-procedure /timepoint-support/time-plus-specialist)
             (computed-procedure /timepoint-support/time-minus-specialist)))

(process-definitions)
))  ; End startup-time-progn

;;;;
;;;; TESTS
;;;;


#|
(in-module PL-USER)


(ask (< (/timepoint-kb/timepoint-of "1/1/2002")
	(/timepoint-kb/timepoint-of "2/2/2002")))
 ;; => TRUE
(ask (< (/timepoint-kb/timepoint-of "2/2/2002")
	(/timepoint-kb/timepoint-of "1/1/2002")))
 ;; => FALSE
(ask (> (/timepoint-kb/timepoint-of "2/2/2002")
	(/timepoint-kb/timepoint-of "1/1/2002")))
 ;; => TRUE

(deffunction bar (?x) :-> ?y)

(assert (= (bar fred) (/timepoint-kb/timepoint-of "2/2/2002")))
(assert (= (bar barney) (/timepoint-kb/timepoint-of "2/2/2002")))
(assert (= (bar wilma) (/timepoint-kb/timepoint-of "2/5/2002")))

(ask (= (bar fred) (bar barney)))
  ;; => TRUE
(ask (= (bar fred) (bar wilma)))
  ;; => FALSE

(ask (< (bar fred) (bar wilma)))
  ;; => TRUE
(ask (< (bar fred) (bar barney)))
  ;; => FALSE
(ask (< (bar wilma) (bar fred)))
  ;; => FALSE
(ask (< (bar wilma) (bar bill)))
  ;; => UNKNOWN

(retrieve ?x (= (/timepoint-kb/timepoint-of ?x)
		(/timepoint-kb/timepoint-of "2/5/2002")))
  ;; => "2002-FEB-05 8:00:00.000 UTC"
(retrieve ?x (= (/timepoint-kb/timepoint-of ?x)  (bar fred)))
  ;; => "2002-FEB-02 8:00:00.000 UTC"
(retrieve ?x (= (/timepoint-kb/timepoint-of "2/5/2002")
		(/timepoint-kb/timepoint-of ?x)))
  ;; => "2002-FEB-02 8:00:00.000 UTC"
(retrieve ?x (= (/timepoint-kb/timepoint-of ?x)  (bar bill)))
  ;; No solutions.


(retrieve (= (/timepoint-kb/timepoint-year
              (/timepoint-kb/timepoint-of "2/5/2002 00:25:30 EST") "PST")
             ?y))
   ;; => 2002
(retrieve (= (/timepoint-kb/timepoint-day
              (/timepoint-kb/timepoint-of "2/5/2002 00:25:30 EST") "EST")
             ?d))
   ;; => 5
(retrieve (= (/timepoint-kb/timepoint-day
              (/timepoint-kb/timepoint-of "2/5/2002 00:25:30 EST") "PST")
             ?D))
   ;; => 4
(retrieve (/timepoint-kb/timepoint-date
              (/timepoint-kb/timepoint-of "2/5/2002 00:25:30 EST") "PST" ?y))
   ;;  "2002-FEB-04"
(retrieve (/timepoint-kb/timepoint-time
              (/timepoint-kb/timepoint-of "2/5/2002 00:25:30 EST") "EST" ?y))
   ;;  "00:25:30.000 -5.0"
(retrieve (= (/timepoint-kb/timepoint-time
              (/timepoint-kb/timepoint-of "2/5/2002 00:25:30 EST") -8.0)
             ?y))
   ;;  "21:25:30.000 -8.0"

(retrieve (= (/timepoint-kb/timepoint-of* ?y ?m ?d ?hh ?mm ?ss -8.0)
             (/timepoint-kb/timepoint-of "2/5/2002 15:25:30 EST")))
  ;; => ?Y=2002, ?M=2, ?D=5, ?HH=12, ?MM=25, ?SS=30.0

(retrieve (= (/timepoint-kb/timepoint-of* ?y ?m ?d ?hh ?mm ?ss "PST")
             (/timepoint-kb/timepoint-of "2/5/2002 15:25:30 EST")))
  ;; =>?Y=2002, ?M=2, ?D=5, ?HH=12, ?MM=25, ?SS=30.0,

(retrieve (= (/timepoint-kb/timepoint-of* ?y ?m ?d ?hh ?mm ?ss "PST")
             (/timepoint-kb/timepoint-of "2/5/2002 00:25:30 EST")))
  ;; => ?Y=2002, ?M=2, ?D=4, ?HH=21, ?MM=25, ?SS=30.0

(retrieve (= (/timepoint-kb/timepoint-of* ?y ?m ?d ?hh ?mm ?ss ?tz)
             (/timepoint-kb/timepoint-of "2/5/2002 00:25:30 EST")))
  ;; => ?Y=2002, ?M=2, ?D=5, ?HH=5, ?MM=25, ?SS=30.0 ?TZ=0.0

(retrieve (= (/timepoint-kb/timepoint-of* 2003 12 10 18 35 45 "PST")
             ?tp))
  ;; =>  ?TP="2003-DEC-11 2:35:45.000 UTC"
(retrieve (= ?dow (/timepoint-kb/timepoint-day-of-week
                   (/timepoint-kb/timepoint-of* 2003 12 10 18 35 45 "PST")
                   "PST")))
  ;; => ?DOW=/TIMEPOINT-KB/WEDNESDAY




(retrieve (/timepoint-kb/time- (/timepoint-kb/timepoint-of "5/12/2004")
                               (/timepoint-kb/timepoint-of "5/1/2004")
                               ?x))
  ;; =>  ?X=<plus 11 days; 0 ms>

(retrieve (/timepoint-kb/time+ (/timepoint-kb/timepoint-of "12/25/2004 UTC")
                               (/timepoint-kb/duration-of "12 days")
                               ?x))
  ;; =>  ?X="2005-JAN-06 0:00:00.000 UTC"

(retrieve (/timepoint-kb/time+ (/timepoint-kb/timepoint-of "12/25/2004 UTC")
                               (/timepoint-kb/duration-of "12 days; 10 ms")
                               ?x))
  ;; =>  ?X="2005-JAN-06 0:00:00.010 UTC"
|#

;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                          ;
;  COPYRIGHT (C) UNIVERSITY OF SOUTHERN CALIFORNIA, 1997                   ; 
;  University of Southern California, Information Sciences Institute       ;
;  4676 Admiralty Way                                                      ;
;  Marina Del Rey, California 90292                                        ;
;                                                                          ;
;  This software was developed under the terms and conditions of Contract  ;
;  No. N00014-94-C-0245 between the Defense Advanced Research Projects     ;
;  Agency and the University of Southern California, Information Sciences  ; 
;  Institute.  Use and distribution of this software is further subject    ;
;  to the provisions of that contract and any other agreements developed   ;
;  between the user of the software and the University of Southern         ;
;  California, Information Sciences Institute.  It is supplied "AS IS",    ;
;  without any warranties of any kind.  It is furnished only on the basis  ;
;  that any party who receives it indemnifies and holds harmless the       ;
;  parties who furnish and originate it against any claims, demands, or    ;
;  liabilities connected with using it, furnishing it to others or         ;
;  providing it to a third party.  THIS NOTICE MUST NOT BE REMOVED FROM    ;
;  THE SOFTWARE, AND IN THE EVENT THAT THE SOFTWARE IS DIVIDED, IT SHOULD  ;
;  BE ATTACHED TO EVERY PART.                                              ;
;                                                                          ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Version: stella-patches.ste,v 1.9 1999/07/17 00:14:52 hans Exp

;;; Patches and extensions that eventually need to be folded into Stella.

(in-package "STELLA")

(in-module "STELLA")


;-----------------------------------------------------------------
;; MAYBE PATCH FOR CONTEXTS (BUT HAVE TO FIX FORWARD REFS):

#|
(defun print-context ((self CONTEXT) (stream NATIVE-OUTPUT-STREAM))  
  ;; Print function for contexts.
  (let ((typeString STRING NULL)
        (name STRING NULL)
        (number (context-number self)))
    (when (not *class-hierarchy-booted?*)
      ;; Printing before the classes are bootstrapped:
      (print-native-stream stream "|MDL|" (module-name (cast self MODULE)))
      (return))
    (typecase self
      (MODULE
       (setq name (module-full-name self))
       (if (discarded-context? self)
         (setq typeString "|DISCARDED MDL|")
         (setq typeString "|MDL|")))
      (WORLD
       (setq name (world-name self))
       (let ((cacheOfWorld (inference-cache-of self)))
         (cond
          ((discarded-context? self)
           (setq typeString "|DISCARDED WLD|"))
          ((defined? cacheOfWorld)
           (cond
            ((eql? (just-in-time-inference-cache cacheOfWorld) self)
             (setq typeString "|JITWLD|"))
            ((eql? (meta-inference-cache cacheOfWorld) self)
             (setq typeString "|METAWLD|"))
            ((eql? (truth-maintained-inference-cache cacheOfWorld) self)
             (setq typeString "|TMSWLD|")))))))
        (otherwise
         (setq typeString "|WLD|")))
    (when (discarded-context? self)
      (setq number (+ number 1)))
    (if (defined? name)
      (print-native-stream stream typeString name)
      (print-native-stream stream typeString number)) ))
|#

;-----------------------------------------------------------------

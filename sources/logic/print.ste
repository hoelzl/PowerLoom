;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;; BEGIN LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
; Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          ;
;                                                                            ;
; The contents of this file are subject to the Mozilla Public License        ;
; Version 1.1 (the "License"); you may not use this file except in           ;
; compliance with the License. You may obtain a copy of the License at       ;
; http://www.mozilla.org/MPL/                                                ;
;                                                                            ;
; Software distributed under the License is distributed on an "AS IS" basis, ;
; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   ;
; for the specific language governing rights and limitations under the       ;
; License.                                                                   ;
;                                                                            ;
; The Original Code is the PowerLoom KR&R System.                            ;
;                                                                            ;
; The Initial Developer of the Original Code is                              ;
; UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          ;
; 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               ;
;                                                                            ;
; Portions created by the Initial Developer are Copyright (C) 1997-2006      ;
; the Initial Developer. All Rights Reserved.                                ;
;                                                                            ;
; Contributor(s):                                                            ;
;                                                                            ;
; Alternatively, the contents of this file may be used under the terms of    ;
; either the GNU General Public License Version 2 or later (the "GPL"), or   ;
; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   ;
; in which case the provisions of the GPL or the LGPL are applicable instead ;
; of those above. If you wish to allow use of your version of this file only ;
; under the terms of either the GPL or the LGPL, and not to allow others to  ;
; use your version of this file under the terms of the MPL, indicate your    ;
; decision by deleting the provisions above and replace them with the notice ;
; and other provisions required by the GPL or the LGPL. If you do not delete ;
; the provisions above, a recipient may use your version of this file under  ;
; the terms of any one of the MPL, the GPL or the LGPL.                      ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Version: print.ste,v 1.43 2006/05/11 07:05:30 hans Exp

;;; Routines that print logic objects

(in-package "STELLA")

(in-module "LOGIC")


  ;;
;;;;;; Print functions called by :print-form's
  ;;

(defun (wrap-native-output-stream OUTPUT-STREAM) 
       ((nativeStream NATIVE-OUTPUT-STREAM))
  ;; Coerce a native output stream into a STELLA output stream.
  (if (eql? nativeStream (native-stream STANDARD-OUTPUT))
    (return STANDARD-OUTPUT)
    (return (new OUTPUT-STREAM :native-stream nativeStream))) )

(defun print-top-level-object 
       ((self OBJECT) (nativeStream NATIVE-OUTPUT-STREAM))
  ;; Print 'self' to a native stream.  Used by :print-form.
  (let ((stream (wrap-native-output-stream nativeStream)))
    (when (deleted? self)
      (print-stream stream "#DELETED#"))
    (typecase self
      (DESCRIPTION (print-description self stream TRUE))
      (PATTERN-VARIABLE 
       (print-stream stream "|V|")
       (print-variable self stream))
      (SKOLEM (print-skolem self stream TRUE))
      (TRUTH-VALUE (print-truth-value self stream))
      (LOGIC-OBJECT (print-logic-object self stream TRUE))
      (PROPOSITION (print-proposition self stream TRUE))
      (otherwise (print-stream stream self))) ))
  

  ;;
;;;;;; Printing skolems and propositions
  ;;

(defspecial *printMode* KEYWORD :FLAT
  :documentation "Controls the kind of detail that gets printed about
individual objects.  Values are :ORIGINAL, :REALISTIC, :FLAT, :DEBUG-LOW, and
 :DEBUG-HIGH.")

(defspecial *printFunctionsAsRelations?* BOOLEAN FALSE
  :documentation "Controls whether functions are printed as relations (F i v) or
as functions (= (F i) v).")

(defun print-logic-object 
       ((self LOGIC-OBJECT) (stream OUTPUT-STREAM) (topLevel? BOOLEAN))
  ;; Print a logic object.
  (let ((prefix (choose (and topLevel? (not *printreadably?*)) "|i|" "")))
    (cond
     ((defined? (surrogate-value-inverse self))
      (when (and
             (not (eql? (surrogate-value (surrogate-value-inverse self)) self))
             (not (synonym-surrogate?
                   (surrogate-value-inverse self))))
        (setq prefix "|BAD surrogate|"))
      (print-stream stream prefix (stringified-surrogate (surrogate-value-inverse self))))
     (otherwise
      (print-stream stream prefix "_" (symbol-name (logical-type self))))) ))

(defconstant VARIABLE-BINDING-SEPARATOR STRING "/")
(defconstant VALUE-OF-SEPARATOR STRING "//")

(defspecial *skolemNameMappingTable* (ENTITY-MAPPING OF SKOLEM SKOLEM) NULL
  :documentation "If set, maps some skolems to names other than
their own.")

(defun (get-skolem-print-name STRING) ((self SKOLEM))
  ;; Return either the mapped name of 'self' or its original name.
  (if (defined? *skolemNameMappingTable*)
    (let ((substituteSkolem (lookup *skolemNameMappingTable* self)))
      (return (choose (defined? substituteSkolem)
                      (skolem-name substituteSkolem)
                      (skolem-name self))))
    (return (skolem-name self))) )

(defun print-value-of-chain 
       ((self SKOLEM) (stream OUTPUT-STREAM) (chainEnd OBJECT))
  ;; Help 'print-variable' and 'print-skolem' by printing out members
  ;;    of value-of chains, separated by '/'s.
  (when (null? chainEnd)
    (setq chainEnd self))
  (case *printMode*
    ((:REALISTIC :ORIGINAL) 
     ;; EXPERIMENT:
     (typecase self
       (PATTERN-VARIABLE
        (special ((*printMode* :FLAT))
          (print-value-of-chain self stream chainEnd)))
       (otherwise
        (print-variable-value chainEnd stream))))
    ((:FLAT :DEBUG-LOW)
     (print-skolem-name self stream)
     (when (eql? self chainEnd)
       (return))
     (print-stream stream VALUE-OF-SEPARATOR)
     (print-variable-value chainEnd stream))
    (:DEBUG-HIGH
     (print-skolem-name self stream)
     (when (eql? self chainEnd)
       (return))
     (let ((cursor OBJECT self)
           (nextValue OBJECT NULL))
       (loop
         (typecase cursor
           (SKOLEM (setq nextValue (variable-value cursor)))
           (LOGIC-OBJECT (setq nextValue cursor))
           (SURROGATE (setq nextValue (surrogate-value cursor)))
           (RELATION (setq nextValue (description cursor))))
         (print-stream stream VALUE-OF-SEPARATOR)
         (print-variable-value nextValue stream)
         (when (eql? nextValue chainEnd)
           (break))
         (setq cursor nextValue))))) )

(defun print-skolem-name ((self SKOLEM) (stream OUTPUT-STREAM))
  ;; Print the name of the skolem `self' onto `stream'.
  (print-stream stream (string-downcase (get-skolem-print-name self))))

(defun print-variable-name ((self PATTERN-VARIABLE) (stream OUTPUT-STREAM))
  ;; Print the name of the variable `self' onto `stream'.
  (print-skolem-name self stream))

(defun print-variable-value ((self OBJECT) (stream OUTPUT-STREAM))
  ;; Print out a skolem's or variable's value `self' onto `stream'.
  (typecase self
    (PATTERN-VARIABLE
     (print-variable-name self stream))
    (SKOLEM
     (print-skolem-name self stream))
    (otherwise
     (print-logical-form self stream))))

(defun print-skolem ((self SKOLEM) (stream OUTPUT-STREAM) (topLevel? BOOLEAN))
  ;; Print a skolem.
  (ignore topLevel?)
  (let ((prefix "|SK|"))
    (case *printMode*
      ((:ORIGINAL :REALISTIC)
       (setq prefix "")
       (when (defined? (native-value-of self))
         (print-variable-value (native-value-of self) stream)
         (return)))
      (otherwise NULL))
    ;; EXPERIMENT:
    (when (and (defined? (defining-proposition self))
               (null? (variable-value self)))
      (print-stream stream prefix)
      (special ((*printLogicalFormStream* stream)
                (*indentCounter* 20))
        (print-kif-FUNCTION-expression (defining-proposition self)))
      (return))
    (print-value-of-chain self stream (innermost-of self))))

(defun print-variable ((self PATTERN-VARIABLE) (stream OUTPUT-STREAM))
  ;; Print a variable.
  (when (and (printing-justification?)
             (defined? (justification-argument-bound-to self NULL)))
    (pretty-print-logical-form
     (justification-argument-bound-to self NULL) stream)
    (return))
  (let ((value (choose (defined? *printInFrame*)
                       (bound-to-in-frame self *printInFrame*)
                       (safe-bound-to self))))
    (when (defined? value)
      (print-variable-name self stream)
      (print-stream stream VARIABLE-BINDING-SEPARATOR)
      (special ((*printReadably?* TRUE))
        (print-variable-value value stream)
        (return))))
  (print-value-of-chain self stream (innermost-of self)))

(defun print-quantified-variable ((self PATTERN-VARIABLE) (stream OUTPUT-STREAM))
  ;; Print the 'name' of the variable 'self'.  In some debug modes,
  ;;    also print its binding.
  (if *printReadably?*
      ;; make sure we don't print any unreadable bindings to constants:
      (print-variable-name self stream)
    (print-variable self stream)))

(defun print-proposition
       ((self PROPOSITION) (stream OUTPUT-STREAM) (topLevel? BOOLEAN))
  ;; Print a top-level proposition.
  (let ((prefix STRING NULL))
    (when (deleted? self)
      (print-stream stream "|dElEtEd-proposition|")
      (return))
    (when (and topLevel? (not *printreadably?*))
      (cond
       ((or (default-true? self)
            (default-false? self))
        (setq prefix (choose (descriptive? self) "|pd|" "|p|")))
       ((or (true-proposition? self) ;; also handle functions
            (false? self))
        (setq prefix (choose (descriptive? self) "|Pd|" "|P|")))
       ((inconsistent? self)
        (setq prefix (choose (descriptive? self) "|Pd#|" "|P#|")))
       (otherwise
        (setq prefix (choose (descriptive? self) "|Pd?|" "|P?|")))))
    (when (unfastened? self)
      (setq prefix (choose (descriptive? self) "|uPd|" "|uP|")))
    (when (and (defined? (surrogate-value-inverse self))
               (not (eql? (surrogate-value (surrogate-value-inverse self))
                          self)))
      (setq prefix "|BAD surrogate|"))
    (when (defined? prefix)
      (print-stream stream prefix)))
  (print-logical-form self stream))

(defglobal *debug-mode?* BOOLEAN FALSE
  :documentation "If set to TRUE, simplify printing so that it
doesn't break during a debugging session.")

(defun print-description
       ((self DESCRIPTION) (stream OUTPUT-STREAM) (topLevel? BOOLEAN))
  ;; Print a description.  Either print the 'proposition' of 'self',
  ;;    or, if that is undefined, the description type, or, if that is
  ;;    undefined the primary type of 'self'.
  (when (deleted? self)
      (print-stream stream "|dElEtEd-description|")
      (when (defined? (surrogate-value-inverse self))
        (print-stream stream (surrogate-value-inverse self)))
      (return))
  (cond
   ((or *loadingRegenerableObjects?*
        (bad? self)
        *debug-mode?*)
    (print-stream stream "|d|"))
   ((and topLevel? (not *printreadably?*))
    (cond
     ((class? self) (print-stream stream "|c|"))
     ((function? self) (print-stream stream "|f|"))
     ((relation? self) (print-stream stream "|r|"))
     (otherwise (print-stream stream "|d|")))))
  (print-logical-form self stream) )

;(defun print-enumeration ((self SKOLEM) 
;                          (stream NATIVE-OUTPUT-STREAM))
;  (print-native-stream
;   stream "(" (choose (no-duplicates? self) "SETOF" "LISTOF"))
;  (let ((enumeration (enumeration self)))
;    (when (defined? enumeration)
;      (when (> (length enumeration) 0)
;        (print-native-stream stream " "))
;      (typecase enumeration
;        (LIST (pprint-cons (the-cons-list enumeration) stream "" ""))
;        (otherwise (print-native-stream stream "...")))))
;  (print-native-stream stream ")"))

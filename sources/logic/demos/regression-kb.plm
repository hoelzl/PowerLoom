;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;; Version: regression-kb.plm,v 1.4 2000/07/15 02:35:04 hans Exp

(in-package "STELLA")

(defmodule "/PL-KERNEL/PL-USER/FAMILY")

(in-module "/PL-KERNEL/PL-USER/FAMILY")

(clear-module "FAMILY")

(reset-features)

(in-dialect KIF)


(defconcept Person (?p))

(defrelation married ((?p person)))
(defrelation female ((?p person)))
(defrelation spouse ((?x person) (?y person)))
(defrelation friend ((?x person) (?y person)))
(defrelation retired ((?p person)))
(defrelation parent ((?x person) (?y person)))
(defrelation sibling ((?x person) (?y person)))
(deffunction age ((?p person)) :-> (?i float))

;; Here's all of the people in our KB

(assert (Person Gwen))
(assert (Person Grady))
(assert (Person Don))
(assert (Person Gary))
(assert (Person Mike))
(assert (Person Dee))
(assert (Person Steve))
(assert (Person Donna))
(assert (Person Aileen))
(assert (Person Francis))
(assert (Person David))
(assert (Person Megan))
(assert (Person Alec))
(assert (Person Paul))
(assert (Person Bart))
(assert (Person Brent))
(assert (Person Lisa))
(assert (Person Carol))
(assert (Person Allene))
(assert (Person Bob))
(assert (Person Tara))
(assert (Person Susan))
(assert (Person Bern))

(assert (retired Aileen))
(assert (retired Don))
(assert (retired Francis))
(assert (retired Allene))
(assert (retired Bob))

(assert (Female Dee))
(assert (Female Megan))
(assert (Female Aileen))
(assert (Female Gwen))
(assert (Female Donna))
(assert (Female Francis))
(assert (Female Carol))
(assert (Female Tara))
(assert (Female Lisa))
(assert (Female Susan))

(assert (Sibling Brent Megan))
(assert (Sibling Donna Dee))
(assert (Sibling Megan David))
(assert (Sibling David Megan))
(assert (Sibling Carol Gwen))
(assert (Sibling Bart Bern))

(assert (Parent Mike Brent))
(assert (Parent Mike David))
(assert (Parent Mike Megan))
(assert (Parent Donna Brent))
(assert (Parent Donna David))
(assert (Parent Aileen Donna))
(assert (Parent Aileen Dee))
(assert (Parent Gwen David))
(assert (Parent Bob Tara))
(assert (Parent Francis Gwen))
(assert (Parent Allene Bob))
(assert (Parent Paul Bart))
(assert (Parent Paul Bern))

(assert (Spouse Mike Donna))
(assert (Spouse Don Aileen))
(assert (Spouse Grady Allene))
(assert (Spouse David Tara))
(assert (Spouse Gwen Gary))
(assert (Spouse Dee Steve))
(assert (Spouse Brent Lisa))
(assert (Spouse Susan Bern))
(assert (Spouse Megan Alec))

(assert (Friend Bart David))
(assert (Friend David Bern))
(assert (Friend Tara Susan))

(assert (Age Don 82.0))
(assert (Age Grady 91.0))
(assert (Age Gwen 54.0))
(assert (Age Gary 57.0))
(assert (Age Mike 57.0))
(assert (Age Dee 50.0))
(assert (Age Steve 52.0))
(assert (Age Donna 53.0))
(assert (Age Francis 81.0))
(assert (Age David 29.0))
(assert (Age Megan 21.0))
(assert (Age Alec 22.0))
(assert (Age Paul 60.0))
(assert (Age Bart 28.0))
(assert (Age Brent 29.0))
(assert (Age Lisa 28.0))
(assert (Age Carol 51.0))
(assert (Age Aileen 81.0))
(assert (Age Allene 83.0))
(assert (Age Bob 56.0))
(assert (Age Tara 28.0))
(assert (Age Susan 29.0))
(assert (Age Bern 30.0))


(assert (Person Carolyn))
(assert (Person Charles))
(assert (Person GM-Baer))
(assert (Person GP-Baer))
(assert (Person Molly))
(assert (Person Trey))

(assert (Parent Carolyn Molly))
(assert (Parent Charles Molly))
(assert (Parent Carolyn Trey))
(assert (Parent Charles Trey))
(assert (Parent GM-Baer Carolyn))
(assert (Parent GP-Baer Carolyn))

(assert (Age Molly 29.0))
(assert (Age Trey 35.0))
(assert (Age Charles 60.0))
(assert (Age Carolyn 60.0))
(assert (Age GP-Baer 90.0))
(assert (Age GM-Baer 90.0))


(assert (Person DavidR))
(assert (Person Glenda))
(assert (Person Mia))
(assert (Person Keith))
(assert (Person GP-Rassin))
(assert (Person GM-Rassin))

(assert (Parent Glenda Mia))
(assert (Parent DavidR Mia))
(assert (Parent Glenda Trey))
(assert (Parent DavidR Trey))
(assert (Parent GM-Rassin Glenda))
(assert (Parent GP-Rassin Glenda))
(assert (Sibling Trey Molly))
(assert (Spouse Glenda DavidR))
(assert (Spouse GM-Rassin GP-Rassin))

(assert (Age Keith 28.0))
(assert (Age Mia 29.0))
(assert (Age DavidR 51.0))
(assert (Age Glenda 50.0))
(assert (Age GP-Rassin 80.0))
(assert (Age GM-Rassin 79.0))

(assert (Person Bernie))
(assert (Person Phyllis))
(assert (Person Andria))
(assert (Person Julie))
(assert (Person GP-Milstein))
(assert (Person GM-Milstein))

(assert (Parent Phyllis Andria))
(assert (Parent Bernie Andria))
(assert (Parent Phyllis Julie))
(assert (Parent Bernie Julie))
(assert (Parent GM-Milstein Phyllis))
(assert (Parent GP-Milstein Phyllis))
(assert (Spouse Bernie Phyllis))
(assert (Spouse GM-Milstein GP-Milstein))
(assert (Sibling Andria Julie))

(assert (Age Andria 29.0))
(assert (Age Julie 26.0))
(assert (Age Bernie 55.0))
(assert (Age Phyllis 54.0))
(assert (Age GP-Milstein 85.0))
(assert (Age GM-Milstein 85.0))

;; Here are some general rules for inferring relations

(assert (forall ((?x person) (?y person))
	  (=> (Spouse ?x ?y) (Spouse ?y ?x))))

(assert (forall ((?x person) (?y person))
	  (=> (Sibling ?x ?y) (Sibling ?y ?x))))

(assert (forall ((?x person) (?y person))
	  (=> (Friend ?x ?y) (Friend ?y ?x))))



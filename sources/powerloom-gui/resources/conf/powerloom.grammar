terminal            listof, setof, the, setofall, kappa, lambda;
terminal            = OPCOLOR equal, /= notequal, not, and, or, forall, exists;
terminal            <= reverseimplies, => implies, <=> iff, <<= doublereverseimplies, =>> doubleimplies;
terminal            <~ squigglereverseimplies, ~> squiggleimplies, <<~ doublesquigglereverseimplies;
terminal            ~>> doublesquiggleimplies;
terminal            constant, indvar;
terminal            ( lparen, ) rparen;

non terminal        SENTENCE, FUNCONST, RELCONST;
non terminal        EQUATION, RELSENT, INEQUALITY, LOGSENT, QUANTSENT;
non terminal        RULECONST, VARDECL, TERM, FUNTERM, TERMLISTPLUS, TERMLIST;
non terminal        LISTTERM, SETTERM, QUANTERM;
non terminal        SENTENCELIST, VARLIST;

/* The grammar */
SENTENCE         ::= constant | EQUATION | INEQUALITY | RELSENT | LOGSENT | QUANTSENT;
RELSENT          ::= lparen RELCONST TERMLISTPLUS rparen;
EQUATION         ::= lparen equal TERM TERM rparen;
INEQUALITY       ::= lparen notequal TERM TERM rparen;
LOGSENT          ::= lparen not SENTENCE rparen | lparen and SENTENCELIST rparen | lparen or SENTENCELIST rparen | lparen implies SENTENCELIST SENTENCE rparen | lparen doubleimplies SENTENCELIST SENTENCE rparen | lparen reverseimplies SENTENCELIST SENTENCE rparen | lparen doublereverseimplies SENTENCELIST SENTENCE rparen | lparen squiggleimplies SENTENCELIST SENTENCE rparen | lparen doublesquiggleimplies SENTENCELIST SENTENCE rparen | lparen squigglereverseimplies SENTENCELIST SENTENCE rparen | lparen doublesquigglereverseimplies SENTENCELIST SENTENCE rparen;
QUANTSENT        ::= lparen forall VARLIST SENTENCE rparen | lparen forall VARLIST SENTENCE SENTENCE rparen | lparen exists VARLIST SENTENCE rparen;
FUNCONST         ::= constant;
RELCONST         ::= constant;
RULECONST        ::= constant;
CONCEPTCONST     ::= constant;
VARDECL          ::= lparen indvar CONCEPTCONST rparen | indvar;
TERM             ::= indvar | constant | FUNTERM | LISTTERM | SETTERM | QUANTERM;
FUNTERM          ::= lparen FUNCONST TERMLISTPLUS rparen;
LISTTERM         ::= lparen listof TERMLIST rparen;
SETTERM          ::= lparen setof TERMLIST rparen;
QUANTERM         ::= lparen the VARDECL SENTENCE rparen | lparen setofall VARDECL SENTENCE rparen | lparen kappa VARLIST SENTENCE rparen | lparen lambda VARLIST TERM rparen;
TERMLISTPLUS     ::= TERM TERMLIST;
TERMLIST         ::= TERM TERMLIST | EMPTY;
SENTENCELIST     ::= SENTENCE SENTENCELIST | EMPTY;
VARDECLLIST      ::= VARDECL VARDECLLIST | EMPTY;
VARDECLLISTPLUS  ::= VARDECL VARDECLLIST;
VARLIST          ::= VARDECL | lparen VARDECLLISTPLUS rparen;



package edu.isi.powerloom.gui.parser;

import java.lang.System;
import java.util.*;
import java.io.*;

public class Scanner {
    /**
     * @return a List of YyTokens
     */
    public static List scan(String inputString) {
	List result = new ArrayList();
	Yylex yy = new Yylex(new StringReader(inputString));
	Yytoken t;
	try {
	    while ((t = yy.yylex()) != null) {
		result.add(t);
	    }
	} catch (IOException e) {
	    e.printStackTrace();
	    return null;
	}
	Yytoken endToken = new Yytoken("$", "", 0, 0, 0);
	result.add(endToken);
	return result;
    }

    public static void testScan() {
	String input = "(rel domain range)";
        List tokens = scan(input);
        System.out.println("result of scan: " );
        Iterator iter = tokens.iterator();
        while (iter.hasNext()) {
	    Yytoken token = (Yytoken)iter.next();
	    System.out.println("  " + token);
	}
    }

    public static void main(String argv[]) throws java.io.IOException {
	testScan();
	/*
	Yylex yy = new Yylex(System.in);
	Yytoken t;
	while ((t = yy.yylex()) != null)
	    System.out.println(t);
	*/
    }
}

class PLUtility {
  public static void plAssert
    (
     boolean expr
     )
      { 
	if (false == expr) {
	  throw (new Error("Error: Assertion failed."));
	}
      }
  
  private static final String errorMsg[] = {
    "Error: Unmatched end-of-comment punctuation.",
    "Error: Unmatched start-of-comment punctuation.",
    "Error: Unclosed string.",
    "Error: Illegal character."
    };
  
  public static final int E_ENDCOMMENT = 0; 
  public static final int E_STARTCOMMENT = 1; 
  public static final int E_UNCLOSEDSTR = 2; 
  public static final int E_UNMATCHED = 3; 

  public static void error
    (
     int code
     )
      {
	System.out.println(errorMsg[code]);
      }
}
%%

%{
  private int comment_count = 0;
%} 
%line
%char
%state COMMENT

ALPHA=[A-Za-z]
DIGIT=[0-9]
SPECIAL=[!@#$%^&*\_\-<>+=]
NONNEWLINE_WHITE_SPACE_CHAR=[\ \t\b\012]
WHITE_SPACE_CHAR=[\n\ \t\b\012]
STRING_TEXT=(\\\"|[^\n\"]|\\{WHITE_SPACE_CHAR}+\\)*
COMMENT_TEXT=([^/*\n]|[^*\n]"/"[^*\n]|[^/\n]"*"[^/\n]|"*"[^/\n]|"/"[^*\n])*


%% 

<YYINITIAL> "(" { return (new Yytoken("lparen",yytext(),yyline,yychar,yychar+1)); }
<YYINITIAL> ")" { return (new Yytoken("rparen",yytext(),yyline,yychar,yychar+1)); }
<YYINITIAL> "[" { return (new Yytoken("lbracket",yytext(),yyline,yychar,yychar+1)); }
<YYINITIAL> "=" { return (new Yytoken("equal",yytext(),yyline,yychar,yychar+1)); }
<YYINITIAL> "/=" { return (new Yytoken("notequal",yytext(),yyline,yychar,yychar+2)); }
<YYINITIAL> "=>" { return (new Yytoken("implies",yytext(),yyline,yychar,yychar+2)); }
<YYINITIAL> "<=>" { return (new Yytoken("iff",yytext(),yyline,yychar,yychar+3)); }
<YYINITIAL> "<<=" { return (new Yytoken("doublereverseimplies",yytext(),yyline,yychar,yychar+3)); }
<YYINITIAL> "=>>" { return (new Yytoken("doubleimplies",yytext(),yyline,yychar,yychar+3)); }
<YYINITIAL> "<~" { return (new Yytoken("squigglereverseimplies",yytext(),yyline,yychar,yychar+3)); }
<YYINITIAL> "~>" { return (new Yytoken("squiggleimplies",yytext(),yyline,yychar,yychar+3)); }
<YYINITIAL> "<<~" { return (new Yytoken("doublesquigglereverseimplies",yytext(),yyline,yychar,yychar+3)); }
<YYINITIAL> "~>>" { return (new Yytoken("doublesquiggleimplies",yytext(),yyline,yychar,yychar+3)); }
<YYINITIAL> "<=" { return (new Yytoken("reverseimplies",yytext(),yyline,yychar,yychar+2)); }

<YYINITIAL> {NONNEWLINE_WHITE_SPACE_CHAR}+ { }

<YYINITIAL,COMMENT> \n { }

<YYINITIAL> "/*" { yybegin(COMMENT); comment_count = comment_count + 1; }

<COMMENT> "/*" { comment_count = comment_count + 1; }
<COMMENT> "*/" { 
	comment_count = comment_count - 1; 
	PLUtility.plAssert(comment_count >= 0);
	if (comment_count == 0) {
    		yybegin(YYINITIAL);
	}
}
<COMMENT> {COMMENT_TEXT} { }

<YYINITIAL> \"{STRING_TEXT}\" {
	return (new Yytoken("constant",yytext(),yyline,yychar,yychar + yytext().length()));

}
<YYINITIAL> \"{STRING_TEXT} {
	String str =  yytext().substring(1,yytext().length());

	PLUtility.error(PLUtility.E_UNCLOSEDSTR);
	PLUtility.plAssert(str.length() == yytext().length() - 1);
	return (new Yytoken("unclosedstring",str,yyline,yychar,yychar + str.length()));
} 
<YYINITIAL> [Ll][Ii][Ss][Tt][Oo][Ff] {
	return (new Yytoken("listof",yytext(),yyline,yychar,yychar + yytext().length()));
}	
<YYINITIAL> [Ss][Ee][Tt][Oo][Ff] {
	return (new Yytoken("setof",yytext(),yyline,yychar,yychar + yytext().length()));
}	
<YYINITIAL> [Tt][Hh][Ee] {
	return (new Yytoken("the",yytext(),yyline,yychar,yychar + yytext().length()));
}	
<YYINITIAL> [Ss][Ee][Tt][Oo][Ff][Aa][Ll][Ll] {
	return (new Yytoken("setofall",yytext(),yyline,yychar,yychar + yytext().length()));
}	
<YYINITIAL> [Kk][Aa][Pp][Pp][Aa] {
	return (new Yytoken("kappa",yytext(),yyline,yychar,yychar + yytext().length()));
}	
<YYINITIAL> [Ll][Aa][Mm][Bb][Dd][Aa] {
	return (new Yytoken("lambda",yytext(),yyline,yychar,yychar + yytext().length()));
}	
<YYINITIAL> [Ff][Oo][Rr][Aa][Ll][Ll] {
	return (new Yytoken("forall",yytext(),yyline,yychar,yychar + yytext().length()));
}	
<YYINITIAL> [Ee][Xx][Ii][Ss][Tt][Ss] {
	return (new Yytoken("exists",yytext(),yyline,yychar,yychar + yytext().length()));
}	
<YYINITIAL> [Aa][Nn][Dd] {
	return (new Yytoken("and",yytext(),yyline,yychar,yychar + yytext().length()));
}	
<YYINITIAL> [Oo][Rr] {
	return (new Yytoken("or",yytext(),yyline,yychar,yychar + yytext().length()));
}	
<YYINITIAL> [Nn][Oo][Tt] {
	return (new Yytoken("not",yytext(),yyline,yychar,yychar + yytext().length()));
}	
<YYINITIAL> \?({ALPHA}|{DIGIT}|_|-)* {
	return (new Yytoken("indvar",yytext(),yyline,yychar,yychar + yytext().length()));
}	
<YYINITIAL> ({ALPHA}|{DIGIT}|{SPECIAL}|/)+ {
	return (new Yytoken("constant",yytext(),yyline,yychar,yychar + yytext().length()));
}	
<YYINITIAL> \|({ALPHA}|{DIGIT}|{SPECIAL}|{NONNEWLINE_WHITE_SPACE_CHAR}|/)+\| {
	return (new Yytoken("constant",yytext(),yyline,yychar,yychar + yytext().length()));
}	
<YYINITIAL> {DIGIT}+ { 
	return (new Yytoken("constant",yytext(),yyline,yychar,yychar + yytext().length()));
}	
<YYINITIAL,COMMENT> . {
        System.out.println("Illegal character: <" + yytext() + ">");
	PLUtility.error(PLUtility.E_UNMATCHED);
}

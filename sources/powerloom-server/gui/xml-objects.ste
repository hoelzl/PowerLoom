;;; -*- Mode: Lisp; Package: STELLA; Syntax: COMMON-LISP; Base: 10 -*-

;;;;;;;;;;;;;;;;;;;;;;;;;;;; BEGIN LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;                                                                            ;
; Version: MPL 1.1/GPL 2.0/LGPL 2.1                                          ;
;                                                                            ;
; The contents of this file are subject to the Mozilla Public License        ;
; Version 1.1 (the "License"); you may not use this file except in           ;
; compliance with the License. You may obtain a copy of the License at       ;
; http://www.mozilla.org/MPL/                                                ;
;                                                                            ;
; Software distributed under the License is distributed on an "AS IS" basis, ;
; WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License   ;
; for the specific language governing rights and limitations under the       ;
; License.                                                                   ;
;                                                                            ;
; The Original Code is the PowerLoom KR&R System.                            ;
;                                                                            ;
; The Initial Developer of the Original Code is                              ;
; UNIVERSITY OF SOUTHERN CALIFORNIA, INFORMATION SCIENCES INSTITUTE          ;
; 4676 Admiralty Way, Marina Del Rey, California 90292, U.S.A.               ;
;                                                                            ;
; Portions created by the Initial Developer are Copyright (C) 2002-2010      ;
; the Initial Developer. All Rights Reserved.                                ;
;                                                                            ;
; Contributor(s):                                                            ;
;                                                                            ;
; Alternatively, the contents of this file may be used under the terms of    ;
; either the GNU General Public License Version 2 or later (the "GPL"), or   ;
; the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),   ;
; in which case the provisions of the GPL or the LGPL are applicable instead ;
; of those above. If you wish to allow use of your version of this file only ;
; under the terms of either the GPL or the LGPL, and not to allow others to  ;
; use your version of this file under the terms of the MPL, indicate your    ;
; decision by deleting the provisions above and replace them with the notice ;
; and other provisions required by the GPL or the LGPL. If you do not delete ;
; the provisions above, a recipient may use your version of this file under  ;
; the terms of any one of the MPL, the GPL or the LGPL.                      ;
;                                                                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; END LICENSE BLOCK ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;; Version: xml-objects.ste,v 1.13 2010/02/12 22:45:47 hans Exp

;;; Set of XML Value objects used for client/server communication.

(in-package "STELLA")

(in-module "GUI-SERVER")


;;; NOTES:
;;; - This code was initially written for a case-sensitive module
;;;   but the current GUI-SERVER module is not case-sensitive anymore
;;;   (thus, the non-uniform mixed-case notation).
;;; - See `webtools/marshaller.ste' for a description of the mapping scheme.


(DEFCLASS |PLString| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|Value| :type STRING)))

(DEFCLASS |PLSurrogate| (|XMLObject|)
  :PUBLIC-SLOTS
  ((ID :type STRING)))

(DEFCLASS |ServerException| (|XMLObject|)
  :public-slots
  ((|Type| :type STRING)
   (|Message| :type STRING)))

(DEFCLASS |PLModuleContainer| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|PLModule| :type (LIST OF |PLModule|))))

(DEFCLASS |PLModule| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|ModuleName| :type STRING)              
   (|SourceString| :type STRING)
   (|CppPackage| :type STRING)   
   (|LispPackage| :type STRING)      
   (|JavaPackage| :type STRING)         
   (|JavaCatchallClass| :type STRING) 
   (|Documentation| :type STRING) 
   (API :type STRING)    
   (|CaseSensitive| :type STRING)       
   (|PLModule| :type (LIST OF |PLModule|))
   (|PLSurrogate| :type (LIST OF |PLSurrogate|))))   ;; SubModules

(DEFCLASS |PLConcept| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|ConceptName| :type STRING) 
   (|Module| :type STRING)
   (|SourceString| :type STRING)
   (|PLConcept| :type (LIST OF |PLConcept|))
   (|PLSurrogate| :type (LIST OF |PLSurrogate|)))) ;; SubConcepts

(DEFCLASS |PLConceptContainer| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|PLConcept| :type (LIST OF |PLConcept|))))

(DEFCLASS |PLRelation| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|RelationName| :type STRING) 
   (|SourceString| :type STRING)
   (|Module| :type STRING)
   (|IsFunction| :type STRING)
   (|IsClosed| :type STRING)   
   (|PLRelation| :type (LIST OF |PLRelation|))
   (|PLSurrogate| :type (LIST OF |PLSurrogate|))))  ;; SubRelations

(DEFCLASS |PLRelationContainer| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|PLRelation| :type (LIST OF |PLRelation|))))

(DEFCLASS |PLInstance| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|InstanceName| :type STRING)
   (|Module| :type STRING)
   (|SourceString| :type STRING)))

(DEFCLASS |PLInstanceContainer| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|PLInstance| :type (LIST OF |PLInstance|))))

(DEFCLASS |PLProposition| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|PropositionName| :type STRING)
   (|IsStrict| :type STRING)
   (|IsAsserted| :type STRING)
   (|IsRule| :type STRING)))

(DEFCLASS |PLPropositionContainer| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|PLProposition| :type (LIST OF |PLProposition|))))

(DEFCLASS |PLRule| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|RuleName| :type STRING)))

(DEFCLASS |PLVariable| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|VariableName| :type |PLString|)
   (|VariableType| :type |PLSurrogate|)))

(DEFCLASS |PLVariableList| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|PLVariable| :type (LIST OF |PLVariable|))))

(DEFCLASS |PLModuleFileList| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|PLModuleFile| :type (LIST OF |PLModuleFile|))))

(DEFCLASS |PLModuleFile| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|KBName| :type STRING)
   (|ModuleName| :type STRING)
   (|KBDescription| :type STRING)
   (|FileName| :type STRING)))

(DEFCLASS |PLFile| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|FileName| :type STRING)
   (|PLFileContent| :type |PLFileContent|)))

(DEFCLASS |PLFileContent| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|textContent| :encoding-scheme :BASE64)))

(DEFCLASS |PLDirectory| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|DirectoryName| :type STRING)))

(DEFCLASS |PLDirectoryContents| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|DirectoryName| :type STRING)
   (|PLDirectory| :type (LIST OF |PLDirectory|))
   (|PLFile| :type (LIST OF |PLFile|))))

(DEFCLASS |PLSurrogateCollection| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|PLSurrogate| :type (LIST OF |PLSurrogate|))))

;;; Union of all PLobject types, used for an item in a query result tuple
(DEFCLASS |PLObjectUnion| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|Type| :type STRING)  ;; ONE OF "STRING, INTEGER, INSTANCE, RELATION, CONCEPT".
   (|PLSurrogate| :type |PLSurrogate|) 
   (|LiteralValue| :type STRING)))

(DEFCLASS |PLTuple| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|PLObjectUnion| :type (LIST OF |PLObjectUnion|))))

(DEFCLASS |PLQuery| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|IsAsk| :type STRING)
   (|QueryName| :type STRING)
   (|Query| :type STRING)
   (|Module| :type STRING)
   (|InferenceLevel| :type STRING)
   (|Timeout| :type STRING)
   (|Moveout| :type STRING)
   (|MatchMode| :type STRING)
   (|NumResults| :type STRING)
   (|MinScore| :type STRING)
   (|MaxUnknowns| :type STRING)
   (|MaximizeScore| :type STRING)
   (|DontOptimize| :type STRING)))

(DEFCLASS |PLQueryResult| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|PLTuple| :type (LIST OF |PLTuple|))))

;; Used instead of passing in multiple parameters, otherwise apply crashes
;; because there are too many arguments.
(DEFCLASS |PLSearchParameter| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|ModuleName| :type STRING)
   (|SearchString| :type STRING)
   (|SearchConcept| :type STRING)  ;; TRUE/FALSE
   (|SearchRelation| :type STRING) ;; "
   (|SearchInstance| :type STRING) ;; "
   (|CaseSensitive| :type STRING)));; "

(DEFCLASS |PLSearchResult| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|PLSearchResultItem| :type (LIST OF |PLSearchResultItem|))))

(DEFCLASS |PLSearchResultItem| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|ModuleName| :type STRING)
   (|PLObjectUnion| :type |PLObjectUnion|)))

(DEFCLASS |PLServerInfo| (|XMLObject|)
  :PUBLIC-SLOTS
  ((|AllowRemoteFileBrowsing| :type STRING)))


  ;;
;;;;;; Predicates
  ;;

(DEFMETHOD (OBJECT-EQL? BOOLEAN) ((x |PLConcept|) (y OBJECT))
  :documentation
  "Return TRUE if `x' and `y' represent the same Concept"
  :public? TRUE
  (TYPECASE y
    (|PLConcept|
     (WHEN (STRING-EQL? (|ConceptName| x) (|ConceptName| y))
       (RETURN TRUE)))
    (OTHERWISE NULL))
  (RETURN FALSE))

(DEFMETHOD (OBJECT-EQL? BOOLEAN) ((x |PLRelation|) (y OBJECT))
  :documentation
  "Return TRUE if `x' and `y' represent the same Relation"
  :public? TRUE
  (TYPECASE y
    (|PLRelation|
     (WHEN (STRING-EQL? (|RelationName| x) (|RelationName| y))
       (RETURN TRUE)))
    (OTHERWISE NULL))
  (RETURN FALSE))

(DEFMETHOD (OBJECT-EQL? BOOLEAN) ((x |PLInstance|) (y OBJECT))
  :documentation
  "Return TRUE if `x' and `y' represent the same Instance"
  :public? TRUE
  (TYPECASE y
    (|PLInstance|
     (WHEN (STRING-EQL? (|InstanceName| x) (|InstanceName| y))
       (RETURN TRUE)))
    (OTHERWISE NULL))
  (RETURN FALSE))

(DEFMETHOD (OBJECT-EQL? BOOLEAN) ((x |PLProposition|) (y OBJECT))
  :documentation
  "Return TRUE if `x' and `y' represent the same Propositions"
  :public? TRUE
  (TYPECASE y
    (|PLProposition|
     (WHEN (STRING-EQL? (|PropositionName| x) (|PropositionName| y))
       (RETURN TRUE)))
    (OTHERWISE NULL))
  (RETURN FALSE))

(DEFUN (|PLSurrogate<| BOOLEAN) ((inst1 |PLSurrogate|) (inst2 |PLSurrogate|))
  (RETURN (STRING< (ID inst1) (ID inst2))))

(DEFUN (|PLModule<| BOOLEAN) ((inst1 |PLModule|) (inst2 |PLModule|))
  (RETURN (STRING< (|ModuleName| inst1) (|ModuleName| inst2))))

(DEFUN (|PLInstance<| BOOLEAN) ((inst1 |PLInstance|) (inst2 |PLInstance|))
  (RETURN (STRING< (|InstanceName| inst1) (|InstanceName| inst2))))

(DEFUN (|PLConcept<| BOOLEAN) ((inst1 |PLConcept|) (inst2 |PLConcept|))
  (RETURN (STRING< (|ConceptName| inst1) (|ConceptName| inst2))))

(DEFUN (|PLRelation<| BOOLEAN) ((inst1 |PLRelation|) (inst2 |PLRelation|))
  (RETURN (STRING< (|RelationName| inst1) (|RelationName| inst2))))
